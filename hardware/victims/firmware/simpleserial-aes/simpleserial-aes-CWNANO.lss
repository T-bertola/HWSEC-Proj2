
simpleserial-aes-CWNANO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001330  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080014b8  080014b8  000114b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014cc  080014cc  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  080014cc  080014cc  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014cc  080014cc  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014cc  080014cc  000114cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014d0  080014d0  000114d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  080014d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000210  080016e4  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000042c  080016e4  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f34  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000dc6  00000000  00000000  0002416c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000029aa  00000000  00000000  00024f32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000268  00000000  00000000  000278dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000418  00000000  00000000  00027b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002bea  00000000  00000000  00027f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000fbc  00000000  00000000  0002ab46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  0002bb02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000708  00000000  00000000  0002bb50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  0002c258  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000052  00000000  00000000  0002c39c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c06      	ldr	r4, [pc, #24]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d107      	bne.n	80001a2 <__do_global_dtors_aux+0x1a>
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000194:	2b00      	cmp	r3, #0
 8000196:	d002      	beq.n	800019e <__do_global_dtors_aux+0x16>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x24>)
 800019a:	e000      	b.n	800019e <__do_global_dtors_aux+0x16>
 800019c:	bf00      	nop
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000210 	.word	0x20000210
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080014a0 	.word	0x080014a0

080001b0 <frame_dummy>:
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <frame_dummy+0x14>)
 80001b2:	b510      	push	{r4, lr}
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d003      	beq.n	80001c0 <frame_dummy+0x10>
 80001b8:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	4804      	ldr	r0, [pc, #16]	; (80001cc <frame_dummy+0x1c>)
 80001bc:	e000      	b.n	80001c0 <frame_dummy+0x10>
 80001be:	bf00      	nop
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	46c0      	nop			; (mov r8, r8)
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	080014a0 	.word	0x080014a0

080001d0 <__gnu_thumb1_case_uqi>:
 80001d0:	b402      	push	{r1}
 80001d2:	4671      	mov	r1, lr
 80001d4:	0849      	lsrs	r1, r1, #1
 80001d6:	0049      	lsls	r1, r1, #1
 80001d8:	5c09      	ldrb	r1, [r1, r0]
 80001da:	0049      	lsls	r1, r1, #1
 80001dc:	448e      	add	lr, r1
 80001de:	bc02      	pop	{r1}
 80001e0:	4770      	bx	lr
 80001e2:	46c0      	nop			; (mov r8, r8)

080001e4 <__udivsi3>:
 80001e4:	2200      	movs	r2, #0
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d374      	bcc.n	80002d6 <__udivsi3+0xf2>
 80001ec:	0903      	lsrs	r3, r0, #4
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d35f      	bcc.n	80002b2 <__udivsi3+0xce>
 80001f2:	0a03      	lsrs	r3, r0, #8
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d344      	bcc.n	8000282 <__udivsi3+0x9e>
 80001f8:	0b03      	lsrs	r3, r0, #12
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d328      	bcc.n	8000250 <__udivsi3+0x6c>
 80001fe:	0c03      	lsrs	r3, r0, #16
 8000200:	428b      	cmp	r3, r1
 8000202:	d30d      	bcc.n	8000220 <__udivsi3+0x3c>
 8000204:	22ff      	movs	r2, #255	; 0xff
 8000206:	0209      	lsls	r1, r1, #8
 8000208:	ba12      	rev	r2, r2
 800020a:	0c03      	lsrs	r3, r0, #16
 800020c:	428b      	cmp	r3, r1
 800020e:	d302      	bcc.n	8000216 <__udivsi3+0x32>
 8000210:	1212      	asrs	r2, r2, #8
 8000212:	0209      	lsls	r1, r1, #8
 8000214:	d065      	beq.n	80002e2 <__udivsi3+0xfe>
 8000216:	0b03      	lsrs	r3, r0, #12
 8000218:	428b      	cmp	r3, r1
 800021a:	d319      	bcc.n	8000250 <__udivsi3+0x6c>
 800021c:	e000      	b.n	8000220 <__udivsi3+0x3c>
 800021e:	0a09      	lsrs	r1, r1, #8
 8000220:	0bc3      	lsrs	r3, r0, #15
 8000222:	428b      	cmp	r3, r1
 8000224:	d301      	bcc.n	800022a <__udivsi3+0x46>
 8000226:	03cb      	lsls	r3, r1, #15
 8000228:	1ac0      	subs	r0, r0, r3
 800022a:	4152      	adcs	r2, r2
 800022c:	0b83      	lsrs	r3, r0, #14
 800022e:	428b      	cmp	r3, r1
 8000230:	d301      	bcc.n	8000236 <__udivsi3+0x52>
 8000232:	038b      	lsls	r3, r1, #14
 8000234:	1ac0      	subs	r0, r0, r3
 8000236:	4152      	adcs	r2, r2
 8000238:	0b43      	lsrs	r3, r0, #13
 800023a:	428b      	cmp	r3, r1
 800023c:	d301      	bcc.n	8000242 <__udivsi3+0x5e>
 800023e:	034b      	lsls	r3, r1, #13
 8000240:	1ac0      	subs	r0, r0, r3
 8000242:	4152      	adcs	r2, r2
 8000244:	0b03      	lsrs	r3, r0, #12
 8000246:	428b      	cmp	r3, r1
 8000248:	d301      	bcc.n	800024e <__udivsi3+0x6a>
 800024a:	030b      	lsls	r3, r1, #12
 800024c:	1ac0      	subs	r0, r0, r3
 800024e:	4152      	adcs	r2, r2
 8000250:	0ac3      	lsrs	r3, r0, #11
 8000252:	428b      	cmp	r3, r1
 8000254:	d301      	bcc.n	800025a <__udivsi3+0x76>
 8000256:	02cb      	lsls	r3, r1, #11
 8000258:	1ac0      	subs	r0, r0, r3
 800025a:	4152      	adcs	r2, r2
 800025c:	0a83      	lsrs	r3, r0, #10
 800025e:	428b      	cmp	r3, r1
 8000260:	d301      	bcc.n	8000266 <__udivsi3+0x82>
 8000262:	028b      	lsls	r3, r1, #10
 8000264:	1ac0      	subs	r0, r0, r3
 8000266:	4152      	adcs	r2, r2
 8000268:	0a43      	lsrs	r3, r0, #9
 800026a:	428b      	cmp	r3, r1
 800026c:	d301      	bcc.n	8000272 <__udivsi3+0x8e>
 800026e:	024b      	lsls	r3, r1, #9
 8000270:	1ac0      	subs	r0, r0, r3
 8000272:	4152      	adcs	r2, r2
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d301      	bcc.n	800027e <__udivsi3+0x9a>
 800027a:	020b      	lsls	r3, r1, #8
 800027c:	1ac0      	subs	r0, r0, r3
 800027e:	4152      	adcs	r2, r2
 8000280:	d2cd      	bcs.n	800021e <__udivsi3+0x3a>
 8000282:	09c3      	lsrs	r3, r0, #7
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__udivsi3+0xa8>
 8000288:	01cb      	lsls	r3, r1, #7
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0983      	lsrs	r3, r0, #6
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__udivsi3+0xb4>
 8000294:	018b      	lsls	r3, r1, #6
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0943      	lsrs	r3, r0, #5
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__udivsi3+0xc0>
 80002a0:	014b      	lsls	r3, r1, #5
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0903      	lsrs	r3, r0, #4
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__udivsi3+0xcc>
 80002ac:	010b      	lsls	r3, r1, #4
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	08c3      	lsrs	r3, r0, #3
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__udivsi3+0xd8>
 80002b8:	00cb      	lsls	r3, r1, #3
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0883      	lsrs	r3, r0, #2
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__udivsi3+0xe4>
 80002c4:	008b      	lsls	r3, r1, #2
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0843      	lsrs	r3, r0, #1
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__udivsi3+0xf0>
 80002d0:	004b      	lsls	r3, r1, #1
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	1a41      	subs	r1, r0, r1
 80002d8:	d200      	bcs.n	80002dc <__udivsi3+0xf8>
 80002da:	4601      	mov	r1, r0
 80002dc:	4152      	adcs	r2, r2
 80002de:	4610      	mov	r0, r2
 80002e0:	4770      	bx	lr
 80002e2:	e7ff      	b.n	80002e4 <__udivsi3+0x100>
 80002e4:	b501      	push	{r0, lr}
 80002e6:	2000      	movs	r0, #0
 80002e8:	f000 f806 	bl	80002f8 <__aeabi_idiv0>
 80002ec:	bd02      	pop	{r1, pc}
 80002ee:	46c0      	nop			; (mov r8, r8)

080002f0 <__aeabi_uidivmod>:
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d0f7      	beq.n	80002e4 <__udivsi3+0x100>
 80002f4:	e776      	b.n	80001e4 <__udivsi3>
 80002f6:	4770      	bx	lr

080002f8 <__aeabi_idiv0>:
 80002f8:	4770      	bx	lr
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <get_pt>:
	aes_indep_key(k);
	return 0x00;
}

uint8_t get_pt(uint8_t* pt, uint8_t len)
{
 80002fc:	b510      	push	{r4, lr}
 80002fe:	0004      	movs	r4, r0
    aes_indep_enc_pretrigger(pt);
 8000300:	f001 f877 	bl	80013f2 <aes_indep_enc_pretrigger>

	trigger_high();
 8000304:	f000 fa34 	bl	8000770 <trigger_high>

  #ifdef ADD_JITTER
  for (volatile uint8_t k = 0; k < (*pt & 0x0F); k++);
  #endif

	aes_indep_enc(pt); /* encrypting the data block */
 8000308:	0020      	movs	r0, r4
 800030a:	f001 f86e 	bl	80013ea <aes_indep_enc>
	trigger_low();
 800030e:	f000 fa37 	bl	8000780 <trigger_low>

    aes_indep_enc_posttrigger(pt);
 8000312:	0020      	movs	r0, r4
 8000314:	f001 f86e 	bl	80013f4 <aes_indep_enc_posttrigger>

	simpleserial_put('r', 16, pt);
 8000318:	0022      	movs	r2, r4
 800031a:	2110      	movs	r1, #16
 800031c:	2072      	movs	r0, #114	; 0x72
 800031e:	f000 f8bb 	bl	8000498 <simpleserial_put>
	return 0x00;
}
 8000322:	2000      	movs	r0, #0
 8000324:	bd10      	pop	{r4, pc}

08000326 <aes>:
    return 0;
}

#if SS_VER == SS_VER_2_1
uint8_t aes(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 8000326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000328:	001d      	movs	r5, r3
 800032a:	000c      	movs	r4, r1
 800032c:	2304      	movs	r3, #4
 800032e:	000f      	movs	r7, r1
 8000330:	0016      	movs	r6, r2
 8000332:	401c      	ands	r4, r3
    uint8_t req_len = 0;
    uint8_t err = 0;
    uint8_t mask_len = 0;
    if (scmd & 0x04) {
 8000334:	4219      	tst	r1, r3
 8000336:	d008      	beq.n	800034a <aes+0x24>
        // Mask has variable length. First byte encodes the length
        mask_len = buf[req_len];
 8000338:	7829      	ldrb	r1, [r5, #0]
        req_len += 1 + mask_len;
 800033a:	1c4c      	adds	r4, r1, #1
 800033c:	b2e4      	uxtb	r4, r4
        if (req_len > len) {
 800033e:	4294      	cmp	r4, r2
 8000340:	d81f      	bhi.n	8000382 <aes+0x5c>
            return SS_ERR_LEN;
        }
        err = get_mask(buf + req_len - mask_len, mask_len);
 8000342:	1a60      	subs	r0, r4, r1
 8000344:	1828      	adds	r0, r5, r0
  aes_indep_mask(m, len);
 8000346:	f001 f856 	bl	80013f6 <aes_indep_mask>
        if (err)
            return err;
    }

    if (scmd & 0x02) {
 800034a:	07bb      	lsls	r3, r7, #30
 800034c:	d508      	bpl.n	8000360 <aes+0x3a>
        req_len += 16;
 800034e:	3410      	adds	r4, #16
 8000350:	b2e4      	uxtb	r4, r4
        if (req_len > len) {
 8000352:	42a6      	cmp	r6, r4
 8000354:	d315      	bcc.n	8000382 <aes+0x5c>
            return SS_ERR_LEN;
        }
        err = get_key(buf + req_len - 16, 16);
 8000356:	0020      	movs	r0, r4
 8000358:	3810      	subs	r0, #16
 800035a:	1828      	adds	r0, r5, r0
	aes_indep_key(k);
 800035c:	f001 f841 	bl	80013e2 <aes_indep_key>
        if (err)
            return err;
    }
    if (scmd & 0x01) {
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	d50b      	bpl.n	800037c <aes+0x56>
        req_len += 16;
 8000364:	3410      	adds	r4, #16
 8000366:	b2e4      	uxtb	r4, r4
        if (req_len > len) {
 8000368:	42a6      	cmp	r6, r4
 800036a:	d30a      	bcc.n	8000382 <aes+0x5c>
            return SS_ERR_LEN;
        }
        err = get_pt(buf + req_len - 16, 16);
 800036c:	0020      	movs	r0, r4
 800036e:	3810      	subs	r0, #16
 8000370:	2110      	movs	r1, #16
 8000372:	1828      	adds	r0, r5, r0
 8000374:	f7ff ffc2 	bl	80002fc <get_pt>
        if (err)
 8000378:	2800      	cmp	r0, #0
 800037a:	d103      	bne.n	8000384 <aes+0x5e>

    if (len != req_len) {
        return SS_ERR_LEN;
    }

    return 0x00;
 800037c:	2000      	movs	r0, #0
    if (len != req_len) {
 800037e:	42b4      	cmp	r4, r6
 8000380:	d000      	beq.n	8000384 <aes+0x5e>
        return SS_ERR_LEN;
 8000382:	2004      	movs	r0, #4

}
 8000384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000386:	0000      	movs	r0, r0

08000388 <main>:
#endif

int main(void)
{
 8000388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t tmp[KEY_LENGTH] = {DEFAULT_KEY};
 800038a:	2210      	movs	r2, #16
 800038c:	490c      	ldr	r1, [pc, #48]	; (80003c0 <main+0x38>)
 800038e:	4668      	mov	r0, sp
 8000390:	f001 f87c 	bl	800148c <memcpy>

    platform_init();
 8000394:	f000 f940 	bl	8000618 <platform_init>
    init_uart();
 8000398:	f000 f96a 	bl	8000670 <init_uart>
    trigger_setup();
 800039c:	f000 f9a8 	bl	80006f0 <trigger_setup>

	aes_indep_init();
 80003a0:	f001 f81e 	bl	80013e0 <aes_indep_init>
	aes_indep_key(tmp);
 80003a4:	4668      	mov	r0, sp
 80003a6:	f001 f81c 	bl	80013e2 <aes_indep_key>
    // putch('l');
    // putch('l');
    // putch('o');
    // putch('\n');

	simpleserial_init();
 80003aa:	f000 f865 	bl	8000478 <simpleserial_init>
    #if SS_VER == SS_VER_2_1
    simpleserial_addcmd(0x01, 16, aes);
 80003ae:	2110      	movs	r1, #16
 80003b0:	2001      	movs	r0, #1
 80003b2:	4a04      	ldr	r2, [pc, #16]	; (80003c4 <main+0x3c>)
 80003b4:	f000 f842 	bl	800043c <simpleserial_addcmd>
    simpleserial_addcmd_flags('m', 18, get_mask, CMD_FLAG_LEN);
    simpleserial_addcmd('s', 2, enc_multi_setnum);
    simpleserial_addcmd('f', 16, enc_multi_getpt);
    #endif
    while(1)
        simpleserial_get();
 80003b8:	f000 f8be 	bl	8000538 <simpleserial_get>
    while(1)
 80003bc:	e7fc      	b.n	80003b8 <main+0x30>
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	080014bb 	.word	0x080014bb
 80003c4:	08000327 	.word	0x08000327

080003c8 <ss_crc>:
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 80003c8:	0003      	movs	r3, r0
{
 80003ca:	b570      	push	{r4, r5, r6, lr}
 80003cc:	1841      	adds	r1, r0, r1
		crc ^= *buf++;
		for (k = 0; k < 8; k++) {
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 80003ce:	254d      	movs	r5, #77	; 0x4d
	uint8_t crc = 0x00;
 80003d0:	2000      	movs	r0, #0
	while (len--) {
 80003d2:	4299      	cmp	r1, r3
 80003d4:	d100      	bne.n	80003d8 <ss_crc+0x10>
		}
	}
	return crc;

}
 80003d6:	bd70      	pop	{r4, r5, r6, pc}
		crc ^= *buf++;
 80003d8:	2408      	movs	r4, #8
 80003da:	781a      	ldrb	r2, [r3, #0]
 80003dc:	4050      	eors	r0, r2
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 80003de:	b246      	sxtb	r6, r0
 80003e0:	0042      	lsls	r2, r0, #1
 80003e2:	b2d0      	uxtb	r0, r2
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	da01      	bge.n	80003ec <ss_crc+0x24>
 80003e8:	406a      	eors	r2, r5
 80003ea:	b2d0      	uxtb	r0, r2
		for (k = 0; k < 8; k++) {
 80003ec:	3c01      	subs	r4, #1
 80003ee:	2c00      	cmp	r4, #0
 80003f0:	d1f5      	bne.n	80003de <ss_crc+0x16>
 80003f2:	3301      	adds	r3, #1
 80003f4:	e7ed      	b.n	80003d2 <ss_crc+0xa>

080003f6 <stuff_data>:
}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
	uint8_t i = 1;
	uint8_t last = 0;
 80003f6:	2200      	movs	r2, #0
	uint8_t i = 1;
 80003f8:	2301      	movs	r3, #1
{
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	1c44      	adds	r4, r0, #1
	for (; i < len; i++) {
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 8000402:	2000      	movs	r0, #0
 8000404:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 8000406:	7825      	ldrb	r5, [r4, #0]
 8000408:	2d00      	cmp	r5, #0
 800040a:	d102      	bne.n	8000412 <stuff_data+0x1c>
			buf[last] = i - last;
 800040c:	1a9d      	subs	r5, r3, r2
 800040e:	5485      	strb	r5, [r0, r2]
 8000410:	001a      	movs	r2, r3
	for (; i < len; i++) {
 8000412:	3301      	adds	r3, #1
 8000414:	b2db      	uxtb	r3, r3
 8000416:	3401      	adds	r4, #1
 8000418:	e7f1      	b.n	80003fe <stuff_data+0x8>

0800041a <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 800041a:	b530      	push	{r4, r5, lr}
	uint8_t next = buf[0];
	buf[0] = 0x00;
 800041c:	2400      	movs	r4, #0
	uint8_t next = buf[0];
 800041e:	7802      	ldrb	r2, [r0, #0]
{
 8000420:	0003      	movs	r3, r0
	buf[0] = 0x00;
 8000422:	7004      	strb	r4, [r0, #0]
	uint8_t next = buf[0];
 8000424:	0010      	movs	r0, r2
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 8000426:	4288      	cmp	r0, r1
 8000428:	d201      	bcs.n	800042e <unstuff_data+0x14>
 800042a:	2a00      	cmp	r2, #0
 800042c:	d100      	bne.n	8000430 <unstuff_data+0x16>
		tmp = buf[next];
		buf[next] = FRAME_BYTE;
		next += tmp;
	}
	return next;
}
 800042e:	bd30      	pop	{r4, r5, pc}
		tmp = buf[next];
 8000430:	5c1a      	ldrb	r2, [r3, r0]
 8000432:	181d      	adds	r5, r3, r0
		next += tmp;
 8000434:	1880      	adds	r0, r0, r2
		buf[next] = FRAME_BYTE;
 8000436:	702c      	strb	r4, [r5, #0]
		next += tmp;
 8000438:	b2c0      	uxtb	r0, r0
 800043a:	e7f4      	b.n	8000426 <unstuff_data+0xc>

0800043c <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
    simpleserial_addcmd('w', 0, ss_get_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 800043c:	b570      	push	{r4, r5, r6, lr}
	if(num_commands >= MAX_SS_CMDS) {
 800043e:	4e0c      	ldr	r6, [pc, #48]	; (8000470 <simpleserial_addcmd+0x34>)
{
 8000440:	0005      	movs	r5, r0
	if(num_commands >= MAX_SS_CMDS) {
 8000442:	6833      	ldr	r3, [r6, #0]
		putch('a');
 8000444:	2061      	movs	r0, #97	; 0x61
	if(num_commands >= MAX_SS_CMDS) {
 8000446:	2b0f      	cmp	r3, #15
 8000448:	dc02      	bgt.n	8000450 <simpleserial_addcmd+0x14>
		return 1;
	}

	if(len >= MAX_SS_LEN) {
 800044a:	29ff      	cmp	r1, #255	; 0xff
 800044c:	d904      	bls.n	8000458 <simpleserial_addcmd+0x1c>
		putch('b');
 800044e:	2062      	movs	r0, #98	; 0x62
 8000450:	f000 f9b6 	bl	80007c0 <putch>
		return 1;
 8000454:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 8000456:	bd70      	pop	{r4, r5, r6, pc}
	commands[num_commands].c   = c;
 8000458:	240c      	movs	r4, #12
 800045a:	435c      	muls	r4, r3
 800045c:	4805      	ldr	r0, [pc, #20]	; (8000474 <simpleserial_addcmd+0x38>)
	num_commands++;
 800045e:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 8000460:	5425      	strb	r5, [r4, r0]
	commands[num_commands].len = len;
 8000462:	1900      	adds	r0, r0, r4
 8000464:	6041      	str	r1, [r0, #4]
	commands[num_commands].fp  = fp;
 8000466:	6082      	str	r2, [r0, #8]
	num_commands++;
 8000468:	6033      	str	r3, [r6, #0]
	return 0;
 800046a:	2000      	movs	r0, #0
 800046c:	e7f3      	b.n	8000456 <simpleserial_addcmd+0x1a>
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	2000022c 	.word	0x2000022c
 8000474:	20000230 	.word	0x20000230

08000478 <simpleserial_init>:
{
 8000478:	b510      	push	{r4, lr}
	simpleserial_addcmd('v', 0, check_version);
 800047a:	2100      	movs	r1, #0
 800047c:	4a04      	ldr	r2, [pc, #16]	; (8000490 <simpleserial_init+0x18>)
 800047e:	2076      	movs	r0, #118	; 0x76
 8000480:	f7ff ffdc 	bl	800043c <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 8000484:	2100      	movs	r1, #0
 8000486:	2077      	movs	r0, #119	; 0x77
 8000488:	4a02      	ldr	r2, [pc, #8]	; (8000494 <simpleserial_init+0x1c>)
 800048a:	f7ff ffd7 	bl	800043c <simpleserial_addcmd>
}
 800048e:	bd10      	pop	{r4, pc}
 8000490:	080004e7 	.word	0x080004e7
 8000494:	080004fd 	.word	0x080004fd

08000498 <simpleserial_put>:
	simpleserial_put('e', 0x01, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8000498:	b570      	push	{r4, r5, r6, lr}
 800049a:	b0c0      	sub	sp, #256	; 0x100
 800049c:	000c      	movs	r4, r1
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 800049e:	466b      	mov	r3, sp
 80004a0:	2500      	movs	r5, #0
{
 80004a2:	0011      	movs	r1, r2
	data_buf[1] = c;
 80004a4:	7058      	strb	r0, [r3, #1]
	data_buf[2] = size;
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 80004a6:	0022      	movs	r2, r4
	data_buf[2] = size;
 80004a8:	709c      	strb	r4, [r3, #2]
	data_buf[0] = 0x00;
 80004aa:	701d      	strb	r5, [r3, #0]
		data_buf[i + 3] = output[i];
 80004ac:	1cd8      	adds	r0, r3, #3
 80004ae:	f000 ffed 	bl	800148c <memcpy>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 80004b2:	466b      	mov	r3, sp
 80004b4:	1ca1      	adds	r1, r4, #2
 80004b6:	b2c9      	uxtb	r1, r1
 80004b8:	1c58      	adds	r0, r3, #1
 80004ba:	f7ff ff85 	bl	80003c8 <ss_crc>
 80004be:	0023      	movs	r3, r4
 80004c0:	446b      	add	r3, sp
 80004c2:	70d8      	strb	r0, [r3, #3]
	data_buf[i + 4] = 0x00;
 80004c4:	466b      	mov	r3, sp
 80004c6:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 80004c8:	3405      	adds	r4, #5
 80004ca:	4668      	mov	r0, sp
	data_buf[i + 4] = 0x00;
 80004cc:	559d      	strb	r5, [r3, r6]
	stuff_data(data_buf, i + 5);
 80004ce:	b2e1      	uxtb	r1, r4
 80004d0:	f7ff ff91 	bl	80003f6 <stuff_data>
	for (int i = 0; i < size + 5; i++) {
		putch(data_buf[i]);
 80004d4:	466b      	mov	r3, sp
 80004d6:	5d58      	ldrb	r0, [r3, r5]
	for (int i = 0; i < size + 5; i++) {
 80004d8:	3501      	adds	r5, #1
		putch(data_buf[i]);
 80004da:	f000 f971 	bl	80007c0 <putch>
	for (int i = 0; i < size + 5; i++) {
 80004de:	42ae      	cmp	r6, r5
 80004e0:	daf8      	bge.n	80004d4 <simpleserial_put+0x3c>
	}
}
 80004e2:	b040      	add	sp, #256	; 0x100
 80004e4:	bd70      	pop	{r4, r5, r6, pc}

080004e6 <check_version>:
{
 80004e6:	b507      	push	{r0, r1, r2, lr}
	uint8_t ver = SS_VER;
 80004e8:	466b      	mov	r3, sp
 80004ea:	1dda      	adds	r2, r3, #7
 80004ec:	2303      	movs	r3, #3
	simpleserial_put('r', 1, &ver);
 80004ee:	2072      	movs	r0, #114	; 0x72
 80004f0:	2101      	movs	r1, #1
	uint8_t ver = SS_VER;
 80004f2:	7013      	strb	r3, [r2, #0]
	simpleserial_put('r', 1, &ver);
 80004f4:	f7ff ffd0 	bl	8000498 <simpleserial_put>
}
 80004f8:	2000      	movs	r0, #0
 80004fa:	bd0e      	pop	{r1, r2, r3, pc}

080004fc <ss_get_commands>:
{
 80004fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <ss_get_commands+0x34>)
        cmd_chars[i] = commands[i].c;
 8000500:	240c      	movs	r4, #12
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000502:	6819      	ldr	r1, [r3, #0]
 8000504:	2300      	movs	r3, #0
        cmd_chars[i] = commands[i].c;
 8000506:	480b      	ldr	r0, [pc, #44]	; (8000534 <ss_get_commands+0x38>)
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000508:	b2ca      	uxtb	r2, r1
 800050a:	4293      	cmp	r3, r2
 800050c:	db07      	blt.n	800051e <ss_get_commands+0x22>
    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 800050e:	466a      	mov	r2, sp
 8000510:	2072      	movs	r0, #114	; 0x72
 8000512:	b2c9      	uxtb	r1, r1
 8000514:	f7ff ffc0 	bl	8000498 <simpleserial_put>
}
 8000518:	2000      	movs	r0, #0
 800051a:	b004      	add	sp, #16
 800051c:	bd70      	pop	{r4, r5, r6, pc}
        cmd_chars[i] = commands[i].c;
 800051e:	0025      	movs	r5, r4
 8000520:	466e      	mov	r6, sp
 8000522:	435d      	muls	r5, r3
 8000524:	5c2d      	ldrb	r5, [r5, r0]
 8000526:	54f5      	strb	r5, [r6, r3]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000528:	3301      	adds	r3, #1
 800052a:	b2db      	uxtb	r3, r3
 800052c:	e7ed      	b.n	800050a <ss_get_commands+0xe>
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	2000022c 	.word	0x2000022c
 8000534:	20000230 	.word	0x20000230

08000538 <simpleserial_get>:
{
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t err = 0;
 800053a:	2500      	movs	r5, #0
{
 800053c:	b0c5      	sub	sp, #276	; 0x114
	uint8_t err = 0;
 800053e:	ab02      	add	r3, sp, #8
 8000540:	1ddf      	adds	r7, r3, #7
 8000542:	703d      	strb	r5, [r7, #0]
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 8000544:	f000 f924 	bl	8000790 <getch>
 8000548:	ac04      	add	r4, sp, #16
 800054a:	5528      	strb	r0, [r5, r4]
		if (data_buf[i] == FRAME_BYTE) {
 800054c:	2800      	cmp	r0, #0
 800054e:	d108      	bne.n	8000562 <simpleserial_get+0x2a>
			err = SS_ERR_FRAME_BYTE;
 8000550:	2305      	movs	r3, #5
		err = SS_ERR_CRC;
 8000552:	703b      	strb	r3, [r7, #0]
	simpleserial_put('e', 0x01, &err);
 8000554:	003a      	movs	r2, r7
 8000556:	2101      	movs	r1, #1
 8000558:	2065      	movs	r0, #101	; 0x65
 800055a:	f7ff ff9d 	bl	8000498 <simpleserial_put>
}
 800055e:	b045      	add	sp, #276	; 0x114
 8000560:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (int i = 0; i < 4; i++) {
 8000562:	3501      	adds	r5, #1
 8000564:	2d04      	cmp	r5, #4
 8000566:	d1ed      	bne.n	8000544 <simpleserial_get+0xc>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8000568:	0029      	movs	r1, r5
 800056a:	0020      	movs	r0, r4
 800056c:	f7ff ff55 	bl	800041a <unstuff_data>
	for(c = 0; c < num_commands; c++)
 8000570:	2100      	movs	r1, #0
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8000572:	9001      	str	r0, [sp, #4]
		if(commands[c].c == data_buf[1])
 8000574:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 8000576:	4b26      	ldr	r3, [pc, #152]	; (8000610 <simpleserial_get+0xd8>)
		if(commands[c].c == data_buf[1])
 8000578:	7862      	ldrb	r2, [r4, #1]
	for(c = 0; c < num_commands; c++)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	9100      	str	r1, [sp, #0]
		if(commands[c].c == data_buf[1])
 800057e:	4925      	ldr	r1, [pc, #148]	; (8000614 <simpleserial_get+0xdc>)
	for(c = 0; c < num_commands; c++)
 8000580:	9e00      	ldr	r6, [sp, #0]
 8000582:	429e      	cmp	r6, r3
 8000584:	db02      	blt.n	800058c <simpleserial_get+0x54>
	if (c == num_commands) {
 8000586:	d10b      	bne.n	80005a0 <simpleserial_get+0x68>
		err = SS_ERR_CMD;
 8000588:	2301      	movs	r3, #1
 800058a:	e7e2      	b.n	8000552 <simpleserial_get+0x1a>
		if(commands[c].c == data_buf[1])
 800058c:	9e00      	ldr	r6, [sp, #0]
 800058e:	4346      	muls	r6, r0
 8000590:	5c76      	ldrb	r6, [r6, r1]
 8000592:	4296      	cmp	r6, r2
 8000594:	d004      	beq.n	80005a0 <simpleserial_get+0x68>
	for(c = 0; c < num_commands; c++)
 8000596:	9e00      	ldr	r6, [sp, #0]
 8000598:	3601      	adds	r6, #1
 800059a:	b2f6      	uxtb	r6, r6
 800059c:	9600      	str	r6, [sp, #0]
 800059e:	e7ef      	b.n	8000580 <simpleserial_get+0x48>
	if ((data_buf[3] + 5) < next_frame) {
 80005a0:	78e3      	ldrb	r3, [r4, #3]
 80005a2:	9a01      	ldr	r2, [sp, #4]
 80005a4:	3305      	adds	r3, #5
 80005a6:	4293      	cmp	r3, r2
 80005a8:	da02      	bge.n	80005b0 <simpleserial_get+0x78>
		err = SS_ERR_LEN;
 80005aa:	2304      	movs	r3, #4
 80005ac:	e7d1      	b.n	8000552 <simpleserial_get+0x1a>
 80005ae:	0035      	movs	r5, r6
		data_buf[i] = getch();
 80005b0:	f000 f8ee 	bl	8000790 <getch>
 80005b4:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 80005b6:	2800      	cmp	r0, #0
 80005b8:	d0ca      	beq.n	8000550 <simpleserial_get+0x18>
	for (; i < data_buf[3] + 5; i++) {
 80005ba:	78e3      	ldrb	r3, [r4, #3]
 80005bc:	1c6e      	adds	r6, r5, #1
 80005be:	3304      	adds	r3, #4
 80005c0:	42b3      	cmp	r3, r6
 80005c2:	daf4      	bge.n	80005ae <simpleserial_get+0x76>
	data_buf[i] = getch();
 80005c4:	f000 f8e4 	bl	8000790 <getch>
 80005c8:	55a0      	strb	r0, [r4, r6]
	if (data_buf[i] != FRAME_BYTE) {
 80005ca:	2800      	cmp	r0, #0
 80005cc:	d1ed      	bne.n	80005aa <simpleserial_get+0x72>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 80005ce:	9b01      	ldr	r3, [sp, #4]
 80005d0:	b2f6      	uxtb	r6, r6
 80005d2:	1af1      	subs	r1, r6, r3
 80005d4:	3101      	adds	r1, #1
 80005d6:	b2c9      	uxtb	r1, r1
 80005d8:	18e0      	adds	r0, r4, r3
 80005da:	f7ff ff1e 	bl	800041a <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 80005de:	2009      	movs	r0, #9
 80005e0:	ab02      	add	r3, sp, #8
 80005e2:	3e02      	subs	r6, #2
 80005e4:	18c0      	adds	r0, r0, r3
 80005e6:	b2f1      	uxtb	r1, r6
 80005e8:	f7ff feee 	bl	80003c8 <ss_crc>
	if (crc != data_buf[i-1]) {
 80005ec:	5d63      	ldrb	r3, [r4, r5]
 80005ee:	4283      	cmp	r3, r0
 80005f0:	d001      	beq.n	80005f6 <simpleserial_get+0xbe>
		err = SS_ERR_CRC;
 80005f2:	2302      	movs	r3, #2
 80005f4:	e7ad      	b.n	8000552 <simpleserial_get+0x1a>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 80005f6:	78e2      	ldrb	r2, [r4, #3]
 80005f8:	78a1      	ldrb	r1, [r4, #2]
 80005fa:	7860      	ldrb	r0, [r4, #1]
 80005fc:	240c      	movs	r4, #12
 80005fe:	9b00      	ldr	r3, [sp, #0]
 8000600:	435c      	muls	r4, r3
 8000602:	4b04      	ldr	r3, [pc, #16]	; (8000614 <simpleserial_get+0xdc>)
 8000604:	191b      	adds	r3, r3, r4
 8000606:	689c      	ldr	r4, [r3, #8]
 8000608:	ab05      	add	r3, sp, #20
 800060a:	47a0      	blx	r4
 800060c:	7038      	strb	r0, [r7, #0]
 800060e:	e7a1      	b.n	8000554 <simpleserial_get+0x1c>
 8000610:	2000022c 	.word	0x2000022c
 8000614:	20000230 	.word	0x20000230

08000618 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8000618:	b5f0      	push	{r4, r5, r6, r7, lr}
    GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_2;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800061a:	2790      	movs	r7, #144	; 0x90
	GpioInit.Pull      = GPIO_NOPULL;
 800061c:	2400      	movs	r4, #0
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800061e:	2501      	movs	r5, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000620:	2603      	movs	r6, #3
	GpioInit.Pin       = GPIO_PIN_2;
 8000622:	2304      	movs	r3, #4
{
 8000624:	b097      	sub	sp, #92	; 0x5c
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000626:	05ff      	lsls	r7, r7, #23
 8000628:	0038      	movs	r0, r7
 800062a:	a905      	add	r1, sp, #20
	GpioInit.Pin       = GPIO_PIN_2;
 800062c:	9305      	str	r3, [sp, #20]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800062e:	9506      	str	r5, [sp, #24]
	GpioInit.Pull      = GPIO_NOPULL;
 8000630:	9407      	str	r4, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000632:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000634:	f000 fb46 	bl	8000cc4 <HAL_GPIO_Init>
    
	GpioInit.Pin       = GPIO_PIN_4;
 8000638:	2310      	movs	r3, #16
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800063a:	a905      	add	r1, sp, #20
 800063c:	0038      	movs	r0, r7
	GpioInit.Pin       = GPIO_PIN_4;
 800063e:	9305      	str	r3, [sp, #20]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000640:	9506      	str	r5, [sp, #24]
	GpioInit.Pull      = GPIO_NOPULL;
 8000642:	9407      	str	r4, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000644:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000646:	f000 fb3d 	bl	8000cc4 <HAL_GPIO_Init>
  uint32_t flash_latency = 0;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 800064a:	2305      	movs	r3, #5
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800064c:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 800064e:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8000650:	960a      	str	r6, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000652:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8000654:	9413      	str	r4, [sp, #76]	; 0x4c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000656:	f000 f8c9 	bl	80007ec <HAL_RCC_OscConfig>

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800065a:	2307      	movs	r3, #7
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 800065c:	0021      	movs	r1, r4
 800065e:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8000660:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000662:	9502      	str	r5, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000664:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000666:	9404      	str	r4, [sp, #16]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000668:	f000 faa2 	bl	8000bb0 <HAL_RCC_ClockConfig>
#endif
}
 800066c:	b017      	add	sp, #92	; 0x5c
 800066e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000670 <init_uart>:

void init_uart(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000670:	2180      	movs	r1, #128	; 0x80
{
 8000672:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4c1b      	ldr	r4, [pc, #108]	; (80006e4 <init_uart+0x74>)
 8000676:	0289      	lsls	r1, r1, #10
 8000678:	6962      	ldr	r2, [r4, #20]
{
 800067a:	b088      	sub	sp, #32
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	430a      	orrs	r2, r1
 800067e:	6162      	str	r2, [r4, #20]
 8000680:	6963      	ldr	r3, [r4, #20]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
	GpioInit.Mode      = GPIO_MODE_AF_PP;
	GpioInit.Pull      = GPIO_PULLUP;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	GpioInit.Alternate = GPIO_AF1_USART1;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000682:	2090      	movs	r0, #144	; 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000684:	400b      	ands	r3, r1
 8000686:	9301      	str	r3, [sp, #4]
 8000688:	9b01      	ldr	r3, [sp, #4]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 800068a:	23c0      	movs	r3, #192	; 0xc0
 800068c:	00db      	lsls	r3, r3, #3
	GpioInit.Pull      = GPIO_PULLUP;
 800068e:	2501      	movs	r5, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000690:	2603      	movs	r6, #3
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8000692:	9303      	str	r3, [sp, #12]
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000694:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000696:	a903      	add	r1, sp, #12
 8000698:	05c0      	lsls	r0, r0, #23
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 800069a:	9304      	str	r3, [sp, #16]
	GpioInit.Pull      = GPIO_PULLUP;
 800069c:	9505      	str	r5, [sp, #20]
	GpioInit.Alternate = GPIO_AF1_USART1;
 800069e:	9507      	str	r5, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80006a0:	9606      	str	r6, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80006a2:	f000 fb0f 	bl	8000cc4 <HAL_GPIO_Init>

	__HAL_RCC_USART1_CLK_ENABLE();
 80006a6:	2180      	movs	r1, #128	; 0x80
 80006a8:	69a2      	ldr	r2, [r4, #24]
 80006aa:	01c9      	lsls	r1, r1, #7
 80006ac:	430a      	orrs	r2, r1
 80006ae:	61a2      	str	r2, [r4, #24]
 80006b0:	69a3      	ldr	r3, [r4, #24]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
	UartHandle.Instance        = USART1;
 80006b2:	480d      	ldr	r0, [pc, #52]	; (80006e8 <init_uart+0x78>)
	__HAL_RCC_USART1_CLK_ENABLE();
 80006b4:	400b      	ands	r3, r1
 80006b6:	9302      	str	r3, [sp, #8]
 80006b8:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 80006ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80006bc:	43b3      	bics	r3, r6
 80006be:	431d      	orrs	r5, r3
	UartHandle.Instance        = USART1;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <init_uart+0x7c>)
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 80006c2:	6325      	str	r5, [r4, #48]	; 0x30
	UartHandle.Instance        = USART1;
 80006c4:	6003      	str	r3, [r0, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 80006c6:	23e1      	movs	r3, #225	; 0xe1
 80006c8:	029b      	lsls	r3, r3, #10
 80006ca:	6043      	str	r3, [r0, #4]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80006cc:	2300      	movs	r3, #0
 80006ce:	6083      	str	r3, [r0, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80006d0:	60c3      	str	r3, [r0, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 80006d2:	6103      	str	r3, [r0, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80006d4:	6183      	str	r3, [r0, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80006d6:	330c      	adds	r3, #12
 80006d8:	6143      	str	r3, [r0, #20]
	HAL_UART_Init(&UartHandle);
 80006da:	f000 fc5d 	bl	8000f98 <HAL_UART_Init>
}
 80006de:	b008      	add	sp, #32
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	40021000 	.word	0x40021000
 80006e8:	200002f0 	.word	0x200002f0
 80006ec:	40013800 	.word	0x40013800

080006f0 <trigger_setup>:

void trigger_setup(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006f0:	2080      	movs	r0, #128	; 0x80
 80006f2:	4a1e      	ldr	r2, [pc, #120]	; (800076c <trigger_setup+0x7c>)
{
 80006f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	6951      	ldr	r1, [r2, #20]
 80006f8:	0280      	lsls	r0, r0, #10
 80006fa:	4301      	orrs	r1, r0
 80006fc:	6151      	str	r1, [r2, #20]
 80006fe:	6953      	ldr	r3, [r2, #20]
{
 8000700:	b087      	sub	sp, #28
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	4003      	ands	r3, r0
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_7;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000704:	2490      	movs	r4, #144	; 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	9300      	str	r3, [sp, #0]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000708:	2501      	movs	r5, #1
	GpioInit.Pull      = GPIO_NOPULL;
 800070a:	2600      	movs	r6, #0
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800070c:	2703      	movs	r7, #3
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	9b00      	ldr	r3, [sp, #0]
	GpioInit.Pin       = GPIO_PIN_7;
 8000710:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000712:	05e4      	lsls	r4, r4, #23
 8000714:	0020      	movs	r0, r4
 8000716:	a901      	add	r1, sp, #4
	GpioInit.Pin       = GPIO_PIN_7;
 8000718:	9301      	str	r3, [sp, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800071a:	9502      	str	r5, [sp, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 800071c:	9603      	str	r6, [sp, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800071e:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000720:	f000 fad0 	bl	8000cc4 <HAL_GPIO_Init>

	GpioInit.Pin       = GPIO_PIN_4;
 8000724:	2310      	movs	r3, #16
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000726:	0020      	movs	r0, r4
 8000728:	a901      	add	r1, sp, #4
	GpioInit.Pin       = GPIO_PIN_4;
 800072a:	9301      	str	r3, [sp, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800072c:	9502      	str	r5, [sp, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 800072e:	9603      	str	r6, [sp, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000730:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000732:	f000 fac7 	bl	8000cc4 <HAL_GPIO_Init>

	GpioInit.Pin       = GPIO_PIN_2;
 8000736:	2304      	movs	r3, #4
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000738:	0020      	movs	r0, r4
 800073a:	a901      	add	r1, sp, #4
	GpioInit.Pin       = GPIO_PIN_2;
 800073c:	9301      	str	r3, [sp, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800073e:	9502      	str	r5, [sp, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 8000740:	9603      	str	r6, [sp, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000742:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000744:	f000 fabe 	bl	8000cc4 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000748:	0032      	movs	r2, r6
 800074a:	0020      	movs	r0, r4
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	f000 fb6b 	bl	8000e28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 8000752:	002a      	movs	r2, r5
 8000754:	0020      	movs	r0, r4
 8000756:	2110      	movs	r1, #16
 8000758:	f000 fb66 	bl	8000e28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 800075c:	002a      	movs	r2, r5
 800075e:	2104      	movs	r1, #4
 8000760:	0020      	movs	r0, r4
 8000762:	f000 fb61 	bl	8000e28 <HAL_GPIO_WritePin>
}
 8000766:	b007      	add	sp, #28
 8000768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	40021000 	.word	0x40021000

08000770 <trigger_high>:

void trigger_high(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000770:	2090      	movs	r0, #144	; 0x90
{
 8000772:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	05c0      	lsls	r0, r0, #23
 800077a:	f000 fb55 	bl	8000e28 <HAL_GPIO_WritePin>
}
 800077e:	bd10      	pop	{r4, pc}

08000780 <trigger_low>:

void trigger_low(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000780:	2090      	movs	r0, #144	; 0x90
{
 8000782:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	05c0      	lsls	r0, r0, #23
 800078a:	f000 fb4d 	bl	8000e28 <HAL_GPIO_WritePin>
}   
 800078e:	bd10      	pop	{r4, pc}

08000790 <getch>:

char getch(void)
{
 8000790:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t d;
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
		USART1->ICR |= (1 << 3); // make sure overrun error is cleared, otherwise can stall here
 8000792:	2508      	movs	r5, #8
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
 8000794:	466b      	mov	r3, sp
 8000796:	1ddc      	adds	r4, r3, #7
 8000798:	2201      	movs	r2, #1
 800079a:	2332      	movs	r3, #50	; 0x32
 800079c:	0021      	movs	r1, r4
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <getch+0x28>)
 80007a0:	f000 fc2c 	bl	8000ffc <HAL_UART_Receive>
 80007a4:	2800      	cmp	r0, #0
 80007a6:	d101      	bne.n	80007ac <getch+0x1c>
	return d;
 80007a8:	7820      	ldrb	r0, [r4, #0]
}
 80007aa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		USART1->ICR |= (1 << 3); // make sure overrun error is cleared, otherwise can stall here
 80007ac:	4a03      	ldr	r2, [pc, #12]	; (80007bc <getch+0x2c>)
 80007ae:	6a13      	ldr	r3, [r2, #32]
 80007b0:	432b      	orrs	r3, r5
 80007b2:	6213      	str	r3, [r2, #32]
 80007b4:	e7ee      	b.n	8000794 <getch+0x4>
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	200002f0 	.word	0x200002f0
 80007bc:	40013800 	.word	0x40013800

080007c0 <putch>:

void putch(char c)
{
 80007c0:	b507      	push	{r0, r1, r2, lr}
	uint8_t d  = c;
 80007c2:	466b      	mov	r3, sp
 80007c4:	1dd9      	adds	r1, r3, #7
 80007c6:	7008      	strb	r0, [r1, #0]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80007c8:	2201      	movs	r2, #1
 80007ca:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <putch+0x14>)
 80007cc:	4802      	ldr	r0, [pc, #8]	; (80007d8 <putch+0x18>)
 80007ce:	f000 fc8d 	bl	80010ec <HAL_UART_Transmit>
}
 80007d2:	bd07      	pop	{r0, r1, r2, pc}
 80007d4:	00001388 	.word	0x00001388
 80007d8:	200002f0 	.word	0x200002f0

080007dc <HAL_GetTick>:
#define assert_param(expr) ((void)0U)

uint32_t HAL_GetTick(void)
{
	static uint32_t tick;
	return tick++;;
 80007dc:	4b02      	ldr	r3, [pc, #8]	; (80007e8 <HAL_GetTick+0xc>)
 80007de:	6818      	ldr	r0, [r3, #0]
 80007e0:	1c42      	adds	r2, r0, #1
 80007e2:	601a      	str	r2, [r3, #0]
}
 80007e4:	4770      	bx	lr
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000360 	.word	0x20000360

080007ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007ee:	6803      	ldr	r3, [r0, #0]
{
 80007f0:	0004      	movs	r4, r0
 80007f2:	b085      	sub	sp, #20
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007f4:	07db      	lsls	r3, r3, #31
 80007f6:	d42f      	bmi.n	8000858 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007f8:	6823      	ldr	r3, [r4, #0]
 80007fa:	079b      	lsls	r3, r3, #30
 80007fc:	d500      	bpl.n	8000800 <HAL_RCC_OscConfig+0x14>
 80007fe:	e081      	b.n	8000904 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000800:	6823      	ldr	r3, [r4, #0]
 8000802:	071b      	lsls	r3, r3, #28
 8000804:	d500      	bpl.n	8000808 <HAL_RCC_OscConfig+0x1c>
 8000806:	e0bc      	b.n	8000982 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	075b      	lsls	r3, r3, #29
 800080c:	d500      	bpl.n	8000810 <HAL_RCC_OscConfig+0x24>
 800080e:	e0df      	b.n	80009d0 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000810:	6823      	ldr	r3, [r4, #0]
 8000812:	06db      	lsls	r3, r3, #27
 8000814:	d51a      	bpl.n	800084c <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000816:	6962      	ldr	r2, [r4, #20]
 8000818:	2304      	movs	r3, #4
 800081a:	4db5      	ldr	r5, [pc, #724]	; (8000af0 <HAL_RCC_OscConfig+0x304>)
 800081c:	2a01      	cmp	r2, #1
 800081e:	d000      	beq.n	8000822 <HAL_RCC_OscConfig+0x36>
 8000820:	e14a      	b.n	8000ab8 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000822:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000824:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000826:	430b      	orrs	r3, r1
 8000828:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800082a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800082c:	431a      	orrs	r2, r3
 800082e:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000830:	f7ff ffd4 	bl	80007dc <HAL_GetTick>
 8000834:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000836:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000838:	423b      	tst	r3, r7
 800083a:	d100      	bne.n	800083e <HAL_RCC_OscConfig+0x52>
 800083c:	e135      	b.n	8000aaa <HAL_RCC_OscConfig+0x2be>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800083e:	21f8      	movs	r1, #248	; 0xf8
 8000840:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000842:	69a3      	ldr	r3, [r4, #24]
 8000844:	438a      	bics	r2, r1
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	4313      	orrs	r3, r2
 800084a:	636b      	str	r3, [r5, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800084c:	6a21      	ldr	r1, [r4, #32]
 800084e:	2900      	cmp	r1, #0
 8000850:	d000      	beq.n	8000854 <HAL_RCC_OscConfig+0x68>
 8000852:	e159      	b.n	8000b08 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000854:	2000      	movs	r0, #0
 8000856:	e013      	b.n	8000880 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000858:	210c      	movs	r1, #12
 800085a:	4da5      	ldr	r5, [pc, #660]	; (8000af0 <HAL_RCC_OscConfig+0x304>)
 800085c:	686a      	ldr	r2, [r5, #4]
 800085e:	400a      	ands	r2, r1
 8000860:	2a04      	cmp	r2, #4
 8000862:	d006      	beq.n	8000872 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000864:	686b      	ldr	r3, [r5, #4]
 8000866:	400b      	ands	r3, r1
 8000868:	2b08      	cmp	r3, #8
 800086a:	d10b      	bne.n	8000884 <HAL_RCC_OscConfig+0x98>
 800086c:	686b      	ldr	r3, [r5, #4]
 800086e:	03db      	lsls	r3, r3, #15
 8000870:	d508      	bpl.n	8000884 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000872:	682b      	ldr	r3, [r5, #0]
 8000874:	039b      	lsls	r3, r3, #14
 8000876:	d5bf      	bpl.n	80007f8 <HAL_RCC_OscConfig+0xc>
 8000878:	6863      	ldr	r3, [r4, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d1bc      	bne.n	80007f8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800087e:	2001      	movs	r0, #1
}
 8000880:	b005      	add	sp, #20
 8000882:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000884:	6863      	ldr	r3, [r4, #4]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d113      	bne.n	80008b2 <HAL_RCC_OscConfig+0xc6>
 800088a:	2380      	movs	r3, #128	; 0x80
 800088c:	682a      	ldr	r2, [r5, #0]
 800088e:	025b      	lsls	r3, r3, #9
 8000890:	4313      	orrs	r3, r2
 8000892:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000894:	f7ff ffa2 	bl	80007dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000898:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800089a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800089c:	02bf      	lsls	r7, r7, #10
 800089e:	682b      	ldr	r3, [r5, #0]
 80008a0:	423b      	tst	r3, r7
 80008a2:	d1a9      	bne.n	80007f8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008a4:	f7ff ff9a 	bl	80007dc <HAL_GetTick>
 80008a8:	1b80      	subs	r0, r0, r6
 80008aa:	2864      	cmp	r0, #100	; 0x64
 80008ac:	d9f7      	bls.n	800089e <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 80008ae:	2003      	movs	r0, #3
 80008b0:	e7e6      	b.n	8000880 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d116      	bne.n	80008e4 <HAL_RCC_OscConfig+0xf8>
 80008b6:	682b      	ldr	r3, [r5, #0]
 80008b8:	4a8e      	ldr	r2, [pc, #568]	; (8000af4 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008ba:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008bc:	4013      	ands	r3, r2
 80008be:	602b      	str	r3, [r5, #0]
 80008c0:	682b      	ldr	r3, [r5, #0]
 80008c2:	4a8d      	ldr	r2, [pc, #564]	; (8000af8 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008c4:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008c6:	4013      	ands	r3, r2
 80008c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008ca:	f7ff ff87 	bl	80007dc <HAL_GetTick>
 80008ce:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008d0:	682b      	ldr	r3, [r5, #0]
 80008d2:	423b      	tst	r3, r7
 80008d4:	d100      	bne.n	80008d8 <HAL_RCC_OscConfig+0xec>
 80008d6:	e78f      	b.n	80007f8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008d8:	f7ff ff80 	bl	80007dc <HAL_GetTick>
 80008dc:	1b80      	subs	r0, r0, r6
 80008de:	2864      	cmp	r0, #100	; 0x64
 80008e0:	d9f6      	bls.n	80008d0 <HAL_RCC_OscConfig+0xe4>
 80008e2:	e7e4      	b.n	80008ae <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e4:	2b05      	cmp	r3, #5
 80008e6:	d105      	bne.n	80008f4 <HAL_RCC_OscConfig+0x108>
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	682a      	ldr	r2, [r5, #0]
 80008ec:	02db      	lsls	r3, r3, #11
 80008ee:	4313      	orrs	r3, r2
 80008f0:	602b      	str	r3, [r5, #0]
 80008f2:	e7ca      	b.n	800088a <HAL_RCC_OscConfig+0x9e>
 80008f4:	682b      	ldr	r3, [r5, #0]
 80008f6:	4a7f      	ldr	r2, [pc, #508]	; (8000af4 <HAL_RCC_OscConfig+0x308>)
 80008f8:	4013      	ands	r3, r2
 80008fa:	602b      	str	r3, [r5, #0]
 80008fc:	682b      	ldr	r3, [r5, #0]
 80008fe:	4a7e      	ldr	r2, [pc, #504]	; (8000af8 <HAL_RCC_OscConfig+0x30c>)
 8000900:	4013      	ands	r3, r2
 8000902:	e7c6      	b.n	8000892 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000904:	220c      	movs	r2, #12
 8000906:	4d7a      	ldr	r5, [pc, #488]	; (8000af0 <HAL_RCC_OscConfig+0x304>)
 8000908:	686b      	ldr	r3, [r5, #4]
 800090a:	4213      	tst	r3, r2
 800090c:	d006      	beq.n	800091c <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800090e:	686b      	ldr	r3, [r5, #4]
 8000910:	4013      	ands	r3, r2
 8000912:	2b08      	cmp	r3, #8
 8000914:	d110      	bne.n	8000938 <HAL_RCC_OscConfig+0x14c>
 8000916:	686b      	ldr	r3, [r5, #4]
 8000918:	03db      	lsls	r3, r3, #15
 800091a:	d40d      	bmi.n	8000938 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800091c:	682b      	ldr	r3, [r5, #0]
 800091e:	079b      	lsls	r3, r3, #30
 8000920:	d502      	bpl.n	8000928 <HAL_RCC_OscConfig+0x13c>
 8000922:	68e3      	ldr	r3, [r4, #12]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d1aa      	bne.n	800087e <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000928:	21f8      	movs	r1, #248	; 0xf8
 800092a:	682a      	ldr	r2, [r5, #0]
 800092c:	6923      	ldr	r3, [r4, #16]
 800092e:	438a      	bics	r2, r1
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	4313      	orrs	r3, r2
 8000934:	602b      	str	r3, [r5, #0]
 8000936:	e763      	b.n	8000800 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000938:	68e2      	ldr	r2, [r4, #12]
 800093a:	2301      	movs	r3, #1
 800093c:	2a00      	cmp	r2, #0
 800093e:	d00f      	beq.n	8000960 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000940:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000942:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8000944:	4313      	orrs	r3, r2
 8000946:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000948:	f7ff ff48 	bl	80007dc <HAL_GetTick>
 800094c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800094e:	682b      	ldr	r3, [r5, #0]
 8000950:	423b      	tst	r3, r7
 8000952:	d1e9      	bne.n	8000928 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000954:	f7ff ff42 	bl	80007dc <HAL_GetTick>
 8000958:	1b80      	subs	r0, r0, r6
 800095a:	2802      	cmp	r0, #2
 800095c:	d9f7      	bls.n	800094e <HAL_RCC_OscConfig+0x162>
 800095e:	e7a6      	b.n	80008ae <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000960:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000962:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8000964:	439a      	bics	r2, r3
 8000966:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000968:	f7ff ff38 	bl	80007dc <HAL_GetTick>
 800096c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800096e:	682b      	ldr	r3, [r5, #0]
 8000970:	423b      	tst	r3, r7
 8000972:	d100      	bne.n	8000976 <HAL_RCC_OscConfig+0x18a>
 8000974:	e744      	b.n	8000800 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000976:	f7ff ff31 	bl	80007dc <HAL_GetTick>
 800097a:	1b80      	subs	r0, r0, r6
 800097c:	2802      	cmp	r0, #2
 800097e:	d9f6      	bls.n	800096e <HAL_RCC_OscConfig+0x182>
 8000980:	e795      	b.n	80008ae <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000982:	69e2      	ldr	r2, [r4, #28]
 8000984:	2301      	movs	r3, #1
 8000986:	4d5a      	ldr	r5, [pc, #360]	; (8000af0 <HAL_RCC_OscConfig+0x304>)
 8000988:	2a00      	cmp	r2, #0
 800098a:	d010      	beq.n	80009ae <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 800098c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800098e:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8000990:	4313      	orrs	r3, r2
 8000992:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000994:	f7ff ff22 	bl	80007dc <HAL_GetTick>
 8000998:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800099a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800099c:	423b      	tst	r3, r7
 800099e:	d000      	beq.n	80009a2 <HAL_RCC_OscConfig+0x1b6>
 80009a0:	e732      	b.n	8000808 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009a2:	f7ff ff1b 	bl	80007dc <HAL_GetTick>
 80009a6:	1b80      	subs	r0, r0, r6
 80009a8:	2802      	cmp	r0, #2
 80009aa:	d9f6      	bls.n	800099a <HAL_RCC_OscConfig+0x1ae>
 80009ac:	e77f      	b.n	80008ae <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 80009ae:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009b0:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80009b2:	439a      	bics	r2, r3
 80009b4:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80009b6:	f7ff ff11 	bl	80007dc <HAL_GetTick>
 80009ba:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80009be:	423b      	tst	r3, r7
 80009c0:	d100      	bne.n	80009c4 <HAL_RCC_OscConfig+0x1d8>
 80009c2:	e721      	b.n	8000808 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009c4:	f7ff ff0a 	bl	80007dc <HAL_GetTick>
 80009c8:	1b80      	subs	r0, r0, r6
 80009ca:	2802      	cmp	r0, #2
 80009cc:	d9f6      	bls.n	80009bc <HAL_RCC_OscConfig+0x1d0>
 80009ce:	e76e      	b.n	80008ae <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009d0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80009d2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009d4:	4d46      	ldr	r5, [pc, #280]	; (8000af0 <HAL_RCC_OscConfig+0x304>)
 80009d6:	0552      	lsls	r2, r2, #21
 80009d8:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 80009da:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009dc:	4213      	tst	r3, r2
 80009de:	d108      	bne.n	80009f2 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009e0:	69eb      	ldr	r3, [r5, #28]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	61eb      	str	r3, [r5, #28]
 80009e6:	69eb      	ldr	r3, [r5, #28]
 80009e8:	4013      	ands	r3, r2
 80009ea:	9303      	str	r3, [sp, #12]
 80009ec:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80009ee:	2301      	movs	r3, #1
 80009f0:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009f2:	2780      	movs	r7, #128	; 0x80
 80009f4:	4e41      	ldr	r6, [pc, #260]	; (8000afc <HAL_RCC_OscConfig+0x310>)
 80009f6:	007f      	lsls	r7, r7, #1
 80009f8:	6833      	ldr	r3, [r6, #0]
 80009fa:	423b      	tst	r3, r7
 80009fc:	d006      	beq.n	8000a0c <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009fe:	68a3      	ldr	r3, [r4, #8]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d113      	bne.n	8000a2c <HAL_RCC_OscConfig+0x240>
 8000a04:	6a2a      	ldr	r2, [r5, #32]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	622b      	str	r3, [r5, #32]
 8000a0a:	e030      	b.n	8000a6e <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a0c:	6833      	ldr	r3, [r6, #0]
 8000a0e:	433b      	orrs	r3, r7
 8000a10:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000a12:	f7ff fee3 	bl	80007dc <HAL_GetTick>
 8000a16:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a18:	6833      	ldr	r3, [r6, #0]
 8000a1a:	423b      	tst	r3, r7
 8000a1c:	d1ef      	bne.n	80009fe <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a1e:	f7ff fedd 	bl	80007dc <HAL_GetTick>
 8000a22:	9b01      	ldr	r3, [sp, #4]
 8000a24:	1ac0      	subs	r0, r0, r3
 8000a26:	2864      	cmp	r0, #100	; 0x64
 8000a28:	d9f6      	bls.n	8000a18 <HAL_RCC_OscConfig+0x22c>
 8000a2a:	e740      	b.n	80008ae <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d114      	bne.n	8000a5c <HAL_RCC_OscConfig+0x270>
 8000a32:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a34:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a36:	4393      	bics	r3, r2
 8000a38:	622b      	str	r3, [r5, #32]
 8000a3a:	6a2b      	ldr	r3, [r5, #32]
 8000a3c:	3203      	adds	r2, #3
 8000a3e:	4393      	bics	r3, r2
 8000a40:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000a42:	f7ff fecb 	bl	80007dc <HAL_GetTick>
 8000a46:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a48:	6a2b      	ldr	r3, [r5, #32]
 8000a4a:	423b      	tst	r3, r7
 8000a4c:	d016      	beq.n	8000a7c <HAL_RCC_OscConfig+0x290>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a4e:	f7ff fec5 	bl	80007dc <HAL_GetTick>
 8000a52:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <HAL_RCC_OscConfig+0x314>)
 8000a54:	1b80      	subs	r0, r0, r6
 8000a56:	4298      	cmp	r0, r3
 8000a58:	d9f6      	bls.n	8000a48 <HAL_RCC_OscConfig+0x25c>
 8000a5a:	e728      	b.n	80008ae <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a5c:	2b05      	cmp	r3, #5
 8000a5e:	d116      	bne.n	8000a8e <HAL_RCC_OscConfig+0x2a2>
 8000a60:	6a29      	ldr	r1, [r5, #32]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	430b      	orrs	r3, r1
 8000a66:	622b      	str	r3, [r5, #32]
 8000a68:	6a2b      	ldr	r3, [r5, #32]
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8000a6e:	f7ff feb5 	bl	80007dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a72:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000a74:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a76:	6a2b      	ldr	r3, [r5, #32]
 8000a78:	423b      	tst	r3, r7
 8000a7a:	d00f      	beq.n	8000a9c <HAL_RCC_OscConfig+0x2b0>
    if(pwrclkchanged == SET)
 8000a7c:	9b00      	ldr	r3, [sp, #0]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d000      	beq.n	8000a84 <HAL_RCC_OscConfig+0x298>
 8000a82:	e6c5      	b.n	8000810 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a84:	69eb      	ldr	r3, [r5, #28]
 8000a86:	4a1f      	ldr	r2, [pc, #124]	; (8000b04 <HAL_RCC_OscConfig+0x318>)
 8000a88:	4013      	ands	r3, r2
 8000a8a:	61eb      	str	r3, [r5, #28]
 8000a8c:	e6c0      	b.n	8000810 <HAL_RCC_OscConfig+0x24>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a8e:	6a2b      	ldr	r3, [r5, #32]
 8000a90:	4393      	bics	r3, r2
 8000a92:	2204      	movs	r2, #4
 8000a94:	622b      	str	r3, [r5, #32]
 8000a96:	6a2b      	ldr	r3, [r5, #32]
 8000a98:	4393      	bics	r3, r2
 8000a9a:	e7b5      	b.n	8000a08 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a9c:	f7ff fe9e 	bl	80007dc <HAL_GetTick>
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <HAL_RCC_OscConfig+0x314>)
 8000aa2:	1b80      	subs	r0, r0, r6
 8000aa4:	4298      	cmp	r0, r3
 8000aa6:	d9e6      	bls.n	8000a76 <HAL_RCC_OscConfig+0x28a>
 8000aa8:	e701      	b.n	80008ae <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000aaa:	f7ff fe97 	bl	80007dc <HAL_GetTick>
 8000aae:	1b80      	subs	r0, r0, r6
 8000ab0:	2802      	cmp	r0, #2
 8000ab2:	d800      	bhi.n	8000ab6 <HAL_RCC_OscConfig+0x2ca>
 8000ab4:	e6bf      	b.n	8000836 <HAL_RCC_OscConfig+0x4a>
 8000ab6:	e6fa      	b.n	80008ae <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000ab8:	3205      	adds	r2, #5
 8000aba:	d103      	bne.n	8000ac4 <HAL_RCC_OscConfig+0x2d8>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000abc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000abe:	439a      	bics	r2, r3
 8000ac0:	636a      	str	r2, [r5, #52]	; 0x34
 8000ac2:	e6bc      	b.n	800083e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ac4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ac6:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ac8:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000aca:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000acc:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000ace:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000ad0:	4393      	bics	r3, r2
 8000ad2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000ad4:	f7ff fe82 	bl	80007dc <HAL_GetTick>
 8000ad8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ada:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000adc:	423b      	tst	r3, r7
 8000ade:	d100      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x2f6>
 8000ae0:	e6b4      	b.n	800084c <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ae2:	f7ff fe7b 	bl	80007dc <HAL_GetTick>
 8000ae6:	1b80      	subs	r0, r0, r6
 8000ae8:	2802      	cmp	r0, #2
 8000aea:	d9f6      	bls.n	8000ada <HAL_RCC_OscConfig+0x2ee>
 8000aec:	e6df      	b.n	80008ae <HAL_RCC_OscConfig+0xc2>
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	40021000 	.word	0x40021000
 8000af4:	fffeffff 	.word	0xfffeffff
 8000af8:	fffbffff 	.word	0xfffbffff
 8000afc:	40007000 	.word	0x40007000
 8000b00:	00001388 	.word	0x00001388
 8000b04:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b08:	220c      	movs	r2, #12
 8000b0a:	4d26      	ldr	r5, [pc, #152]	; (8000ba4 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000b0c:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b0e:	686b      	ldr	r3, [r5, #4]
 8000b10:	4013      	ands	r3, r2
 8000b12:	2b08      	cmp	r3, #8
 8000b14:	d100      	bne.n	8000b18 <HAL_RCC_OscConfig+0x32c>
 8000b16:	e6b3      	b.n	8000880 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000b18:	682b      	ldr	r3, [r5, #0]
 8000b1a:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <HAL_RCC_OscConfig+0x3bc>)
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b20:	2902      	cmp	r1, #2
 8000b22:	d12f      	bne.n	8000b84 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000b24:	f7ff fe5a 	bl	80007dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b28:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8000b2a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b2c:	04bf      	lsls	r7, r7, #18
 8000b2e:	682b      	ldr	r3, [r5, #0]
 8000b30:	423b      	tst	r3, r7
 8000b32:	d121      	bne.n	8000b78 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b34:	220f      	movs	r2, #15
 8000b36:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b38:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b3a:	4393      	bics	r3, r2
 8000b3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b3e:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b40:	4313      	orrs	r3, r2
 8000b42:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000b44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000b46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b48:	686a      	ldr	r2, [r5, #4]
 8000b4a:	430b      	orrs	r3, r1
 8000b4c:	4917      	ldr	r1, [pc, #92]	; (8000bac <HAL_RCC_OscConfig+0x3c0>)
 8000b4e:	400a      	ands	r2, r1
 8000b50:	4313      	orrs	r3, r2
 8000b52:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	682a      	ldr	r2, [r5, #0]
 8000b58:	045b      	lsls	r3, r3, #17
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b5e:	f7ff fe3d 	bl	80007dc <HAL_GetTick>
 8000b62:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b64:	682b      	ldr	r3, [r5, #0]
 8000b66:	4233      	tst	r3, r6
 8000b68:	d000      	beq.n	8000b6c <HAL_RCC_OscConfig+0x380>
 8000b6a:	e673      	b.n	8000854 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b6c:	f7ff fe36 	bl	80007dc <HAL_GetTick>
 8000b70:	1b00      	subs	r0, r0, r4
 8000b72:	2802      	cmp	r0, #2
 8000b74:	d9f6      	bls.n	8000b64 <HAL_RCC_OscConfig+0x378>
 8000b76:	e69a      	b.n	80008ae <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b78:	f7ff fe30 	bl	80007dc <HAL_GetTick>
 8000b7c:	1b80      	subs	r0, r0, r6
 8000b7e:	2802      	cmp	r0, #2
 8000b80:	d9d5      	bls.n	8000b2e <HAL_RCC_OscConfig+0x342>
 8000b82:	e694      	b.n	80008ae <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000b84:	f7ff fe2a 	bl	80007dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b88:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000b8a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b8c:	04b6      	lsls	r6, r6, #18
 8000b8e:	682b      	ldr	r3, [r5, #0]
 8000b90:	4233      	tst	r3, r6
 8000b92:	d100      	bne.n	8000b96 <HAL_RCC_OscConfig+0x3aa>
 8000b94:	e65e      	b.n	8000854 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b96:	f7ff fe21 	bl	80007dc <HAL_GetTick>
 8000b9a:	1b00      	subs	r0, r0, r4
 8000b9c:	2802      	cmp	r0, #2
 8000b9e:	d9f6      	bls.n	8000b8e <HAL_RCC_OscConfig+0x3a2>
 8000ba0:	e685      	b.n	80008ae <HAL_RCC_OscConfig+0xc2>
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	feffffff 	.word	0xfeffffff
 8000bac:	ffc2ffff 	.word	0xffc2ffff

08000bb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4d3e      	ldr	r5, [pc, #248]	; (8000cb0 <HAL_RCC_ClockConfig+0x100>)
{
 8000bb6:	0004      	movs	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bb8:	682b      	ldr	r3, [r5, #0]
{
 8000bba:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d312      	bcc.n	8000be8 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bc2:	6822      	ldr	r2, [r4, #0]
 8000bc4:	0793      	lsls	r3, r2, #30
 8000bc6:	d419      	bmi.n	8000bfc <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bc8:	07d3      	lsls	r3, r2, #31
 8000bca:	d41f      	bmi.n	8000c0c <HAL_RCC_ClockConfig+0x5c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bcc:	2301      	movs	r3, #1
 8000bce:	682a      	ldr	r2, [r5, #0]
 8000bd0:	401a      	ands	r2, r3
 8000bd2:	42ba      	cmp	r2, r7
 8000bd4:	d85d      	bhi.n	8000c92 <HAL_RCC_ClockConfig+0xe2>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bd6:	6823      	ldr	r3, [r4, #0]
 8000bd8:	075b      	lsls	r3, r3, #29
 8000bda:	d461      	bmi.n	8000ca0 <HAL_RCC_ClockConfig+0xf0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /* Update the SystemCoreClock global variable */
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
  SystemCoreClock = 7372800;
 8000bdc:	22e1      	movs	r2, #225	; 0xe1
 8000bde:	4b35      	ldr	r3, [pc, #212]	; (8000cb4 <HAL_RCC_ClockConfig+0x104>)
 8000be0:	03d2      	lsls	r2, r2, #15
  
  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8000be2:	2000      	movs	r0, #0
  SystemCoreClock = 7372800;
 8000be4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8000be6:	e008      	b.n	8000bfa <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000be8:	682b      	ldr	r3, [r5, #0]
 8000bea:	4393      	bics	r3, r2
 8000bec:	430b      	orrs	r3, r1
 8000bee:	602b      	str	r3, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000bf0:	682b      	ldr	r3, [r5, #0]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	428b      	cmp	r3, r1
 8000bf6:	d0e4      	beq.n	8000bc2 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000bf8:	2001      	movs	r0, #1
}
 8000bfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bfc:	20f0      	movs	r0, #240	; 0xf0
 8000bfe:	492e      	ldr	r1, [pc, #184]	; (8000cb8 <HAL_RCC_ClockConfig+0x108>)
 8000c00:	684b      	ldr	r3, [r1, #4]
 8000c02:	4383      	bics	r3, r0
 8000c04:	68a0      	ldr	r0, [r4, #8]
 8000c06:	4303      	orrs	r3, r0
 8000c08:	604b      	str	r3, [r1, #4]
 8000c0a:	e7dd      	b.n	8000bc8 <HAL_RCC_ClockConfig+0x18>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c0c:	4e2a      	ldr	r6, [pc, #168]	; (8000cb8 <HAL_RCC_ClockConfig+0x108>)
 8000c0e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c10:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c12:	2a01      	cmp	r2, #1
 8000c14:	d11a      	bne.n	8000c4c <HAL_RCC_ClockConfig+0x9c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c16:	039b      	lsls	r3, r3, #14
 8000c18:	d5ee      	bpl.n	8000bf8 <HAL_RCC_ClockConfig+0x48>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c1a:	2103      	movs	r1, #3
 8000c1c:	6873      	ldr	r3, [r6, #4]
 8000c1e:	438b      	bics	r3, r1
 8000c20:	4313      	orrs	r3, r2
 8000c22:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000c24:	f7ff fdda 	bl	80007dc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c28:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000c2a:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d115      	bne.n	8000c5c <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c30:	220c      	movs	r2, #12
 8000c32:	6873      	ldr	r3, [r6, #4]
 8000c34:	4013      	ands	r3, r2
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	d0c8      	beq.n	8000bcc <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c3a:	f7ff fdcf 	bl	80007dc <HAL_GetTick>
 8000c3e:	9b01      	ldr	r3, [sp, #4]
 8000c40:	1ac0      	subs	r0, r0, r3
 8000c42:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <HAL_RCC_ClockConfig+0x10c>)
 8000c44:	4298      	cmp	r0, r3
 8000c46:	d9f3      	bls.n	8000c30 <HAL_RCC_ClockConfig+0x80>
          return HAL_TIMEOUT;
 8000c48:	2003      	movs	r0, #3
 8000c4a:	e7d6      	b.n	8000bfa <HAL_RCC_ClockConfig+0x4a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c4c:	2a02      	cmp	r2, #2
 8000c4e:	d102      	bne.n	8000c56 <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c50:	019b      	lsls	r3, r3, #6
 8000c52:	d4e2      	bmi.n	8000c1a <HAL_RCC_ClockConfig+0x6a>
 8000c54:	e7d0      	b.n	8000bf8 <HAL_RCC_ClockConfig+0x48>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c56:	079b      	lsls	r3, r3, #30
 8000c58:	d4df      	bmi.n	8000c1a <HAL_RCC_ClockConfig+0x6a>
 8000c5a:	e7cd      	b.n	8000bf8 <HAL_RCC_ClockConfig+0x48>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d012      	beq.n	8000c86 <HAL_RCC_ClockConfig+0xd6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c60:	220c      	movs	r2, #12
 8000c62:	6873      	ldr	r3, [r6, #4]
 8000c64:	4213      	tst	r3, r2
 8000c66:	d0b1      	beq.n	8000bcc <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c68:	f7ff fdb8 	bl	80007dc <HAL_GetTick>
 8000c6c:	9b01      	ldr	r3, [sp, #4]
 8000c6e:	1ac0      	subs	r0, r0, r3
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_RCC_ClockConfig+0x10c>)
 8000c72:	4298      	cmp	r0, r3
 8000c74:	d9f4      	bls.n	8000c60 <HAL_RCC_ClockConfig+0xb0>
 8000c76:	e7e7      	b.n	8000c48 <HAL_RCC_ClockConfig+0x98>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c78:	f7ff fdb0 	bl	80007dc <HAL_GetTick>
 8000c7c:	9b01      	ldr	r3, [sp, #4]
 8000c7e:	1ac0      	subs	r0, r0, r3
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_RCC_ClockConfig+0x10c>)
 8000c82:	4298      	cmp	r0, r3
 8000c84:	d8e0      	bhi.n	8000c48 <HAL_RCC_ClockConfig+0x98>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c86:	220c      	movs	r2, #12
 8000c88:	6873      	ldr	r3, [r6, #4]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	2b08      	cmp	r3, #8
 8000c8e:	d1f3      	bne.n	8000c78 <HAL_RCC_ClockConfig+0xc8>
 8000c90:	e79c      	b.n	8000bcc <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c92:	682a      	ldr	r2, [r5, #0]
 8000c94:	439a      	bics	r2, r3
 8000c96:	602a      	str	r2, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c98:	682a      	ldr	r2, [r5, #0]
 8000c9a:	421a      	tst	r2, r3
 8000c9c:	d09b      	beq.n	8000bd6 <HAL_RCC_ClockConfig+0x26>
 8000c9e:	e7ab      	b.n	8000bf8 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000ca0:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <HAL_RCC_ClockConfig+0x108>)
 8000ca2:	4907      	ldr	r1, [pc, #28]	; (8000cc0 <HAL_RCC_ClockConfig+0x110>)
 8000ca4:	6853      	ldr	r3, [r2, #4]
 8000ca6:	400b      	ands	r3, r1
 8000ca8:	68e1      	ldr	r1, [r4, #12]
 8000caa:	430b      	orrs	r3, r1
 8000cac:	6053      	str	r3, [r2, #4]
 8000cae:	e795      	b.n	8000bdc <HAL_RCC_ClockConfig+0x2c>
 8000cb0:	40022000 	.word	0x40022000
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	00001388 	.word	0x00001388
 8000cc0:	fffff8ff 	.word	0xfffff8ff

08000cc4 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00U;
 8000cc4:	2300      	movs	r3, #0
{ 
 8000cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc8:	b087      	sub	sp, #28
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000cca:	680a      	ldr	r2, [r1, #0]
 8000ccc:	0014      	movs	r4, r2
 8000cce:	40dc      	lsrs	r4, r3
 8000cd0:	d101      	bne.n	8000cd6 <HAL_GPIO_Init+0x12>
      }
    }
    
    position++;
  } 
}
 8000cd2:	b007      	add	sp, #28
 8000cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cd6:	2601      	movs	r6, #1
 8000cd8:	0014      	movs	r4, r2
 8000cda:	409e      	lsls	r6, r3
 8000cdc:	4034      	ands	r4, r6
 8000cde:	9402      	str	r4, [sp, #8]
    if(iocurrent)
 8000ce0:	4232      	tst	r2, r6
 8000ce2:	d100      	bne.n	8000ce6 <HAL_GPIO_Init+0x22>
 8000ce4:	e092      	b.n	8000e0c <HAL_GPIO_Init+0x148>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000ce6:	684a      	ldr	r2, [r1, #4]
 8000ce8:	0015      	movs	r5, r2
 8000cea:	9201      	str	r2, [sp, #4]
 8000cec:	2210      	movs	r2, #16
 8000cee:	4395      	bics	r5, r2
 8000cf0:	9503      	str	r5, [sp, #12]
 8000cf2:	2d02      	cmp	r5, #2
 8000cf4:	d10d      	bne.n	8000d12 <HAL_GPIO_Init+0x4e>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000cf6:	2407      	movs	r4, #7
 8000cf8:	250f      	movs	r5, #15
 8000cfa:	401c      	ands	r4, r3
 8000cfc:	00a4      	lsls	r4, r4, #2
 8000cfe:	40a5      	lsls	r5, r4
        temp = GPIOx->AFR[position >> 3];
 8000d00:	08da      	lsrs	r2, r3, #3
 8000d02:	0092      	lsls	r2, r2, #2
 8000d04:	1882      	adds	r2, r0, r2
 8000d06:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000d08:	43af      	bics	r7, r5
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000d0a:	690d      	ldr	r5, [r1, #16]
 8000d0c:	40a5      	lsls	r5, r4
 8000d0e:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3U] = temp;
 8000d10:	6217      	str	r7, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000d12:	2203      	movs	r2, #3
 8000d14:	005c      	lsls	r4, r3, #1
 8000d16:	40a2      	lsls	r2, r4
 8000d18:	43d5      	mvns	r5, r2
 8000d1a:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d1c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000d1e:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000d20:	4397      	bics	r7, r2
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d22:	9a01      	ldr	r2, [sp, #4]
 8000d24:	402a      	ands	r2, r5
 8000d26:	40a2      	lsls	r2, r4
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d28:	9d03      	ldr	r5, [sp, #12]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d2a:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d2c:	3d01      	subs	r5, #1
      GPIOx->MODER = temp;
 8000d2e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d30:	2d01      	cmp	r5, #1
 8000d32:	d80f      	bhi.n	8000d54 <HAL_GPIO_Init+0x90>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d34:	4662      	mov	r2, ip
        temp = GPIOx->OSPEEDR; 
 8000d36:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d38:	4015      	ands	r5, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000d3a:	68ca      	ldr	r2, [r1, #12]
 8000d3c:	40a2      	lsls	r2, r4
 8000d3e:	432a      	orrs	r2, r5
        GPIOx->OSPEEDR = temp;
 8000d40:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d42:	6845      	ldr	r5, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d44:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000d46:	43b5      	bics	r5, r6
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d48:	2601      	movs	r6, #1
 8000d4a:	0912      	lsrs	r2, r2, #4
 8000d4c:	4032      	ands	r2, r6
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8000d52:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d54:	4665      	mov	r5, ip
      temp = GPIOx->PUPDR;
 8000d56:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d58:	402a      	ands	r2, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000d5a:	688d      	ldr	r5, [r1, #8]
 8000d5c:	40a5      	lsls	r5, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000d5e:	2480      	movs	r4, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000d60:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8000d62:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000d64:	9a01      	ldr	r2, [sp, #4]
 8000d66:	0564      	lsls	r4, r4, #21
 8000d68:	4222      	tst	r2, r4
 8000d6a:	d04f      	beq.n	8000e0c <HAL_GPIO_Init+0x148>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6c:	2501      	movs	r5, #1
 8000d6e:	4a28      	ldr	r2, [pc, #160]	; (8000e10 <HAL_GPIO_Init+0x14c>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d70:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	6994      	ldr	r4, [r2, #24]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d74:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	432c      	orrs	r4, r5
 8000d78:	6194      	str	r4, [r2, #24]
 8000d7a:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000d7c:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	402a      	ands	r2, r5
 8000d80:	9205      	str	r2, [sp, #20]
 8000d82:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2];
 8000d84:	4a23      	ldr	r2, [pc, #140]	; (8000e14 <HAL_GPIO_Init+0x150>)
 8000d86:	00a4      	lsls	r4, r4, #2
 8000d88:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	3502      	adds	r5, #2
 8000d8e:	401d      	ands	r5, r3
 8000d90:	00ad      	lsls	r5, r5, #2
 8000d92:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2];
 8000d94:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d96:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d98:	2200      	movs	r2, #0
 8000d9a:	42b8      	cmp	r0, r7
 8000d9c:	d00c      	beq.n	8000db8 <HAL_GPIO_Init+0xf4>
 8000d9e:	4f1e      	ldr	r7, [pc, #120]	; (8000e18 <HAL_GPIO_Init+0x154>)
 8000da0:	3201      	adds	r2, #1
 8000da2:	42b8      	cmp	r0, r7
 8000da4:	d008      	beq.n	8000db8 <HAL_GPIO_Init+0xf4>
 8000da6:	4f1d      	ldr	r7, [pc, #116]	; (8000e1c <HAL_GPIO_Init+0x158>)
 8000da8:	3201      	adds	r2, #1
 8000daa:	42b8      	cmp	r0, r7
 8000dac:	d004      	beq.n	8000db8 <HAL_GPIO_Init+0xf4>
 8000dae:	4f1c      	ldr	r7, [pc, #112]	; (8000e20 <HAL_GPIO_Init+0x15c>)
 8000db0:	3201      	adds	r2, #1
 8000db2:	42b8      	cmp	r0, r7
 8000db4:	d000      	beq.n	8000db8 <HAL_GPIO_Init+0xf4>
 8000db6:	3202      	adds	r2, #2
 8000db8:	40aa      	lsls	r2, r5
 8000dba:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000dbc:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000dbe:	4a19      	ldr	r2, [pc, #100]	; (8000e24 <HAL_GPIO_Init+0x160>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000dc0:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8000dc2:	6816      	ldr	r6, [r2, #0]
          SET_BIT(temp, iocurrent); 
 8000dc4:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dc6:	9f01      	ldr	r7, [sp, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000dc8:	43e4      	mvns	r4, r4
          SET_BIT(temp, iocurrent); 
 8000dca:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dcc:	03ff      	lsls	r7, r7, #15
 8000dce:	d401      	bmi.n	8000dd4 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000dd0:	0035      	movs	r5, r6
 8000dd2:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8000dd4:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000dd6:	6856      	ldr	r6, [r2, #4]
          SET_BIT(temp, iocurrent); 
 8000dd8:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dda:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8000ddc:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dde:	03bf      	lsls	r7, r7, #14
 8000de0:	d401      	bmi.n	8000de6 <HAL_GPIO_Init+0x122>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000de2:	0035      	movs	r5, r6
 8000de4:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8000de6:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000de8:	6896      	ldr	r6, [r2, #8]
          SET_BIT(temp, iocurrent); 
 8000dea:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dec:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8000dee:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000df0:	02ff      	lsls	r7, r7, #11
 8000df2:	d401      	bmi.n	8000df8 <HAL_GPIO_Init+0x134>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000df4:	0035      	movs	r5, r6
 8000df6:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8000df8:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000dfa:	68d5      	ldr	r5, [r2, #12]
          SET_BIT(temp, iocurrent); 
 8000dfc:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dfe:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8000e00:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e02:	02bf      	lsls	r7, r7, #10
 8000e04:	d401      	bmi.n	8000e0a <HAL_GPIO_Init+0x146>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000e06:	4025      	ands	r5, r4
 8000e08:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000e0a:	60d6      	str	r6, [r2, #12]
    position++;
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	e75c      	b.n	8000cca <HAL_GPIO_Init+0x6>
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40010000 	.word	0x40010000
 8000e18:	48000400 	.word	0x48000400
 8000e1c:	48000800 	.word	0x48000800
 8000e20:	48000c00 	.word	0x48000c00
 8000e24:	40010400 	.word	0x40010400

08000e28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e2c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}										  
 8000e2e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e30:	6281      	str	r1, [r0, #40]	; 0x28
}										  
 8000e32:	e7fc      	b.n	8000e2e <HAL_GPIO_WritePin+0x6>

08000e34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e36:	0004      	movs	r4, r0
 8000e38:	000d      	movs	r5, r1
 8000e3a:	0017      	movs	r7, r2
 8000e3c:	001e      	movs	r6, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000e3e:	6822      	ldr	r2, [r4, #0]
 8000e40:	69d3      	ldr	r3, [r2, #28]
 8000e42:	402b      	ands	r3, r5
 8000e44:	1b5b      	subs	r3, r3, r5
 8000e46:	4259      	negs	r1, r3
 8000e48:	414b      	adcs	r3, r1
 8000e4a:	42bb      	cmp	r3, r7
 8000e4c:	d001      	beq.n	8000e52 <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000e4e:	2000      	movs	r0, #0
 8000e50:	e018      	b.n	8000e84 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8000e52:	9b06      	ldr	r3, [sp, #24]
 8000e54:	3301      	adds	r3, #1
 8000e56:	d0f3      	beq.n	8000e40 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000e58:	9b06      	ldr	r3, [sp, #24]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d113      	bne.n	8000e86 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000e5e:	6823      	ldr	r3, [r4, #0]
 8000e60:	490c      	ldr	r1, [pc, #48]	; (8000e94 <UART_WaitOnFlagUntilTimeout+0x60>)
 8000e62:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8000e64:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000e66:	400a      	ands	r2, r1
 8000e68:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	31a3      	adds	r1, #163	; 0xa3
 8000e6e:	31ff      	adds	r1, #255	; 0xff
 8000e70:	438a      	bics	r2, r1
 8000e72:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8000e74:	0022      	movs	r2, r4
 8000e76:	2320      	movs	r3, #32
 8000e78:	3269      	adds	r2, #105	; 0x69
 8000e7a:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8000e7c:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8000e7e:	2300      	movs	r3, #0
 8000e80:	3468      	adds	r4, #104	; 0x68
 8000e82:	7023      	strb	r3, [r4, #0]
}
 8000e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000e86:	f7ff fca9 	bl	80007dc <HAL_GetTick>
 8000e8a:	9b06      	ldr	r3, [sp, #24]
 8000e8c:	1b80      	subs	r0, r0, r6
 8000e8e:	4298      	cmp	r0, r3
 8000e90:	d9d5      	bls.n	8000e3e <UART_WaitOnFlagUntilTimeout+0xa>
 8000e92:	e7e4      	b.n	8000e5e <UART_WaitOnFlagUntilTimeout+0x2a>
 8000e94:	fffffe5f 	.word	0xfffffe5f

08000e98 <UART_SetConfig>:

  return HAL_OK;
}

HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e98:	0003      	movs	r3, r0
 8000e9a:	b570      	push	{r4, r5, r6, lr}
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	691d      	ldr	r5, [r3, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ea0:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000ea2:	432a      	orrs	r2, r5
 8000ea4:	695d      	ldr	r5, [r3, #20]
 8000ea6:	69c1      	ldr	r1, [r0, #28]
 8000ea8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000eaa:	6820      	ldr	r0, [r4, #0]
 8000eac:	4d33      	ldr	r5, [pc, #204]	; (8000f7c <UART_SetConfig+0xe4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000eae:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000eb0:	4028      	ands	r0, r5
 8000eb2:	4302      	orrs	r2, r0
 8000eb4:	6022      	str	r2, [r4, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000eb6:	6862      	ldr	r2, [r4, #4]
 8000eb8:	4831      	ldr	r0, [pc, #196]	; (8000f80 <UART_SetConfig+0xe8>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000eba:	6a1d      	ldr	r5, [r3, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ebc:	4002      	ands	r2, r0
 8000ebe:	68d8      	ldr	r0, [r3, #12]
 8000ec0:	4302      	orrs	r2, r0
 8000ec2:	6062      	str	r2, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000ec4:	699a      	ldr	r2, [r3, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000ec6:	68a0      	ldr	r0, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000ec8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000eca:	4d2e      	ldr	r5, [pc, #184]	; (8000f84 <UART_SetConfig+0xec>)
 8000ecc:	4028      	ands	r0, r5
 8000ece:	4302      	orrs	r2, r0

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	2580      	movs	r5, #128	; 0x80
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000ed4:	60a2      	str	r2, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000ed6:	4a2c      	ldr	r2, [pc, #176]	; (8000f88 <UART_SetConfig+0xf0>)
 8000ed8:	022d      	lsls	r5, r5, #8
 8000eda:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000edc:	4002      	ands	r2, r0
 8000ede:	3a01      	subs	r2, #1
 8000ee0:	2a02      	cmp	r2, #2
 8000ee2:	d843      	bhi.n	8000f6c <UART_SetConfig+0xd4>
 8000ee4:	4829      	ldr	r0, [pc, #164]	; (8000f8c <UART_SetConfig+0xf4>)
 8000ee6:	5c80      	ldrb	r0, [r0, r2]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000ee8:	42a9      	cmp	r1, r5
 8000eea:	d120      	bne.n	8000f2e <UART_SetConfig+0x96>
  {
    switch (clocksource)
 8000eec:	2808      	cmp	r0, #8
 8000eee:	d81b      	bhi.n	8000f28 <UART_SetConfig+0x90>
 8000ef0:	f7ff f96e 	bl	80001d0 <__gnu_thumb1_case_uqi>
 8000ef4:	1a051a3e 	.word	0x1a051a3e
 8000ef8:	1a1a1a3e 	.word	0x1a1a1a3e
 8000efc:	15          	.byte	0x15
 8000efd:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000efe:	6859      	ldr	r1, [r3, #4]
 8000f00:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <UART_SetConfig+0xf8>)
 8000f02:	0848      	lsrs	r0, r1, #1
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000f04:	18c0      	adds	r0, r0, r3
 8000f06:	f7ff f96d 	bl	80001e4 <__udivsi3>
 8000f0a:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8000f0c:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8000f0e:	0019      	movs	r1, r3
 8000f10:	220f      	movs	r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000f12:	071b      	lsls	r3, r3, #28
    brrtemp = usartdiv & 0xFFF0U;
 8000f14:	4391      	bics	r1, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000f16:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8000f18:	430b      	orrs	r3, r1
 8000f1a:	60e3      	str	r3, [r4, #12]
    }
  }

  return ret;

}
 8000f1c:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000f1e:	6859      	ldr	r1, [r3, #4]
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	0848      	lsrs	r0, r1, #1
 8000f24:	025b      	lsls	r3, r3, #9
 8000f26:	e7ed      	b.n	8000f04 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f28:	2001      	movs	r0, #1
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e7ef      	b.n	8000f0e <UART_SetConfig+0x76>
    switch (clocksource)
 8000f2e:	2808      	cmp	r0, #8
 8000f30:	d81a      	bhi.n	8000f68 <UART_SetConfig+0xd0>
 8000f32:	f7ff f94d 	bl	80001d0 <__gnu_thumb1_case_uqi>
 8000f36:	190f      	.short	0x190f
 8000f38:	190f1905 	.word	0x190f1905
 8000f3c:	1919      	.short	0x1919
 8000f3e:	14          	.byte	0x14
 8000f3f:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8000f40:	6859      	ldr	r1, [r3, #4]
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <UART_SetConfig+0xfc>)
 8000f44:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000f46:	18c0      	adds	r0, r0, r3
 8000f48:	f7ff f94c 	bl	80001e4 <__udivsi3>
 8000f4c:	b280      	uxth	r0, r0
 8000f4e:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8000f50:	2000      	movs	r0, #0
        break;
 8000f52:	e7e3      	b.n	8000f1c <UART_SetConfig+0x84>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000f54:	6859      	ldr	r1, [r3, #4]
 8000f56:	23e1      	movs	r3, #225	; 0xe1
 8000f58:	0848      	lsrs	r0, r1, #1
 8000f5a:	03db      	lsls	r3, r3, #15
 8000f5c:	e7f3      	b.n	8000f46 <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000f5e:	6859      	ldr	r1, [r3, #4]
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	0848      	lsrs	r0, r1, #1
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	e7ee      	b.n	8000f46 <UART_SetConfig+0xae>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f68:	2001      	movs	r0, #1
  return ret;
 8000f6a:	e7d7      	b.n	8000f1c <UART_SetConfig+0x84>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f6c:	42a9      	cmp	r1, r5
 8000f6e:	d1f1      	bne.n	8000f54 <UART_SetConfig+0xbc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000f70:	6859      	ldr	r1, [r3, #4]
 8000f72:	23e1      	movs	r3, #225	; 0xe1
 8000f74:	0848      	lsrs	r0, r1, #1
 8000f76:	041b      	lsls	r3, r3, #16
 8000f78:	e7c4      	b.n	8000f04 <UART_SetConfig+0x6c>
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	ffff69f3 	.word	0xffff69f3
 8000f80:	ffffcfff 	.word	0xffffcfff
 8000f84:	fffff4ff 	.word	0xfffff4ff
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	080014b8 	.word	0x080014b8
 8000f90:	01e84800 	.word	0x01e84800
 8000f94:	00f42400 	.word	0x00f42400

08000f98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000f98:	b570      	push	{r4, r5, r6, lr}
 8000f9a:	1e04      	subs	r4, r0, #0
  /* Check the UART handle allocation */
  if(huart == NULL)
 8000f9c:	d101      	bne.n	8000fa2 <HAL_UART_Init+0xa>
  {
    return HAL_ERROR;
 8000f9e:	2001      	movs	r0, #1
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8000fa0:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8000fa2:	0005      	movs	r5, r0
 8000fa4:	3569      	adds	r5, #105	; 0x69
 8000fa6:	782b      	ldrb	r3, [r5, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d102      	bne.n	8000fb4 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8000fae:	0003      	movs	r3, r0
 8000fb0:	3368      	adds	r3, #104	; 0x68
 8000fb2:	701a      	strb	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000fb4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000fb6:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8000fb8:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8000fba:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000fbc:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8000fbe:	6813      	ldr	r3, [r2, #0]
 8000fc0:	43b3      	bics	r3, r6
 8000fc2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000fc4:	f7ff ff68 	bl	8000e98 <UART_SetConfig>
 8000fc8:	42b0      	cmp	r0, r6
 8000fca:	d0e8      	beq.n	8000f9e <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8000fcc:	6823      	ldr	r3, [r4, #0]
 8000fce:	490a      	ldr	r1, [pc, #40]	; (8000ff8 <HAL_UART_Init+0x60>)
 8000fd0:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fd2:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8000fd4:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8000fd6:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8000fd8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	438a      	bics	r2, r1
 8000fde:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4316      	orrs	r6, r2
  huart->RxState = HAL_UART_STATE_READY;
 8000fe4:	0022      	movs	r2, r4
  __HAL_UART_ENABLE(huart);
 8000fe6:	601e      	str	r6, [r3, #0]
  huart->gState  = HAL_UART_STATE_READY;
 8000fe8:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fea:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8000fec:	326a      	adds	r2, #106	; 0x6a
  __HAL_UNLOCK(huart);
 8000fee:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8000ff0:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8000ff2:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8000ff4:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8000ff6:	e7d3      	b.n	8000fa0 <HAL_UART_Init+0x8>
 8000ff8:	fffff7ff 	.word	0xfffff7ff

08000ffc <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffe:	b085      	sub	sp, #20
 8001000:	9303      	str	r3, [sp, #12]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001002:	0003      	movs	r3, r0
 8001004:	336a      	adds	r3, #106	; 0x6a
{
 8001006:	0017      	movs	r7, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001008:	781a      	ldrb	r2, [r3, #0]
{
 800100a:	0004      	movs	r4, r0
 800100c:	000d      	movs	r5, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800100e:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001010:	2a20      	cmp	r2, #32
 8001012:	d139      	bne.n	8001088 <HAL_UART_Receive+0x8c>
      return  HAL_ERROR;
 8001014:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8001016:	2900      	cmp	r1, #0
 8001018:	d036      	beq.n	8001088 <HAL_UART_Receive+0x8c>
 800101a:	2f00      	cmp	r7, #0
 800101c:	d034      	beq.n	8001088 <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800101e:	2280      	movs	r2, #128	; 0x80
 8001020:	68a1      	ldr	r1, [r4, #8]
 8001022:	0152      	lsls	r2, r2, #5
 8001024:	4291      	cmp	r1, r2
 8001026:	d104      	bne.n	8001032 <HAL_UART_Receive+0x36>
 8001028:	6922      	ldr	r2, [r4, #16]
 800102a:	2a00      	cmp	r2, #0
 800102c:	d101      	bne.n	8001032 <HAL_UART_Receive+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 800102e:	4205      	tst	r5, r0
 8001030:	d12a      	bne.n	8001088 <HAL_UART_Receive+0x8c>
    __HAL_LOCK(huart);
 8001032:	0022      	movs	r2, r4
 8001034:	3268      	adds	r2, #104	; 0x68
 8001036:	7811      	ldrb	r1, [r2, #0]
    return HAL_BUSY;
 8001038:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800103a:	2901      	cmp	r1, #1
 800103c:	d024      	beq.n	8001088 <HAL_UART_Receive+0x8c>
 800103e:	2101      	movs	r1, #1
 8001040:	7011      	strb	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001042:	2200      	movs	r2, #0
 8001044:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001046:	3222      	adds	r2, #34	; 0x22
 8001048:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800104a:	f7ff fbc7 	bl	80007dc <HAL_GetTick>
    huart->RxXferSize = Size;
 800104e:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 8001050:	2180      	movs	r1, #128	; 0x80
 8001052:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize = Size;
 8001054:	3358      	adds	r3, #88	; 0x58
 8001056:	801f      	strh	r7, [r3, #0]
    huart->RxXferCount = Size;
 8001058:	805f      	strh	r7, [r3, #2]
    tickstart = HAL_GetTick();
 800105a:	0006      	movs	r6, r0
    UART_MASK_COMPUTATION(huart);
 800105c:	0149      	lsls	r1, r1, #5
 800105e:	3304      	adds	r3, #4
 8001060:	428a      	cmp	r2, r1
 8001062:	d115      	bne.n	8001090 <HAL_UART_Receive+0x94>
 8001064:	6922      	ldr	r2, [r4, #16]
 8001066:	2a00      	cmp	r2, #0
 8001068:	d110      	bne.n	800108c <HAL_UART_Receive+0x90>
 800106a:	4a1f      	ldr	r2, [pc, #124]	; (80010e8 <HAL_UART_Receive+0xec>)
 800106c:	801a      	strh	r2, [r3, #0]
    uhMask = huart->Mask;
 800106e:	881f      	ldrh	r7, [r3, #0]
    while(huart->RxXferCount > 0U)
 8001070:	0022      	movs	r2, r4
 8001072:	325a      	adds	r2, #90	; 0x5a
 8001074:	8813      	ldrh	r3, [r2, #0]
 8001076:	b298      	uxth	r0, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d110      	bne.n	800109e <HAL_UART_Receive+0xa2>
    huart->RxState = HAL_UART_STATE_READY;
 800107c:	0023      	movs	r3, r4
 800107e:	2220      	movs	r2, #32
 8001080:	336a      	adds	r3, #106	; 0x6a
    __HAL_UNLOCK(huart);
 8001082:	3468      	adds	r4, #104	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 8001084:	701a      	strb	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8001086:	7020      	strb	r0, [r4, #0]
  }
}
 8001088:	b005      	add	sp, #20
 800108a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 800108c:	22ff      	movs	r2, #255	; 0xff
 800108e:	e7ed      	b.n	800106c <HAL_UART_Receive+0x70>
 8001090:	2a00      	cmp	r2, #0
 8001092:	d1ec      	bne.n	800106e <HAL_UART_Receive+0x72>
 8001094:	6922      	ldr	r2, [r4, #16]
 8001096:	2a00      	cmp	r2, #0
 8001098:	d0f8      	beq.n	800108c <HAL_UART_Receive+0x90>
 800109a:	227f      	movs	r2, #127	; 0x7f
 800109c:	e7e6      	b.n	800106c <HAL_UART_Receive+0x70>
      huart->RxXferCount--;
 800109e:	8813      	ldrh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80010a0:	2120      	movs	r1, #32
      huart->RxXferCount--;
 80010a2:	3b01      	subs	r3, #1
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	8013      	strh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80010a8:	9b03      	ldr	r3, [sp, #12]
 80010aa:	2200      	movs	r2, #0
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	0020      	movs	r0, r4
 80010b0:	0033      	movs	r3, r6
 80010b2:	f7ff febf 	bl	8000e34 <UART_WaitOnFlagUntilTimeout>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	d113      	bne.n	80010e2 <HAL_UART_Receive+0xe6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010ba:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80010bc:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010be:	0011      	movs	r1, r2
 80010c0:	2280      	movs	r2, #128	; 0x80
 80010c2:	0152      	lsls	r2, r2, #5
 80010c4:	4291      	cmp	r1, r2
 80010c6:	d107      	bne.n	80010d8 <HAL_UART_Receive+0xdc>
 80010c8:	6922      	ldr	r2, [r4, #16]
 80010ca:	2a00      	cmp	r2, #0
 80010cc:	d104      	bne.n	80010d8 <HAL_UART_Receive+0xdc>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80010ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010d0:	403b      	ands	r3, r7
 80010d2:	802b      	strh	r3, [r5, #0]
        pData +=2U;
 80010d4:	3502      	adds	r5, #2
 80010d6:	e7cb      	b.n	8001070 <HAL_UART_Receive+0x74>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80010d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010da:	403b      	ands	r3, r7
 80010dc:	702b      	strb	r3, [r5, #0]
 80010de:	3501      	adds	r5, #1
 80010e0:	e7c6      	b.n	8001070 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 80010e2:	2003      	movs	r0, #3
 80010e4:	e7d0      	b.n	8001088 <HAL_UART_Receive+0x8c>
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	000001ff 	.word	0x000001ff

080010ec <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ee:	b085      	sub	sp, #20
 80010f0:	9303      	str	r3, [sp, #12]
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80010f2:	0003      	movs	r3, r0
 80010f4:	3369      	adds	r3, #105	; 0x69
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	781b      	ldrb	r3, [r3, #0]
{
 80010fa:	0004      	movs	r4, r0
 80010fc:	000d      	movs	r5, r1
 80010fe:	0016      	movs	r6, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001100:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8001102:	2b20      	cmp	r3, #32
 8001104:	d148      	bne.n	8001198 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 8001106:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8001108:	2900      	cmp	r1, #0
 800110a:	d045      	beq.n	8001198 <HAL_UART_Transmit+0xac>
 800110c:	2a00      	cmp	r2, #0
 800110e:	d043      	beq.n	8001198 <HAL_UART_Transmit+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	68a2      	ldr	r2, [r4, #8]
 8001114:	015b      	lsls	r3, r3, #5
 8001116:	429a      	cmp	r2, r3
 8001118:	d104      	bne.n	8001124 <HAL_UART_Transmit+0x38>
 800111a:	6923      	ldr	r3, [r4, #16]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <HAL_UART_Transmit+0x38>
      if((((uint32_t)pData)&1U) != 0U)
 8001120:	4201      	tst	r1, r0
 8001122:	d139      	bne.n	8001198 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001124:	0023      	movs	r3, r4
 8001126:	3368      	adds	r3, #104	; 0x68
 8001128:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 800112a:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800112c:	2a01      	cmp	r2, #1
 800112e:	d033      	beq.n	8001198 <HAL_UART_Transmit+0xac>
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001134:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001136:	9a02      	ldr	r2, [sp, #8]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001138:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800113a:	3321      	adds	r3, #33	; 0x21
 800113c:	7013      	strb	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800113e:	f7ff fb4d 	bl	80007dc <HAL_GetTick>
    huart->TxXferSize = Size;
 8001142:	0023      	movs	r3, r4
 8001144:	3350      	adds	r3, #80	; 0x50
 8001146:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8001148:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800114a:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 800114c:	0007      	movs	r7, r0
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800114e:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 8001150:	0021      	movs	r1, r4
 8001152:	3152      	adds	r1, #82	; 0x52
 8001154:	880b      	ldrh	r3, [r1, #0]
 8001156:	b29a      	uxth	r2, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10e      	bne.n	800117a <HAL_UART_Transmit+0x8e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800115c:	9b03      	ldr	r3, [sp, #12]
 800115e:	2140      	movs	r1, #64	; 0x40
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	0020      	movs	r0, r4
 8001164:	003b      	movs	r3, r7
 8001166:	f7ff fe65 	bl	8000e34 <UART_WaitOnFlagUntilTimeout>
 800116a:	2800      	cmp	r0, #0
 800116c:	d113      	bne.n	8001196 <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_READY;
 800116e:	2320      	movs	r3, #32
 8001170:	9a02      	ldr	r2, [sp, #8]
    __HAL_UNLOCK(huart);
 8001172:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8001174:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(huart);
 8001176:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001178:	e00e      	b.n	8001198 <HAL_UART_Transmit+0xac>
      huart->TxXferCount--;
 800117a:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800117c:	2200      	movs	r2, #0
      huart->TxXferCount--;
 800117e:	3b01      	subs	r3, #1
 8001180:	b29b      	uxth	r3, r3
 8001182:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001184:	9b03      	ldr	r3, [sp, #12]
 8001186:	2180      	movs	r1, #128	; 0x80
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	0020      	movs	r0, r4
 800118c:	003b      	movs	r3, r7
 800118e:	f7ff fe51 	bl	8000e34 <UART_WaitOnFlagUntilTimeout>
 8001192:	2800      	cmp	r0, #0
 8001194:	d002      	beq.n	800119c <HAL_UART_Transmit+0xb0>
        return HAL_TIMEOUT;
 8001196:	2003      	movs	r0, #3
  }
}
 8001198:	b005      	add	sp, #20
 800119a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800119c:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800119e:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80011a0:	42b3      	cmp	r3, r6
 80011a2:	d108      	bne.n	80011b6 <HAL_UART_Transmit+0xca>
 80011a4:	6923      	ldr	r3, [r4, #16]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d105      	bne.n	80011b6 <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80011aa:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 80011ac:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80011ae:	05db      	lsls	r3, r3, #23
 80011b0:	0ddb      	lsrs	r3, r3, #23
 80011b2:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80011b4:	e7cc      	b.n	8001150 <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80011b6:	782b      	ldrb	r3, [r5, #0]
 80011b8:	3501      	adds	r5, #1
 80011ba:	8513      	strh	r3, [r2, #40]	; 0x28
 80011bc:	e7c8      	b.n	8001150 <HAL_UART_Transmit+0x64>
 80011be:	0000      	movs	r0, r0

080011c0 <KeyExpansion>:
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for(i = 0; i < Nk; ++i)
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 80011c0:	4b21      	ldr	r3, [pc, #132]	; (8001248 <KeyExpansion+0x88>)
{
 80011c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4d21      	ldr	r5, [pc, #132]	; (800124c <KeyExpansion+0x8c>)
 80011c8:	0019      	movs	r1, r3
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 80011ca:	002a      	movs	r2, r5
 80011cc:	3110      	adds	r1, #16
 80011ce:	7818      	ldrb	r0, [r3, #0]
 80011d0:	7010      	strb	r0, [r2, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 80011d2:	7858      	ldrb	r0, [r3, #1]
 80011d4:	7050      	strb	r0, [r2, #1]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 80011d6:	7898      	ldrb	r0, [r3, #2]
 80011d8:	7090      	strb	r0, [r2, #2]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 80011da:	78d8      	ldrb	r0, [r3, #3]
  for(i = 0; i < Nk; ++i)
 80011dc:	3304      	adds	r3, #4
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 80011de:	70d0      	strb	r0, [r2, #3]
  for(i = 0; i < Nk; ++i)
 80011e0:	3204      	adds	r2, #4
 80011e2:	428b      	cmp	r3, r1
 80011e4:	d1f3      	bne.n	80011ce <KeyExpansion+0xe>
 80011e6:	2604      	movs	r6, #4
  // All other round keys are found from the previous round keys.
  for(; (i < (Nb * (Nr + 1))); ++i)
  {
    for(j = 0; j < 4; ++j)
    {
      tempa[j]=RoundKey[(i-1) * 4 + j];
 80011e8:	0029      	movs	r1, r5
 80011ea:	ac01      	add	r4, sp, #4
 80011ec:	2204      	movs	r2, #4
 80011ee:	0020      	movs	r0, r4
 80011f0:	310c      	adds	r1, #12
 80011f2:	f000 f94b 	bl	800148c <memcpy>
    }
    if (i % Nk == 0)
 80011f6:	2303      	movs	r3, #3
 80011f8:	421e      	tst	r6, r3
 80011fa:	d110      	bne.n	800121e <KeyExpansion+0x5e>
  return sbox[num];
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <KeyExpansion+0x90>)
      // This function rotates the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        k = tempa[0];
 80011fe:	7821      	ldrb	r1, [r4, #0]
        tempa[0] = tempa[1];
        tempa[1] = tempa[2];
        tempa[2] = tempa[3];
 8001200:	78e0      	ldrb	r0, [r4, #3]
  return sbox[num];
 8001202:	7862      	ldrb	r2, [r4, #1]
 8001204:	78a7      	ldrb	r7, [r4, #2]
 8001206:	5c9a      	ldrb	r2, [r3, r2]
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
        tempa[1] = getSBoxValue(tempa[1]);
 8001208:	5ddf      	ldrb	r7, [r3, r7]
        tempa[2] = getSBoxValue(tempa[2]);
 800120a:	5c18      	ldrb	r0, [r3, r0]
        tempa[3] = getSBoxValue(tempa[3]);
 800120c:	5c5b      	ldrb	r3, [r3, r1]
      }

      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 800120e:	4911      	ldr	r1, [pc, #68]	; (8001254 <KeyExpansion+0x94>)
        tempa[3] = getSBoxValue(tempa[3]);
 8001210:	70e3      	strb	r3, [r4, #3]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 8001212:	08b3      	lsrs	r3, r6, #2
 8001214:	5ccb      	ldrb	r3, [r1, r3]
        tempa[1] = getSBoxValue(tempa[1]);
 8001216:	7067      	strb	r7, [r4, #1]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 8001218:	4053      	eors	r3, r2
        tempa[2] = getSBoxValue(tempa[2]);
 800121a:	70a0      	strb	r0, [r4, #2]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 800121c:	7023      	strb	r3, [r4, #0]
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 800121e:	782b      	ldrb	r3, [r5, #0]
 8001220:	7822      	ldrb	r2, [r4, #0]
  for(; (i < (Nb * (Nr + 1))); ++i)
 8001222:	3601      	adds	r6, #1
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 8001224:	4053      	eors	r3, r2
 8001226:	742b      	strb	r3, [r5, #16]
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
 8001228:	7862      	ldrb	r2, [r4, #1]
 800122a:	786b      	ldrb	r3, [r5, #1]
 800122c:	4053      	eors	r3, r2
 800122e:	746b      	strb	r3, [r5, #17]
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 8001230:	78a2      	ldrb	r2, [r4, #2]
 8001232:	78ab      	ldrb	r3, [r5, #2]
 8001234:	4053      	eors	r3, r2
 8001236:	74ab      	strb	r3, [r5, #18]
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 8001238:	78e2      	ldrb	r2, [r4, #3]
 800123a:	78eb      	ldrb	r3, [r5, #3]
  for(; (i < (Nb * (Nr + 1))); ++i)
 800123c:	3504      	adds	r5, #4
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 800123e:	4053      	eors	r3, r2
 8001240:	73eb      	strb	r3, [r5, #15]
  for(; (i < (Nb * (Nr + 1))); ++i)
 8001242:	2e2c      	cmp	r6, #44	; 0x2c
 8001244:	d1d0      	bne.n	80011e8 <KeyExpansion+0x28>
  }
}
 8001246:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001248:	20000364 	.word	0x20000364
 800124c:	2000037c 	.word	0x2000037c
 8001250:	2000010f 	.word	0x2000010f
 8001254:	20000004 	.word	0x20000004

08001258 <AddRoundKey>:
  uint8_t i,j;
  for(i=0;i<4;++i)
  {
    for(j = 0; j < 4; ++j)
    {
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <AddRoundKey+0x30>)
{
 800125a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	0100      	lsls	r0, r0, #4
 8001260:	001f      	movs	r7, r3
 8001262:	3710      	adds	r7, #16
 8001264:	0019      	movs	r1, r3
 8001266:	2200      	movs	r2, #0
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 8001268:	4c08      	ldr	r4, [pc, #32]	; (800128c <AddRoundKey+0x34>)
 800126a:	1905      	adds	r5, r0, r4
 800126c:	5cac      	ldrb	r4, [r5, r2]
 800126e:	780e      	ldrb	r6, [r1, #0]
    for(j = 0; j < 4; ++j)
 8001270:	3201      	adds	r2, #1
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 8001272:	4074      	eors	r4, r6
 8001274:	700c      	strb	r4, [r1, #0]
    for(j = 0; j < 4; ++j)
 8001276:	3101      	adds	r1, #1
 8001278:	2a04      	cmp	r2, #4
 800127a:	d1f7      	bne.n	800126c <AddRoundKey+0x14>
  for(i=0;i<4;++i)
 800127c:	3304      	adds	r3, #4
 800127e:	3004      	adds	r0, #4
 8001280:	42bb      	cmp	r3, r7
 8001282:	d1ef      	bne.n	8001264 <AddRoundKey+0xc>
    }
  }
}
 8001284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	20000364 	.word	0x20000364
 800128c:	2000037c 	.word	0x2000037c

08001290 <SubBytes>:
      if (input_save[4*i+j] & 0x02) {
        volatile int i = 1;
        i+=1;
      }
      #endif
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <SubBytes+0x24>)
{
 8001292:	b530      	push	{r4, r5, lr}
 8001294:	685b      	ldr	r3, [r3, #4]
  return sbox[num];
 8001296:	4c08      	ldr	r4, [pc, #32]	; (80012b8 <SubBytes+0x28>)
 8001298:	1d18      	adds	r0, r3, #4
    for(j = 0; j < 4; ++j)
 800129a:	0019      	movs	r1, r3
{
 800129c:	001a      	movs	r2, r3
    for(j = 0; j < 4; ++j)
 800129e:	3110      	adds	r1, #16
  return sbox[num];
 80012a0:	7815      	ldrb	r5, [r2, #0]
 80012a2:	5d65      	ldrb	r5, [r4, r5]
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 80012a4:	7015      	strb	r5, [r2, #0]
    for(j = 0; j < 4; ++j)
 80012a6:	3204      	adds	r2, #4
 80012a8:	428a      	cmp	r2, r1
 80012aa:	d1f9      	bne.n	80012a0 <SubBytes+0x10>
  for(i = 0; i < 4; ++i)
 80012ac:	3301      	adds	r3, #1
 80012ae:	4283      	cmp	r3, r0
 80012b0:	d1f3      	bne.n	800129a <SubBytes+0xa>
    }
  }
}
 80012b2:	bd30      	pop	{r4, r5, pc}
 80012b4:	20000364 	.word	0x20000364
 80012b8:	2000010f 	.word	0x2000010f

080012bc <ShiftRows>:
        i += 1;
      }
      #endif
  #ifdef JITTER_2
  #endif
  temp           = (*state)[0][1];
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <ShiftRows+0x38>)
 80012be:	685b      	ldr	r3, [r3, #4]
  (*state)[0][1] = (*state)[1][1];
 80012c0:	7959      	ldrb	r1, [r3, #5]
  temp           = (*state)[0][1];
 80012c2:	785a      	ldrb	r2, [r3, #1]
  (*state)[0][1] = (*state)[1][1];
 80012c4:	7059      	strb	r1, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 80012c6:	7a59      	ldrb	r1, [r3, #9]
 80012c8:	7159      	strb	r1, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 80012ca:	7b59      	ldrb	r1, [r3, #13]
  (*state)[3][1] = temp;
 80012cc:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[3][1];
 80012ce:	7259      	strb	r1, [r3, #9]
      }
      #endif
  #ifdef JITTER_2
  #endif
  temp           = (*state)[0][2];
  (*state)[0][2] = (*state)[2][2];
 80012d0:	7a99      	ldrb	r1, [r3, #10]
  temp           = (*state)[0][2];
 80012d2:	789a      	ldrb	r2, [r3, #2]
  (*state)[0][2] = (*state)[2][2];
 80012d4:	7099      	strb	r1, [r3, #2]
        i += 1;
      }
      #endif

  temp       = (*state)[1][2];
  (*state)[1][2] = (*state)[3][2];
 80012d6:	7b99      	ldrb	r1, [r3, #14]
  (*state)[2][2] = temp;
 80012d8:	729a      	strb	r2, [r3, #10]
  temp       = (*state)[1][2];
 80012da:	799a      	ldrb	r2, [r3, #6]
  (*state)[1][2] = (*state)[3][2];
 80012dc:	7199      	strb	r1, [r3, #6]
      #endif
  #ifdef JITTER_2
  #endif
  // Rotate third row 3 columns to left
  temp       = (*state)[0][3];
  (*state)[0][3] = (*state)[3][3];
 80012de:	7bd9      	ldrb	r1, [r3, #15]
  (*state)[3][2] = temp;
 80012e0:	739a      	strb	r2, [r3, #14]
  temp       = (*state)[0][3];
 80012e2:	78da      	ldrb	r2, [r3, #3]
  (*state)[0][3] = (*state)[3][3];
 80012e4:	70d9      	strb	r1, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 80012e6:	7ad9      	ldrb	r1, [r3, #11]
 80012e8:	73d9      	strb	r1, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 80012ea:	79d9      	ldrb	r1, [r3, #7]
  (*state)[1][3] = temp;
 80012ec:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[1][3];
 80012ee:	72d9      	strb	r1, [r3, #11]
}
 80012f0:	4770      	bx	lr
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	20000364 	.word	0x20000364

080012f8 <xtime>:

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 80012f8:	09c2      	lsrs	r2, r0, #7
{
 80012fa:	0003      	movs	r3, r0
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 80012fc:	201b      	movs	r0, #27
 80012fe:	4350      	muls	r0, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4058      	eors	r0, r3
 8001304:	b2c0      	uxtb	r0, r0
}
 8001306:	4770      	bx	lr

08001308 <Cipher>:
}


// Cipher is the main function that encrypts the PlainText.
static void Cipher(void)
{
 8001308:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t round = 0;

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0); 
 800130a:	2000      	movs	r0, #0
{
 800130c:	b087      	sub	sp, #28
  AddRoundKey(0); 
 800130e:	f7ff ffa3 	bl	8001258 <AddRoundKey>
  
  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for(round = 1; round < Nr; ++round)
 8001312:	2501      	movs	r5, #1
  {
    SubBytes();
 8001314:	f7ff ffbc 	bl	8001290 <SubBytes>
    ShiftRows();
 8001318:	f7ff ffd0 	bl	80012bc <ShiftRows>
    t   = (*state)[i][0];
 800131c:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <Cipher+0x9c>)
 800131e:	685c      	ldr	r4, [r3, #4]
 8001320:	0023      	movs	r3, r4
 8001322:	3310      	adds	r3, #16
 8001324:	9305      	str	r3, [sp, #20]
 8001326:	7823      	ldrb	r3, [r4, #0]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8001328:	78e7      	ldrb	r7, [r4, #3]
    t   = (*state)[i][0];
 800132a:	9301      	str	r3, [sp, #4]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 800132c:	9801      	ldr	r0, [sp, #4]
 800132e:	7863      	ldrb	r3, [r4, #1]
 8001330:	4058      	eors	r0, r3
 8001332:	9302      	str	r3, [sp, #8]
 8001334:	78a3      	ldrb	r3, [r4, #2]
 8001336:	9303      	str	r3, [sp, #12]
 8001338:	407b      	eors	r3, r7
 800133a:	001e      	movs	r6, r3
 800133c:	9304      	str	r3, [sp, #16]
 800133e:	4046      	eors	r6, r0
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 8001340:	f7ff ffda 	bl	80012f8 <xtime>
 8001344:	9b01      	ldr	r3, [sp, #4]
 8001346:	4058      	eors	r0, r3
 8001348:	4070      	eors	r0, r6
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 800134a:	9b03      	ldr	r3, [sp, #12]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 800134c:	7020      	strb	r0, [r4, #0]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 800134e:	9802      	ldr	r0, [sp, #8]
 8001350:	4058      	eors	r0, r3
 8001352:	f7ff ffd1 	bl	80012f8 <xtime>
 8001356:	9b02      	ldr	r3, [sp, #8]
 8001358:	4058      	eors	r0, r3
 800135a:	4070      	eors	r0, r6
 800135c:	7060      	strb	r0, [r4, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 800135e:	9804      	ldr	r0, [sp, #16]
 8001360:	f7ff ffca 	bl	80012f8 <xtime>
 8001364:	9b03      	ldr	r3, [sp, #12]
 8001366:	4058      	eors	r0, r3
 8001368:	4070      	eors	r0, r6
 800136a:	70a0      	strb	r0, [r4, #2]
    Tm  = (*state)[i][3] ^ t ;        Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 800136c:	9801      	ldr	r0, [sp, #4]
 800136e:	4078      	eors	r0, r7
 8001370:	f7ff ffc2 	bl	80012f8 <xtime>
 8001374:	4078      	eors	r0, r7
 8001376:	4046      	eors	r6, r0
  for(i = 0; i < 4; ++i)
 8001378:	9b05      	ldr	r3, [sp, #20]
    Tm  = (*state)[i][3] ^ t ;        Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 800137a:	70e6      	strb	r6, [r4, #3]
  for(i = 0; i < 4; ++i)
 800137c:	3404      	adds	r4, #4
 800137e:	42a3      	cmp	r3, r4
 8001380:	d1d1      	bne.n	8001326 <Cipher+0x1e>
    MixColumns();
    AddRoundKey(round);
 8001382:	0028      	movs	r0, r5
  for(round = 1; round < Nr; ++round)
 8001384:	3501      	adds	r5, #1
 8001386:	b2ed      	uxtb	r5, r5
    AddRoundKey(round);
 8001388:	f7ff ff66 	bl	8001258 <AddRoundKey>
  for(round = 1; round < Nr; ++round)
 800138c:	2d0a      	cmp	r5, #10
 800138e:	d1c1      	bne.n	8001314 <Cipher+0xc>
  }
  
  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes();
 8001390:	f7ff ff7e 	bl	8001290 <SubBytes>
  ShiftRows();
 8001394:	f7ff ff92 	bl	80012bc <ShiftRows>
  AddRoundKey(Nr);
 8001398:	0028      	movs	r0, r5
 800139a:	f7ff ff5d 	bl	8001258 <AddRoundKey>
}
 800139e:	b007      	add	sp, #28
 80013a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	20000364 	.word	0x20000364

080013a8 <BlockCopy>:
  InvSubBytes();
  AddRoundKey(0);
}

static void BlockCopy(uint8_t* output, const uint8_t* input)
{
 80013a8:	2300      	movs	r3, #0
  uint8_t i;
  for (i=0;i<KEYLEN;++i)
  {
    output[i] = input[i];
 80013aa:	5cca      	ldrb	r2, [r1, r3]
 80013ac:	54c2      	strb	r2, [r0, r3]
  for (i=0;i<KEYLEN;++i)
 80013ae:	3301      	adds	r3, #1
 80013b0:	2b10      	cmp	r3, #16
 80013b2:	d1fa      	bne.n	80013aa <BlockCopy+0x2>
  }
}
 80013b4:	4770      	bx	lr
 80013b6:	0000      	movs	r0, r0

080013b8 <AES128_ECB_indp_setkey>:
/*****************************************************************************/
/* Public functions:                                                         */
/*****************************************************************************/

void AES128_ECB_indp_setkey(uint8_t* key)
{
 80013b8:	b510      	push	{r4, lr}
  Key = key;
 80013ba:	4b02      	ldr	r3, [pc, #8]	; (80013c4 <AES128_ECB_indp_setkey+0xc>)
 80013bc:	6018      	str	r0, [r3, #0]
  KeyExpansion();
 80013be:	f7ff feff 	bl	80011c0 <KeyExpansion>
}
 80013c2:	bd10      	pop	{r4, pc}
 80013c4:	20000364 	.word	0x20000364

080013c8 <AES128_ECB_indp_crypto>:

void AES128_ECB_indp_crypto(uint8_t* input)
{
 80013c8:	0001      	movs	r1, r0
 80013ca:	b510      	push	{r4, lr}
  state = (state_t*)input;
 80013cc:	4803      	ldr	r0, [pc, #12]	; (80013dc <AES128_ECB_indp_crypto+0x14>)
 80013ce:	6041      	str	r1, [r0, #4]
  BlockCopy(input_save, input);
 80013d0:	3008      	adds	r0, #8
 80013d2:	f7ff ffe9 	bl	80013a8 <BlockCopy>
  Cipher();
 80013d6:	f7ff ff97 	bl	8001308 <Cipher>
}
 80013da:	bd10      	pop	{r4, pc}
 80013dc:	20000364 	.word	0x20000364

080013e0 <aes_indep_init>:
uint8_t enckey[16];

void aes_indep_init(void)
{
	;
}
 80013e0:	4770      	bx	lr

080013e2 <aes_indep_key>:

void aes_indep_key(uint8_t * key)
{
 80013e2:	b510      	push	{r4, lr}
    AES128_ECB_indp_setkey(key);
 80013e4:	f7ff ffe8 	bl	80013b8 <AES128_ECB_indp_setkey>
}
 80013e8:	bd10      	pop	{r4, pc}

080013ea <aes_indep_enc>:

void aes_indep_enc(uint8_t * pt)
{
 80013ea:	b510      	push	{r4, lr}
	AES128_ECB_indp_crypto(pt);
 80013ec:	f7ff ffec 	bl	80013c8 <AES128_ECB_indp_crypto>
}
 80013f0:	bd10      	pop	{r4, pc}

080013f2 <aes_indep_enc_pretrigger>:

void aes_indep_enc_pretrigger(uint8_t * pt)
{
    ;
}
 80013f2:	4770      	bx	lr

080013f4 <aes_indep_enc_posttrigger>:
 80013f4:	4770      	bx	lr

080013f6 <aes_indep_mask>:
    ;
}

void aes_indep_mask(uint8_t * m, uint8_t len)
{
}
 80013f6:	4770      	bx	lr

080013f8 <Reset_Handler>:
 80013f8:	2100      	movs	r1, #0
 80013fa:	e003      	b.n	8001404 <LoopCopyDataInit>

080013fc <CopyDataInit>:
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <LoopForever+0x2>)
 80013fe:	585b      	ldr	r3, [r3, r1]
 8001400:	5043      	str	r3, [r0, r1]
 8001402:	3104      	adds	r1, #4

08001404 <LoopCopyDataInit>:
 8001404:	480a      	ldr	r0, [pc, #40]	; (8001430 <LoopForever+0x6>)
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <LoopForever+0xa>)
 8001408:	1842      	adds	r2, r0, r1
 800140a:	429a      	cmp	r2, r3
 800140c:	d3f6      	bcc.n	80013fc <CopyDataInit>
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <LoopForever+0xe>)
 8001410:	e002      	b.n	8001418 <LoopFillZerobss>

08001412 <FillZerobss>:
 8001412:	2300      	movs	r3, #0
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	3204      	adds	r2, #4

08001418 <LoopFillZerobss>:
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <LoopForever+0x12>)
 800141a:	429a      	cmp	r2, r3
 800141c:	d3f9      	bcc.n	8001412 <FillZerobss>
 800141e:	e000      	b.n	8001422 <LoopFillZerobss+0xa>
 8001420:	bf00      	nop
 8001422:	f000 f80f 	bl	8001444 <__libc_init_array>
 8001426:	f7fe ffaf 	bl	8000388 <main>

0800142a <LoopForever>:
 800142a:	e7fe      	b.n	800142a <LoopForever>
 800142c:	080014d4 	.word	0x080014d4
 8001430:	20000000 	.word	0x20000000
 8001434:	20000210 	.word	0x20000210
 8001438:	20000210 	.word	0x20000210
 800143c:	2000042c 	.word	0x2000042c

08001440 <BusFault_Handler>:
 8001440:	e7fe      	b.n	8001440 <BusFault_Handler>
 8001442:	0000      	movs	r0, r0

08001444 <__libc_init_array>:
 8001444:	b570      	push	{r4, r5, r6, lr}
 8001446:	2600      	movs	r6, #0
 8001448:	4d0c      	ldr	r5, [pc, #48]	; (800147c <__libc_init_array+0x38>)
 800144a:	4c0d      	ldr	r4, [pc, #52]	; (8001480 <__libc_init_array+0x3c>)
 800144c:	1b64      	subs	r4, r4, r5
 800144e:	10a4      	asrs	r4, r4, #2
 8001450:	42a6      	cmp	r6, r4
 8001452:	d109      	bne.n	8001468 <__libc_init_array+0x24>
 8001454:	2600      	movs	r6, #0
 8001456:	f000 f823 	bl	80014a0 <_init>
 800145a:	4d0a      	ldr	r5, [pc, #40]	; (8001484 <__libc_init_array+0x40>)
 800145c:	4c0a      	ldr	r4, [pc, #40]	; (8001488 <__libc_init_array+0x44>)
 800145e:	1b64      	subs	r4, r4, r5
 8001460:	10a4      	asrs	r4, r4, #2
 8001462:	42a6      	cmp	r6, r4
 8001464:	d105      	bne.n	8001472 <__libc_init_array+0x2e>
 8001466:	bd70      	pop	{r4, r5, r6, pc}
 8001468:	00b3      	lsls	r3, r6, #2
 800146a:	58eb      	ldr	r3, [r5, r3]
 800146c:	4798      	blx	r3
 800146e:	3601      	adds	r6, #1
 8001470:	e7ee      	b.n	8001450 <__libc_init_array+0xc>
 8001472:	00b3      	lsls	r3, r6, #2
 8001474:	58eb      	ldr	r3, [r5, r3]
 8001476:	4798      	blx	r3
 8001478:	3601      	adds	r6, #1
 800147a:	e7f2      	b.n	8001462 <__libc_init_array+0x1e>
 800147c:	080014cc 	.word	0x080014cc
 8001480:	080014cc 	.word	0x080014cc
 8001484:	080014cc 	.word	0x080014cc
 8001488:	080014d0 	.word	0x080014d0

0800148c <memcpy>:
 800148c:	2300      	movs	r3, #0
 800148e:	b510      	push	{r4, lr}
 8001490:	429a      	cmp	r2, r3
 8001492:	d100      	bne.n	8001496 <memcpy+0xa>
 8001494:	bd10      	pop	{r4, pc}
 8001496:	5ccc      	ldrb	r4, [r1, r3]
 8001498:	54c4      	strb	r4, [r0, r3]
 800149a:	3301      	adds	r3, #1
 800149c:	e7f8      	b.n	8001490 <memcpy+0x4>
 800149e:	0000      	movs	r0, r0

080014a0 <_init>:
 80014a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014a6:	bc08      	pop	{r3}
 80014a8:	469e      	mov	lr, r3
 80014aa:	4770      	bx	lr

080014ac <_fini>:
 80014ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014b2:	bc08      	pop	{r3}
 80014b4:	469e      	mov	lr, r3
 80014b6:	4770      	bx	lr
