
simpleserial-aes-CWNANO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000319c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08003324  08003324  00004324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800366c  0800366c  00005060  2**0
                  CONTENTS
  4 .ARM          00000000  0800366c  0800366c  00005060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800366c  0800366c  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800366c  0800366c  0000466c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003670  08003670  00004670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003674  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000060  080036d4  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000320  080036d4  00005320  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .comment      00000026  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001740b  00000000  00000000  000050ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a02  00000000  00000000  0001c4b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00002b36  00000000  00000000  00021ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008b8  00000000  00000000  000249f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000420  00000000  00000000  000252b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008d41  00000000  00000000  000256d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00002cc7  00000000  00000000  0002e411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000011f8  00000000  00000000  000310d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  000322d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000034  00000000  00000000  00032414  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line_str 00000097  00000000  00000000  00032448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 000039ed  00000000  00000000  000324df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_rnglists 00000271  00000000  00000000  00035ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4804      	ldr	r0, [pc, #16]	@ (800019c <deregister_tm_clones+0x14>)
 800018a:	4b05      	ldr	r3, [pc, #20]	@ (80001a0 <deregister_tm_clones+0x18>)
 800018c:	b510      	push	{r4, lr}
 800018e:	4283      	cmp	r3, r0
 8000190:	d003      	beq.n	800019a <deregister_tm_clones+0x12>
 8000192:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	2b00      	cmp	r3, #0
 8000196:	d000      	beq.n	800019a <deregister_tm_clones+0x12>
 8000198:	4798      	blx	r3
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000060 	.word	0x20000060
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4806      	ldr	r0, [pc, #24]	@ (80001c4 <register_tm_clones+0x1c>)
 80001aa:	4907      	ldr	r1, [pc, #28]	@ (80001c8 <register_tm_clones+0x20>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	108b      	asrs	r3, r1, #2
 80001b0:	0fc9      	lsrs	r1, r1, #31
 80001b2:	18c9      	adds	r1, r1, r3
 80001b4:	b510      	push	{r4, lr}
 80001b6:	1049      	asrs	r1, r1, #1
 80001b8:	d003      	beq.n	80001c2 <register_tm_clones+0x1a>
 80001ba:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <register_tm_clones+0x24>)
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d000      	beq.n	80001c2 <register_tm_clones+0x1a>
 80001c0:	4798      	blx	r3
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000060 	.word	0x20000060
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c07      	ldr	r4, [pc, #28]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d109      	bne.n	80001ee <__do_global_dtors_aux+0x1e>
 80001da:	f7ff ffd5 	bl	8000188 <deregister_tm_clones>
 80001de:	4b05      	ldr	r3, [pc, #20]	@ (80001f4 <__do_global_dtors_aux+0x24>)
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <__do_global_dtors_aux+0x1a>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x28>)
 80001e6:	e000      	b.n	80001ea <__do_global_dtors_aux+0x1a>
 80001e8:	bf00      	nop
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000060 	.word	0x20000060
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800330c 	.word	0x0800330c

080001fc <frame_dummy>:
 80001fc:	4b05      	ldr	r3, [pc, #20]	@ (8000214 <frame_dummy+0x18>)
 80001fe:	b510      	push	{r4, lr}
 8000200:	2b00      	cmp	r3, #0
 8000202:	d003      	beq.n	800020c <frame_dummy+0x10>
 8000204:	4904      	ldr	r1, [pc, #16]	@ (8000218 <frame_dummy+0x1c>)
 8000206:	4805      	ldr	r0, [pc, #20]	@ (800021c <frame_dummy+0x20>)
 8000208:	e000      	b.n	800020c <frame_dummy+0x10>
 800020a:	bf00      	nop
 800020c:	f7ff ffcc 	bl	80001a8 <register_tm_clones>
 8000210:	bd10      	pop	{r4, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	0800330c 	.word	0x0800330c

08000220 <__gnu_thumb1_case_uqi>:
 8000220:	b402      	push	{r1}
 8000222:	4671      	mov	r1, lr
 8000224:	0849      	lsrs	r1, r1, #1
 8000226:	0049      	lsls	r1, r1, #1
 8000228:	5c09      	ldrb	r1, [r1, r0]
 800022a:	0049      	lsls	r1, r1, #1
 800022c:	448e      	add	lr, r1
 800022e:	bc02      	pop	{r1}
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__udivsi3>:
 8000234:	2200      	movs	r2, #0
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d374      	bcc.n	8000326 <__udivsi3+0xf2>
 800023c:	0903      	lsrs	r3, r0, #4
 800023e:	428b      	cmp	r3, r1
 8000240:	d35f      	bcc.n	8000302 <__udivsi3+0xce>
 8000242:	0a03      	lsrs	r3, r0, #8
 8000244:	428b      	cmp	r3, r1
 8000246:	d344      	bcc.n	80002d2 <__udivsi3+0x9e>
 8000248:	0b03      	lsrs	r3, r0, #12
 800024a:	428b      	cmp	r3, r1
 800024c:	d328      	bcc.n	80002a0 <__udivsi3+0x6c>
 800024e:	0c03      	lsrs	r3, r0, #16
 8000250:	428b      	cmp	r3, r1
 8000252:	d30d      	bcc.n	8000270 <__udivsi3+0x3c>
 8000254:	22ff      	movs	r2, #255	@ 0xff
 8000256:	0209      	lsls	r1, r1, #8
 8000258:	ba12      	rev	r2, r2
 800025a:	0c03      	lsrs	r3, r0, #16
 800025c:	428b      	cmp	r3, r1
 800025e:	d302      	bcc.n	8000266 <__udivsi3+0x32>
 8000260:	1212      	asrs	r2, r2, #8
 8000262:	0209      	lsls	r1, r1, #8
 8000264:	d065      	beq.n	8000332 <__udivsi3+0xfe>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d319      	bcc.n	80002a0 <__udivsi3+0x6c>
 800026c:	e000      	b.n	8000270 <__udivsi3+0x3c>
 800026e:	0a09      	lsrs	r1, r1, #8
 8000270:	0bc3      	lsrs	r3, r0, #15
 8000272:	428b      	cmp	r3, r1
 8000274:	d301      	bcc.n	800027a <__udivsi3+0x46>
 8000276:	03cb      	lsls	r3, r1, #15
 8000278:	1ac0      	subs	r0, r0, r3
 800027a:	4152      	adcs	r2, r2
 800027c:	0b83      	lsrs	r3, r0, #14
 800027e:	428b      	cmp	r3, r1
 8000280:	d301      	bcc.n	8000286 <__udivsi3+0x52>
 8000282:	038b      	lsls	r3, r1, #14
 8000284:	1ac0      	subs	r0, r0, r3
 8000286:	4152      	adcs	r2, r2
 8000288:	0b43      	lsrs	r3, r0, #13
 800028a:	428b      	cmp	r3, r1
 800028c:	d301      	bcc.n	8000292 <__udivsi3+0x5e>
 800028e:	034b      	lsls	r3, r1, #13
 8000290:	1ac0      	subs	r0, r0, r3
 8000292:	4152      	adcs	r2, r2
 8000294:	0b03      	lsrs	r3, r0, #12
 8000296:	428b      	cmp	r3, r1
 8000298:	d301      	bcc.n	800029e <__udivsi3+0x6a>
 800029a:	030b      	lsls	r3, r1, #12
 800029c:	1ac0      	subs	r0, r0, r3
 800029e:	4152      	adcs	r2, r2
 80002a0:	0ac3      	lsrs	r3, r0, #11
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d301      	bcc.n	80002aa <__udivsi3+0x76>
 80002a6:	02cb      	lsls	r3, r1, #11
 80002a8:	1ac0      	subs	r0, r0, r3
 80002aa:	4152      	adcs	r2, r2
 80002ac:	0a83      	lsrs	r3, r0, #10
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d301      	bcc.n	80002b6 <__udivsi3+0x82>
 80002b2:	028b      	lsls	r3, r1, #10
 80002b4:	1ac0      	subs	r0, r0, r3
 80002b6:	4152      	adcs	r2, r2
 80002b8:	0a43      	lsrs	r3, r0, #9
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__udivsi3+0x8e>
 80002be:	024b      	lsls	r3, r1, #9
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0a03      	lsrs	r3, r0, #8
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__udivsi3+0x9a>
 80002ca:	020b      	lsls	r3, r1, #8
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	d2cd      	bcs.n	800026e <__udivsi3+0x3a>
 80002d2:	09c3      	lsrs	r3, r0, #7
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__udivsi3+0xa8>
 80002d8:	01cb      	lsls	r3, r1, #7
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0983      	lsrs	r3, r0, #6
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__udivsi3+0xb4>
 80002e4:	018b      	lsls	r3, r1, #6
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0943      	lsrs	r3, r0, #5
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__udivsi3+0xc0>
 80002f0:	014b      	lsls	r3, r1, #5
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0903      	lsrs	r3, r0, #4
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__udivsi3+0xcc>
 80002fc:	010b      	lsls	r3, r1, #4
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	08c3      	lsrs	r3, r0, #3
 8000304:	428b      	cmp	r3, r1
 8000306:	d301      	bcc.n	800030c <__udivsi3+0xd8>
 8000308:	00cb      	lsls	r3, r1, #3
 800030a:	1ac0      	subs	r0, r0, r3
 800030c:	4152      	adcs	r2, r2
 800030e:	0883      	lsrs	r3, r0, #2
 8000310:	428b      	cmp	r3, r1
 8000312:	d301      	bcc.n	8000318 <__udivsi3+0xe4>
 8000314:	008b      	lsls	r3, r1, #2
 8000316:	1ac0      	subs	r0, r0, r3
 8000318:	4152      	adcs	r2, r2
 800031a:	0843      	lsrs	r3, r0, #1
 800031c:	428b      	cmp	r3, r1
 800031e:	d301      	bcc.n	8000324 <__udivsi3+0xf0>
 8000320:	004b      	lsls	r3, r1, #1
 8000322:	1ac0      	subs	r0, r0, r3
 8000324:	4152      	adcs	r2, r2
 8000326:	1a41      	subs	r1, r0, r1
 8000328:	d200      	bcs.n	800032c <__udivsi3+0xf8>
 800032a:	4601      	mov	r1, r0
 800032c:	4152      	adcs	r2, r2
 800032e:	4610      	mov	r0, r2
 8000330:	4770      	bx	lr
 8000332:	e7ff      	b.n	8000334 <__udivsi3+0x100>
 8000334:	b501      	push	{r0, lr}
 8000336:	2000      	movs	r0, #0
 8000338:	f000 f806 	bl	8000348 <__aeabi_idiv0>
 800033c:	bd02      	pop	{r1, pc}
 800033e:	46c0      	nop			@ (mov r8, r8)

08000340 <__aeabi_uidivmod>:
 8000340:	2900      	cmp	r1, #0
 8000342:	d0f7      	beq.n	8000334 <__udivsi3+0x100>
 8000344:	e776      	b.n	8000234 <__udivsi3>
 8000346:	4770      	bx	lr

08000348 <__aeabi_idiv0>:
 8000348:	4770      	bx	lr
 800034a:	46c0      	nop			@ (mov r8, r8)

0800034c <srand>:
 800034c:	4b11      	ldr	r3, [pc, #68]	@ (8000394 <srand+0x48>)
 800034e:	b570      	push	{r4, r5, r6, lr}
 8000350:	681c      	ldr	r4, [r3, #0]
 8000352:	0005      	movs	r5, r0
 8000354:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d003      	beq.n	8000362 <srand+0x16>
 800035a:	2200      	movs	r2, #0
 800035c:	611d      	str	r5, [r3, #16]
 800035e:	615a      	str	r2, [r3, #20]
 8000360:	bd70      	pop	{r4, r5, r6, pc}
 8000362:	2018      	movs	r0, #24
 8000364:	f000 f928 	bl	80005b8 <malloc>
 8000368:	1e03      	subs	r3, r0, #0
 800036a:	6320      	str	r0, [r4, #48]	@ 0x30
 800036c:	d00c      	beq.n	8000388 <srand+0x3c>
 800036e:	4a0a      	ldr	r2, [pc, #40]	@ (8000398 <srand+0x4c>)
 8000370:	2100      	movs	r1, #0
 8000372:	6002      	str	r2, [r0, #0]
 8000374:	4a09      	ldr	r2, [pc, #36]	@ (800039c <srand+0x50>)
 8000376:	6042      	str	r2, [r0, #4]
 8000378:	4a09      	ldr	r2, [pc, #36]	@ (80003a0 <srand+0x54>)
 800037a:	6082      	str	r2, [r0, #8]
 800037c:	220b      	movs	r2, #11
 800037e:	8182      	strh	r2, [r0, #12]
 8000380:	2001      	movs	r0, #1
 8000382:	6118      	str	r0, [r3, #16]
 8000384:	6159      	str	r1, [r3, #20]
 8000386:	e7e8      	b.n	800035a <srand+0xe>
 8000388:	2200      	movs	r2, #0
 800038a:	2146      	movs	r1, #70	@ 0x46
 800038c:	4b05      	ldr	r3, [pc, #20]	@ (80003a4 <srand+0x58>)
 800038e:	4806      	ldr	r0, [pc, #24]	@ (80003a8 <srand+0x5c>)
 8000390:	f000 f850 	bl	8000434 <__assert_func>
 8000394:	20000004 	.word	0x20000004
 8000398:	abcd330e 	.word	0xabcd330e
 800039c:	e66d1234 	.word	0xe66d1234
 80003a0:	0005deec 	.word	0x0005deec
 80003a4:	080035ac 	.word	0x080035ac
 80003a8:	080035c4 	.word	0x080035c4

080003ac <rand>:
 80003ac:	4b18      	ldr	r3, [pc, #96]	@ (8000410 <rand+0x64>)
 80003ae:	b570      	push	{r4, r5, r6, lr}
 80003b0:	681d      	ldr	r5, [r3, #0]
 80003b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80003b4:	2c00      	cmp	r4, #0
 80003b6:	d00e      	beq.n	80003d6 <rand+0x2a>
 80003b8:	6920      	ldr	r0, [r4, #16]
 80003ba:	6961      	ldr	r1, [r4, #20]
 80003bc:	4a15      	ldr	r2, [pc, #84]	@ (8000414 <rand+0x68>)
 80003be:	4b16      	ldr	r3, [pc, #88]	@ (8000418 <rand+0x6c>)
 80003c0:	f001 fec2 	bl	8002148 <__aeabi_lmul>
 80003c4:	2201      	movs	r2, #1
 80003c6:	2300      	movs	r3, #0
 80003c8:	1812      	adds	r2, r2, r0
 80003ca:	414b      	adcs	r3, r1
 80003cc:	0058      	lsls	r0, r3, #1
 80003ce:	0840      	lsrs	r0, r0, #1
 80003d0:	6122      	str	r2, [r4, #16]
 80003d2:	6163      	str	r3, [r4, #20]
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	2018      	movs	r0, #24
 80003d8:	f000 f8ee 	bl	80005b8 <malloc>
 80003dc:	1e04      	subs	r4, r0, #0
 80003de:	6328      	str	r0, [r5, #48]	@ 0x30
 80003e0:	d00f      	beq.n	8000402 <rand+0x56>
 80003e2:	4b0e      	ldr	r3, [pc, #56]	@ (800041c <rand+0x70>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	6003      	str	r3, [r0, #0]
 80003e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000420 <rand+0x74>)
 80003ea:	6043      	str	r3, [r0, #4]
 80003ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000424 <rand+0x78>)
 80003ee:	6083      	str	r3, [r0, #8]
 80003f0:	230b      	movs	r3, #11
 80003f2:	8183      	strh	r3, [r0, #12]
 80003f4:	2300      	movs	r3, #0
 80003f6:	6102      	str	r2, [r0, #16]
 80003f8:	6143      	str	r3, [r0, #20]
 80003fa:	4807      	ldr	r0, [pc, #28]	@ (8000418 <rand+0x6c>)
 80003fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000428 <rand+0x7c>)
 80003fe:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <rand+0x6c>)
 8000400:	e7e6      	b.n	80003d0 <rand+0x24>
 8000402:	2200      	movs	r2, #0
 8000404:	2152      	movs	r1, #82	@ 0x52
 8000406:	4b09      	ldr	r3, [pc, #36]	@ (800042c <rand+0x80>)
 8000408:	4809      	ldr	r0, [pc, #36]	@ (8000430 <rand+0x84>)
 800040a:	f000 f813 	bl	8000434 <__assert_func>
 800040e:	46c0      	nop			@ (mov r8, r8)
 8000410:	20000004 	.word	0x20000004
 8000414:	4c957f2d 	.word	0x4c957f2d
 8000418:	5851f42d 	.word	0x5851f42d
 800041c:	abcd330e 	.word	0xabcd330e
 8000420:	e66d1234 	.word	0xe66d1234
 8000424:	0005deec 	.word	0x0005deec
 8000428:	4c957f2e 	.word	0x4c957f2e
 800042c:	080035ac 	.word	0x080035ac
 8000430:	080035c4 	.word	0x080035c4

08000434 <__assert_func>:
 8000434:	b570      	push	{r4, r5, r6, lr}
 8000436:	0014      	movs	r4, r2
 8000438:	001a      	movs	r2, r3
 800043a:	4b0a      	ldr	r3, [pc, #40]	@ (8000464 <__assert_func+0x30>)
 800043c:	0006      	movs	r6, r0
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	b084      	sub	sp, #16
 8000442:	68d8      	ldr	r0, [r3, #12]
 8000444:	2c00      	cmp	r4, #0
 8000446:	d00a      	beq.n	800045e <__assert_func+0x2a>
 8000448:	4b07      	ldr	r3, [pc, #28]	@ (8000468 <__assert_func+0x34>)
 800044a:	4d08      	ldr	r5, [pc, #32]	@ (800046c <__assert_func+0x38>)
 800044c:	9301      	str	r3, [sp, #4]
 800044e:	9100      	str	r1, [sp, #0]
 8000450:	0033      	movs	r3, r6
 8000452:	0029      	movs	r1, r5
 8000454:	9402      	str	r4, [sp, #8]
 8000456:	f000 f8cf 	bl	80005f8 <fiprintf>
 800045a:	f000 f835 	bl	80004c8 <abort>
 800045e:	4b04      	ldr	r3, [pc, #16]	@ (8000470 <__assert_func+0x3c>)
 8000460:	001c      	movs	r4, r3
 8000462:	e7f2      	b.n	800044a <__assert_func+0x16>
 8000464:	20000004 	.word	0x20000004
 8000468:	080035f0 	.word	0x080035f0
 800046c:	08003600 	.word	0x08003600
 8000470:	080035fc 	.word	0x080035fc

08000474 <__assert>:
 8000474:	0013      	movs	r3, r2
 8000476:	b510      	push	{r4, lr}
 8000478:	2200      	movs	r2, #0
 800047a:	f7ff ffdb 	bl	8000434 <__assert_func>
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__libc_init_array>:
 8000480:	b570      	push	{r4, r5, r6, lr}
 8000482:	4b0d      	ldr	r3, [pc, #52]	@ (80004b8 <__libc_init_array+0x38>)
 8000484:	4d0d      	ldr	r5, [pc, #52]	@ (80004bc <__libc_init_array+0x3c>)
 8000486:	1b5e      	subs	r6, r3, r5
 8000488:	10b6      	asrs	r6, r6, #2
 800048a:	42ab      	cmp	r3, r5
 800048c:	d005      	beq.n	800049a <__libc_init_array+0x1a>
 800048e:	2400      	movs	r4, #0
 8000490:	cd08      	ldmia	r5!, {r3}
 8000492:	3401      	adds	r4, #1
 8000494:	4798      	blx	r3
 8000496:	42a6      	cmp	r6, r4
 8000498:	d8fa      	bhi.n	8000490 <__libc_init_array+0x10>
 800049a:	f002 ff37 	bl	800330c <_init>
 800049e:	4b08      	ldr	r3, [pc, #32]	@ (80004c0 <__libc_init_array+0x40>)
 80004a0:	4d08      	ldr	r5, [pc, #32]	@ (80004c4 <__libc_init_array+0x44>)
 80004a2:	1b5e      	subs	r6, r3, r5
 80004a4:	10b6      	asrs	r6, r6, #2
 80004a6:	42ab      	cmp	r3, r5
 80004a8:	d005      	beq.n	80004b6 <__libc_init_array+0x36>
 80004aa:	2400      	movs	r4, #0
 80004ac:	cd08      	ldmia	r5!, {r3}
 80004ae:	3401      	adds	r4, #1
 80004b0:	4798      	blx	r3
 80004b2:	42a6      	cmp	r6, r4
 80004b4:	d8fa      	bhi.n	80004ac <__libc_init_array+0x2c>
 80004b6:	bd70      	pop	{r4, r5, r6, pc}
 80004b8:	0800366c 	.word	0x0800366c
 80004bc:	0800366c 	.word	0x0800366c
 80004c0:	08003670 	.word	0x08003670
 80004c4:	0800366c 	.word	0x0800366c

080004c8 <abort>:
 80004c8:	2006      	movs	r0, #6
 80004ca:	b510      	push	{r4, lr}
 80004cc:	f000 fcf8 	bl	8000ec0 <raise>
 80004d0:	2001      	movs	r0, #1
 80004d2:	f001 febd 	bl	8002250 <_exit>
 80004d6:	46c0      	nop			@ (mov r8, r8)

080004d8 <time>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	2501      	movs	r5, #1
 80004dc:	4b0b      	ldr	r3, [pc, #44]	@ (800050c <time+0x34>)
 80004de:	b084      	sub	sp, #16
 80004e0:	426d      	negs	r5, r5
 80004e2:	4669      	mov	r1, sp
 80004e4:	0006      	movs	r6, r0
 80004e6:	2200      	movs	r2, #0
 80004e8:	6818      	ldr	r0, [r3, #0]
 80004ea:	9500      	str	r5, [sp, #0]
 80004ec:	9501      	str	r5, [sp, #4]
 80004ee:	f000 fab9 	bl	8000a64 <_gettimeofday_r>
 80004f2:	0029      	movs	r1, r5
 80004f4:	2800      	cmp	r0, #0
 80004f6:	db01      	blt.n	80004fc <time+0x24>
 80004f8:	9d00      	ldr	r5, [sp, #0]
 80004fa:	9901      	ldr	r1, [sp, #4]
 80004fc:	2e00      	cmp	r6, #0
 80004fe:	d001      	beq.n	8000504 <time+0x2c>
 8000500:	6035      	str	r5, [r6, #0]
 8000502:	6071      	str	r1, [r6, #4]
 8000504:	0028      	movs	r0, r5
 8000506:	b004      	add	sp, #16
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	20000004 	.word	0x20000004

08000510 <memset>:
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	0005      	movs	r5, r0
 8000514:	0783      	lsls	r3, r0, #30
 8000516:	d049      	beq.n	80005ac <memset+0x9c>
 8000518:	1e54      	subs	r4, r2, #1
 800051a:	2a00      	cmp	r2, #0
 800051c:	d045      	beq.n	80005aa <memset+0x9a>
 800051e:	0003      	movs	r3, r0
 8000520:	2603      	movs	r6, #3
 8000522:	b2ca      	uxtb	r2, r1
 8000524:	e002      	b.n	800052c <memset+0x1c>
 8000526:	3501      	adds	r5, #1
 8000528:	3c01      	subs	r4, #1
 800052a:	d33e      	bcc.n	80005aa <memset+0x9a>
 800052c:	3301      	adds	r3, #1
 800052e:	702a      	strb	r2, [r5, #0]
 8000530:	4233      	tst	r3, r6
 8000532:	d1f8      	bne.n	8000526 <memset+0x16>
 8000534:	2c03      	cmp	r4, #3
 8000536:	d930      	bls.n	800059a <memset+0x8a>
 8000538:	22ff      	movs	r2, #255	@ 0xff
 800053a:	400a      	ands	r2, r1
 800053c:	0215      	lsls	r5, r2, #8
 800053e:	18ad      	adds	r5, r5, r2
 8000540:	042a      	lsls	r2, r5, #16
 8000542:	18ad      	adds	r5, r5, r2
 8000544:	2c0f      	cmp	r4, #15
 8000546:	d934      	bls.n	80005b2 <memset+0xa2>
 8000548:	0027      	movs	r7, r4
 800054a:	3f10      	subs	r7, #16
 800054c:	093f      	lsrs	r7, r7, #4
 800054e:	013e      	lsls	r6, r7, #4
 8000550:	46b4      	mov	ip, r6
 8000552:	001e      	movs	r6, r3
 8000554:	001a      	movs	r2, r3
 8000556:	3610      	adds	r6, #16
 8000558:	4466      	add	r6, ip
 800055a:	6015      	str	r5, [r2, #0]
 800055c:	6055      	str	r5, [r2, #4]
 800055e:	6095      	str	r5, [r2, #8]
 8000560:	60d5      	str	r5, [r2, #12]
 8000562:	3210      	adds	r2, #16
 8000564:	4296      	cmp	r6, r2
 8000566:	d1f8      	bne.n	800055a <memset+0x4a>
 8000568:	3701      	adds	r7, #1
 800056a:	013f      	lsls	r7, r7, #4
 800056c:	19db      	adds	r3, r3, r7
 800056e:	270f      	movs	r7, #15
 8000570:	220c      	movs	r2, #12
 8000572:	4027      	ands	r7, r4
 8000574:	4022      	ands	r2, r4
 8000576:	003c      	movs	r4, r7
 8000578:	2a00      	cmp	r2, #0
 800057a:	d00e      	beq.n	800059a <memset+0x8a>
 800057c:	1f3e      	subs	r6, r7, #4
 800057e:	08b6      	lsrs	r6, r6, #2
 8000580:	00b4      	lsls	r4, r6, #2
 8000582:	46a4      	mov	ip, r4
 8000584:	001a      	movs	r2, r3
 8000586:	1d1c      	adds	r4, r3, #4
 8000588:	4464      	add	r4, ip
 800058a:	c220      	stmia	r2!, {r5}
 800058c:	42a2      	cmp	r2, r4
 800058e:	d1fc      	bne.n	800058a <memset+0x7a>
 8000590:	2403      	movs	r4, #3
 8000592:	3601      	adds	r6, #1
 8000594:	00b6      	lsls	r6, r6, #2
 8000596:	199b      	adds	r3, r3, r6
 8000598:	403c      	ands	r4, r7
 800059a:	2c00      	cmp	r4, #0
 800059c:	d005      	beq.n	80005aa <memset+0x9a>
 800059e:	b2c9      	uxtb	r1, r1
 80005a0:	191c      	adds	r4, r3, r4
 80005a2:	7019      	strb	r1, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	429c      	cmp	r4, r3
 80005a8:	d1fb      	bne.n	80005a2 <memset+0x92>
 80005aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ac:	0003      	movs	r3, r0
 80005ae:	0014      	movs	r4, r2
 80005b0:	e7c0      	b.n	8000534 <memset+0x24>
 80005b2:	0027      	movs	r7, r4
 80005b4:	e7e2      	b.n	800057c <memset+0x6c>
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <malloc>:
 80005b8:	b510      	push	{r4, lr}
 80005ba:	4b03      	ldr	r3, [pc, #12]	@ (80005c8 <malloc+0x10>)
 80005bc:	0001      	movs	r1, r0
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	f000 ff42 	bl	8001448 <_malloc_r>
 80005c4:	bd10      	pop	{r4, pc}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	20000004 	.word	0x20000004

080005cc <free>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	4b03      	ldr	r3, [pc, #12]	@ (80005dc <free+0x10>)
 80005d0:	0001      	movs	r1, r0
 80005d2:	6818      	ldr	r0, [r3, #0]
 80005d4:	f000 ffc0 	bl	8001558 <_free_r>
 80005d8:	bd10      	pop	{r4, pc}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	20000004 	.word	0x20000004

080005e0 <_fiprintf_r>:
 80005e0:	b40c      	push	{r2, r3}
 80005e2:	b500      	push	{lr}
 80005e4:	b083      	sub	sp, #12
 80005e6:	ab04      	add	r3, sp, #16
 80005e8:	cb04      	ldmia	r3!, {r2}
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	f000 f896 	bl	800071c <_vfiprintf_r>
 80005f0:	b003      	add	sp, #12
 80005f2:	bc08      	pop	{r3}
 80005f4:	b002      	add	sp, #8
 80005f6:	4718      	bx	r3

080005f8 <fiprintf>:
 80005f8:	b40e      	push	{r1, r2, r3}
 80005fa:	b500      	push	{lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	ab03      	add	r3, sp, #12
 8000600:	0001      	movs	r1, r0
 8000602:	4805      	ldr	r0, [pc, #20]	@ (8000618 <fiprintf+0x20>)
 8000604:	cb04      	ldmia	r3!, {r2}
 8000606:	6800      	ldr	r0, [r0, #0]
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	f000 f887 	bl	800071c <_vfiprintf_r>
 800060e:	b002      	add	sp, #8
 8000610:	bc08      	pop	{r3}
 8000612:	b003      	add	sp, #12
 8000614:	4718      	bx	r3
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	20000004 	.word	0x20000004

0800061c <memcpy>:
 800061c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061e:	0005      	movs	r5, r0
 8000620:	2a0f      	cmp	r2, #15
 8000622:	d931      	bls.n	8000688 <memcpy+0x6c>
 8000624:	2703      	movs	r7, #3
 8000626:	003e      	movs	r6, r7
 8000628:	430d      	orrs	r5, r1
 800062a:	000c      	movs	r4, r1
 800062c:	0003      	movs	r3, r0
 800062e:	402e      	ands	r6, r5
 8000630:	422f      	tst	r7, r5
 8000632:	d134      	bne.n	800069e <memcpy+0x82>
 8000634:	0015      	movs	r5, r2
 8000636:	3d10      	subs	r5, #16
 8000638:	092d      	lsrs	r5, r5, #4
 800063a:	46ac      	mov	ip, r5
 800063c:	012f      	lsls	r7, r5, #4
 800063e:	183f      	adds	r7, r7, r0
 8000640:	6865      	ldr	r5, [r4, #4]
 8000642:	605d      	str	r5, [r3, #4]
 8000644:	68a5      	ldr	r5, [r4, #8]
 8000646:	609d      	str	r5, [r3, #8]
 8000648:	68e5      	ldr	r5, [r4, #12]
 800064a:	60dd      	str	r5, [r3, #12]
 800064c:	6825      	ldr	r5, [r4, #0]
 800064e:	3410      	adds	r4, #16
 8000650:	601d      	str	r5, [r3, #0]
 8000652:	001d      	movs	r5, r3
 8000654:	3310      	adds	r3, #16
 8000656:	42bd      	cmp	r5, r7
 8000658:	d1f2      	bne.n	8000640 <memcpy+0x24>
 800065a:	4665      	mov	r5, ip
 800065c:	230f      	movs	r3, #15
 800065e:	240c      	movs	r4, #12
 8000660:	3501      	adds	r5, #1
 8000662:	012d      	lsls	r5, r5, #4
 8000664:	1949      	adds	r1, r1, r5
 8000666:	4013      	ands	r3, r2
 8000668:	1945      	adds	r5, r0, r5
 800066a:	4214      	tst	r4, r2
 800066c:	d01a      	beq.n	80006a4 <memcpy+0x88>
 800066e:	3b04      	subs	r3, #4
 8000670:	089b      	lsrs	r3, r3, #2
 8000672:	3301      	adds	r3, #1
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	598c      	ldr	r4, [r1, r6]
 8000678:	51ac      	str	r4, [r5, r6]
 800067a:	3604      	adds	r6, #4
 800067c:	429e      	cmp	r6, r3
 800067e:	d1fa      	bne.n	8000676 <memcpy+0x5a>
 8000680:	2303      	movs	r3, #3
 8000682:	19ad      	adds	r5, r5, r6
 8000684:	1989      	adds	r1, r1, r6
 8000686:	401a      	ands	r2, r3
 8000688:	1e56      	subs	r6, r2, #1
 800068a:	2a00      	cmp	r2, #0
 800068c:	d006      	beq.n	800069c <memcpy+0x80>
 800068e:	2300      	movs	r3, #0
 8000690:	5ccc      	ldrb	r4, [r1, r3]
 8000692:	001a      	movs	r2, r3
 8000694:	54ec      	strb	r4, [r5, r3]
 8000696:	3301      	adds	r3, #1
 8000698:	4296      	cmp	r6, r2
 800069a:	d1f9      	bne.n	8000690 <memcpy+0x74>
 800069c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800069e:	0005      	movs	r5, r0
 80006a0:	1e56      	subs	r6, r2, #1
 80006a2:	e7f4      	b.n	800068e <memcpy+0x72>
 80006a4:	001a      	movs	r2, r3
 80006a6:	e7ef      	b.n	8000688 <memcpy+0x6c>

080006a8 <__sfputc_r>:
 80006a8:	6893      	ldr	r3, [r2, #8]
 80006aa:	b510      	push	{r4, lr}
 80006ac:	3b01      	subs	r3, #1
 80006ae:	6093      	str	r3, [r2, #8]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	da04      	bge.n	80006be <__sfputc_r+0x16>
 80006b4:	6994      	ldr	r4, [r2, #24]
 80006b6:	42a3      	cmp	r3, r4
 80006b8:	db07      	blt.n	80006ca <__sfputc_r+0x22>
 80006ba:	290a      	cmp	r1, #10
 80006bc:	d005      	beq.n	80006ca <__sfputc_r+0x22>
 80006be:	6813      	ldr	r3, [r2, #0]
 80006c0:	1c58      	adds	r0, r3, #1
 80006c2:	6010      	str	r0, [r2, #0]
 80006c4:	0008      	movs	r0, r1
 80006c6:	7019      	strb	r1, [r3, #0]
 80006c8:	bd10      	pop	{r4, pc}
 80006ca:	f000 f971 	bl	80009b0 <__swbuf_r>
 80006ce:	e7fb      	b.n	80006c8 <__sfputc_r+0x20>

080006d0 <__sfputs_r>:
 80006d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d2:	0006      	movs	r6, r0
 80006d4:	000f      	movs	r7, r1
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d00d      	beq.n	80006f6 <__sfputs_r+0x26>
 80006da:	0014      	movs	r4, r2
 80006dc:	18d5      	adds	r5, r2, r3
 80006de:	e002      	b.n	80006e6 <__sfputs_r+0x16>
 80006e0:	3401      	adds	r4, #1
 80006e2:	42ac      	cmp	r4, r5
 80006e4:	d007      	beq.n	80006f6 <__sfputs_r+0x26>
 80006e6:	003a      	movs	r2, r7
 80006e8:	0030      	movs	r0, r6
 80006ea:	7821      	ldrb	r1, [r4, #0]
 80006ec:	f7ff ffdc 	bl	80006a8 <__sfputc_r>
 80006f0:	1c43      	adds	r3, r0, #1
 80006f2:	d1f5      	bne.n	80006e0 <__sfputs_r+0x10>
 80006f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006f6:	2000      	movs	r0, #0
 80006f8:	e7fc      	b.n	80006f4 <__sfputs_r+0x24>
 80006fa:	46c0      	nop			@ (mov r8, r8)

080006fc <__sprint_r>:
 80006fc:	b510      	push	{r4, lr}
 80006fe:	0014      	movs	r4, r2
 8000700:	6892      	ldr	r2, [r2, #8]
 8000702:	2300      	movs	r3, #0
 8000704:	2a00      	cmp	r2, #0
 8000706:	d005      	beq.n	8000714 <__sprint_r+0x18>
 8000708:	0022      	movs	r2, r4
 800070a:	f000 f9bf 	bl	8000a8c <__sfvwrite_r>
 800070e:	2200      	movs	r2, #0
 8000710:	0003      	movs	r3, r0
 8000712:	60a2      	str	r2, [r4, #8]
 8000714:	2200      	movs	r2, #0
 8000716:	0018      	movs	r0, r3
 8000718:	6062      	str	r2, [r4, #4]
 800071a:	bd10      	pop	{r4, pc}

0800071c <_vfiprintf_r>:
 800071c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071e:	464e      	mov	r6, r9
 8000720:	4645      	mov	r5, r8
 8000722:	46de      	mov	lr, fp
 8000724:	4657      	mov	r7, sl
 8000726:	b5e0      	push	{r5, r6, r7, lr}
 8000728:	4681      	mov	r9, r0
 800072a:	4688      	mov	r8, r1
 800072c:	0014      	movs	r4, r2
 800072e:	001e      	movs	r6, r3
 8000730:	b09f      	sub	sp, #124	@ 0x7c
 8000732:	2800      	cmp	r0, #0
 8000734:	d003      	beq.n	800073e <_vfiprintf_r+0x22>
 8000736:	6a03      	ldr	r3, [r0, #32]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d100      	bne.n	800073e <_vfiprintf_r+0x22>
 800073c:	e11f      	b.n	800097e <_vfiprintf_r+0x262>
 800073e:	4643      	mov	r3, r8
 8000740:	899b      	ldrh	r3, [r3, #12]
 8000742:	071b      	lsls	r3, r3, #28
 8000744:	d400      	bmi.n	8000748 <_vfiprintf_r+0x2c>
 8000746:	e08f      	b.n	8000868 <_vfiprintf_r+0x14c>
 8000748:	4643      	mov	r3, r8
 800074a:	691b      	ldr	r3, [r3, #16]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d100      	bne.n	8000752 <_vfiprintf_r+0x36>
 8000750:	e08a      	b.n	8000868 <_vfiprintf_r+0x14c>
 8000752:	2300      	movs	r3, #0
 8000754:	ad06      	add	r5, sp, #24
 8000756:	616b      	str	r3, [r5, #20]
 8000758:	3320      	adds	r3, #32
 800075a:	766b      	strb	r3, [r5, #25]
 800075c:	3310      	adds	r3, #16
 800075e:	76ab      	strb	r3, [r5, #26]
 8000760:	4653      	mov	r3, sl
 8000762:	46a3      	mov	fp, r4
 8000764:	4f87      	ldr	r7, [pc, #540]	@ (8000984 <_vfiprintf_r+0x268>)
 8000766:	9605      	str	r6, [sp, #20]
 8000768:	9303      	str	r3, [sp, #12]
 800076a:	465b      	mov	r3, fp
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d100      	bne.n	8000774 <_vfiprintf_r+0x58>
 8000772:	e09b      	b.n	80008ac <_vfiprintf_r+0x190>
 8000774:	465c      	mov	r4, fp
 8000776:	e003      	b.n	8000780 <_vfiprintf_r+0x64>
 8000778:	7863      	ldrb	r3, [r4, #1]
 800077a:	3401      	adds	r4, #1
 800077c:	2b00      	cmp	r3, #0
 800077e:	d07d      	beq.n	800087c <_vfiprintf_r+0x160>
 8000780:	2b25      	cmp	r3, #37	@ 0x25
 8000782:	d1f9      	bne.n	8000778 <_vfiprintf_r+0x5c>
 8000784:	465b      	mov	r3, fp
 8000786:	1ae3      	subs	r3, r4, r3
 8000788:	469a      	mov	sl, r3
 800078a:	455c      	cmp	r4, fp
 800078c:	d17b      	bne.n	8000886 <_vfiprintf_r+0x16a>
 800078e:	7823      	ldrb	r3, [r4, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d100      	bne.n	8000796 <_vfiprintf_r+0x7a>
 8000794:	e08a      	b.n	80008ac <_vfiprintf_r+0x190>
 8000796:	2301      	movs	r3, #1
 8000798:	2200      	movs	r2, #0
 800079a:	425b      	negs	r3, r3
 800079c:	9206      	str	r2, [sp, #24]
 800079e:	9307      	str	r3, [sp, #28]
 80007a0:	2200      	movs	r2, #0
 80007a2:	2300      	movs	r3, #0
 80007a4:	9208      	str	r2, [sp, #32]
 80007a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80007a8:	2300      	movs	r3, #0
 80007aa:	3243      	adds	r2, #67	@ 0x43
 80007ac:	54ab      	strb	r3, [r5, r2]
 80007ae:	65ab      	str	r3, [r5, #88]	@ 0x58
 80007b0:	3301      	adds	r3, #1
 80007b2:	469b      	mov	fp, r3
 80007b4:	3401      	adds	r4, #1
 80007b6:	e006      	b.n	80007c6 <_vfiprintf_r+0xaa>
 80007b8:	465a      	mov	r2, fp
 80007ba:	1bc0      	subs	r0, r0, r7
 80007bc:	4082      	lsls	r2, r0
 80007be:	001c      	movs	r4, r3
 80007c0:	6829      	ldr	r1, [r5, #0]
 80007c2:	430a      	orrs	r2, r1
 80007c4:	602a      	str	r2, [r5, #0]
 80007c6:	2205      	movs	r2, #5
 80007c8:	0038      	movs	r0, r7
 80007ca:	7821      	ldrb	r1, [r4, #0]
 80007cc:	f001 fa9c 	bl	8001d08 <memchr>
 80007d0:	1c63      	adds	r3, r4, #1
 80007d2:	001e      	movs	r6, r3
 80007d4:	2800      	cmp	r0, #0
 80007d6:	d1ef      	bne.n	80007b8 <_vfiprintf_r+0x9c>
 80007d8:	682a      	ldr	r2, [r5, #0]
 80007da:	06d1      	lsls	r1, r2, #27
 80007dc:	d502      	bpl.n	80007e4 <_vfiprintf_r+0xc8>
 80007de:	2143      	movs	r1, #67	@ 0x43
 80007e0:	3020      	adds	r0, #32
 80007e2:	5468      	strb	r0, [r5, r1]
 80007e4:	0711      	lsls	r1, r2, #28
 80007e6:	d502      	bpl.n	80007ee <_vfiprintf_r+0xd2>
 80007e8:	2143      	movs	r1, #67	@ 0x43
 80007ea:	202b      	movs	r0, #43	@ 0x2b
 80007ec:	5468      	strb	r0, [r5, r1]
 80007ee:	7821      	ldrb	r1, [r4, #0]
 80007f0:	292a      	cmp	r1, #42	@ 0x2a
 80007f2:	d167      	bne.n	80008c4 <_vfiprintf_r+0x1a8>
 80007f4:	9b05      	ldr	r3, [sp, #20]
 80007f6:	1d19      	adds	r1, r3, #4
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	9105      	str	r1, [sp, #20]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	da00      	bge.n	8000802 <_vfiprintf_r+0xe6>
 8000800:	e098      	b.n	8000934 <_vfiprintf_r+0x218>
 8000802:	60eb      	str	r3, [r5, #12]
 8000804:	7861      	ldrb	r1, [r4, #1]
 8000806:	292e      	cmp	r1, #46	@ 0x2e
 8000808:	d100      	bne.n	800080c <_vfiprintf_r+0xf0>
 800080a:	e072      	b.n	80008f2 <_vfiprintf_r+0x1d6>
 800080c:	4c5e      	ldr	r4, [pc, #376]	@ (8000988 <_vfiprintf_r+0x26c>)
 800080e:	2203      	movs	r2, #3
 8000810:	0020      	movs	r0, r4
 8000812:	f001 fa79 	bl	8001d08 <memchr>
 8000816:	2800      	cmp	r0, #0
 8000818:	d006      	beq.n	8000828 <_vfiprintf_r+0x10c>
 800081a:	2340      	movs	r3, #64	@ 0x40
 800081c:	1b00      	subs	r0, r0, r4
 800081e:	4083      	lsls	r3, r0
 8000820:	682a      	ldr	r2, [r5, #0]
 8000822:	3601      	adds	r6, #1
 8000824:	4313      	orrs	r3, r2
 8000826:	602b      	str	r3, [r5, #0]
 8000828:	7831      	ldrb	r1, [r6, #0]
 800082a:	1c73      	adds	r3, r6, #1
 800082c:	2206      	movs	r2, #6
 800082e:	4857      	ldr	r0, [pc, #348]	@ (800098c <_vfiprintf_r+0x270>)
 8000830:	469b      	mov	fp, r3
 8000832:	7629      	strb	r1, [r5, #24]
 8000834:	f001 fa68 	bl	8001d08 <memchr>
 8000838:	2800      	cmp	r0, #0
 800083a:	d100      	bne.n	800083e <_vfiprintf_r+0x122>
 800083c:	e080      	b.n	8000940 <_vfiprintf_r+0x224>
 800083e:	4b54      	ldr	r3, [pc, #336]	@ (8000990 <_vfiprintf_r+0x274>)
 8000840:	2b00      	cmp	r3, #0
 8000842:	d067      	beq.n	8000914 <_vfiprintf_r+0x1f8>
 8000844:	aa05      	add	r2, sp, #20
 8000846:	9200      	str	r2, [sp, #0]
 8000848:	0029      	movs	r1, r5
 800084a:	4642      	mov	r2, r8
 800084c:	4648      	mov	r0, r9
 800084e:	4b51      	ldr	r3, [pc, #324]	@ (8000994 <_vfiprintf_r+0x278>)
 8000850:	e000      	b.n	8000854 <_vfiprintf_r+0x138>
 8000852:	bf00      	nop
 8000854:	9003      	str	r0, [sp, #12]
 8000856:	9b03      	ldr	r3, [sp, #12]
 8000858:	3301      	adds	r3, #1
 800085a:	d027      	beq.n	80008ac <_vfiprintf_r+0x190>
 800085c:	9a03      	ldr	r2, [sp, #12]
 800085e:	696b      	ldr	r3, [r5, #20]
 8000860:	4694      	mov	ip, r2
 8000862:	4463      	add	r3, ip
 8000864:	616b      	str	r3, [r5, #20]
 8000866:	e780      	b.n	800076a <_vfiprintf_r+0x4e>
 8000868:	4641      	mov	r1, r8
 800086a:	4648      	mov	r0, r9
 800086c:	f000 ff4a 	bl	8001704 <__swsetup_r>
 8000870:	2800      	cmp	r0, #0
 8000872:	d100      	bne.n	8000876 <_vfiprintf_r+0x15a>
 8000874:	e76d      	b.n	8000752 <_vfiprintf_r+0x36>
 8000876:	2001      	movs	r0, #1
 8000878:	4240      	negs	r0, r0
 800087a:	e01c      	b.n	80008b6 <_vfiprintf_r+0x19a>
 800087c:	465b      	mov	r3, fp
 800087e:	1ae3      	subs	r3, r4, r3
 8000880:	469a      	mov	sl, r3
 8000882:	455c      	cmp	r4, fp
 8000884:	d012      	beq.n	80008ac <_vfiprintf_r+0x190>
 8000886:	003b      	movs	r3, r7
 8000888:	2600      	movs	r6, #0
 800088a:	4647      	mov	r7, r8
 800088c:	46a0      	mov	r8, r4
 800088e:	464c      	mov	r4, r9
 8000890:	4699      	mov	r9, r3
 8000892:	e002      	b.n	800089a <_vfiprintf_r+0x17e>
 8000894:	3601      	adds	r6, #1
 8000896:	45b2      	cmp	sl, r6
 8000898:	d943      	bls.n	8000922 <_vfiprintf_r+0x206>
 800089a:	465b      	mov	r3, fp
 800089c:	003a      	movs	r2, r7
 800089e:	0020      	movs	r0, r4
 80008a0:	5d99      	ldrb	r1, [r3, r6]
 80008a2:	f7ff ff01 	bl	80006a8 <__sfputc_r>
 80008a6:	3001      	adds	r0, #1
 80008a8:	d1f4      	bne.n	8000894 <_vfiprintf_r+0x178>
 80008aa:	46b8      	mov	r8, r7
 80008ac:	4643      	mov	r3, r8
 80008ae:	899b      	ldrh	r3, [r3, #12]
 80008b0:	065b      	lsls	r3, r3, #25
 80008b2:	d4e0      	bmi.n	8000876 <_vfiprintf_r+0x15a>
 80008b4:	6968      	ldr	r0, [r5, #20]
 80008b6:	b01f      	add	sp, #124	@ 0x7c
 80008b8:	bcf0      	pop	{r4, r5, r6, r7}
 80008ba:	46bb      	mov	fp, r7
 80008bc:	46b2      	mov	sl, r6
 80008be:	46a9      	mov	r9, r5
 80008c0:	46a0      	mov	r8, r4
 80008c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008c4:	0008      	movs	r0, r1
 80008c6:	3830      	subs	r0, #48	@ 0x30
 80008c8:	0026      	movs	r6, r4
 80008ca:	2809      	cmp	r0, #9
 80008cc:	d89b      	bhi.n	8000806 <_vfiprintf_r+0xea>
 80008ce:	68ea      	ldr	r2, [r5, #12]
 80008d0:	0014      	movs	r4, r2
 80008d2:	e000      	b.n	80008d6 <_vfiprintf_r+0x1ba>
 80008d4:	3301      	adds	r3, #1
 80008d6:	00a2      	lsls	r2, r4, #2
 80008d8:	1912      	adds	r2, r2, r4
 80008da:	7819      	ldrb	r1, [r3, #0]
 80008dc:	0052      	lsls	r2, r2, #1
 80008de:	1814      	adds	r4, r2, r0
 80008e0:	0008      	movs	r0, r1
 80008e2:	3830      	subs	r0, #48	@ 0x30
 80008e4:	2809      	cmp	r0, #9
 80008e6:	d9f5      	bls.n	80008d4 <_vfiprintf_r+0x1b8>
 80008e8:	001e      	movs	r6, r3
 80008ea:	60ec      	str	r4, [r5, #12]
 80008ec:	292e      	cmp	r1, #46	@ 0x2e
 80008ee:	d000      	beq.n	80008f2 <_vfiprintf_r+0x1d6>
 80008f0:	e78c      	b.n	800080c <_vfiprintf_r+0xf0>
 80008f2:	7871      	ldrb	r1, [r6, #1]
 80008f4:	292a      	cmp	r1, #42	@ 0x2a
 80008f6:	d12d      	bne.n	8000954 <_vfiprintf_r+0x238>
 80008f8:	9b05      	ldr	r3, [sp, #20]
 80008fa:	1cb0      	adds	r0, r6, #2
 80008fc:	1d1a      	adds	r2, r3, #4
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	9205      	str	r2, [sp, #20]
 8000902:	606b      	str	r3, [r5, #4]
 8000904:	2b00      	cmp	r3, #0
 8000906:	da02      	bge.n	800090e <_vfiprintf_r+0x1f2>
 8000908:	2301      	movs	r3, #1
 800090a:	425b      	negs	r3, r3
 800090c:	606b      	str	r3, [r5, #4]
 800090e:	78b1      	ldrb	r1, [r6, #2]
 8000910:	0006      	movs	r6, r0
 8000912:	e77b      	b.n	800080c <_vfiprintf_r+0xf0>
 8000914:	2207      	movs	r2, #7
 8000916:	9b05      	ldr	r3, [sp, #20]
 8000918:	3307      	adds	r3, #7
 800091a:	4393      	bics	r3, r2
 800091c:	3308      	adds	r3, #8
 800091e:	9305      	str	r3, [sp, #20]
 8000920:	e79c      	b.n	800085c <_vfiprintf_r+0x140>
 8000922:	464b      	mov	r3, r9
 8000924:	696a      	ldr	r2, [r5, #20]
 8000926:	46a1      	mov	r9, r4
 8000928:	4452      	add	r2, sl
 800092a:	4644      	mov	r4, r8
 800092c:	616a      	str	r2, [r5, #20]
 800092e:	46b8      	mov	r8, r7
 8000930:	001f      	movs	r7, r3
 8000932:	e72c      	b.n	800078e <_vfiprintf_r+0x72>
 8000934:	425b      	negs	r3, r3
 8000936:	60eb      	str	r3, [r5, #12]
 8000938:	2302      	movs	r3, #2
 800093a:	431a      	orrs	r2, r3
 800093c:	602a      	str	r2, [r5, #0]
 800093e:	e761      	b.n	8000804 <_vfiprintf_r+0xe8>
 8000940:	aa05      	add	r2, sp, #20
 8000942:	9200      	str	r2, [sp, #0]
 8000944:	0029      	movs	r1, r5
 8000946:	4642      	mov	r2, r8
 8000948:	4648      	mov	r0, r9
 800094a:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <_vfiprintf_r+0x278>)
 800094c:	f001 f820 	bl	8001990 <_printf_i>
 8000950:	9003      	str	r0, [sp, #12]
 8000952:	e780      	b.n	8000856 <_vfiprintf_r+0x13a>
 8000954:	0008      	movs	r0, r1
 8000956:	2300      	movs	r3, #0
 8000958:	3830      	subs	r0, #48	@ 0x30
 800095a:	3601      	adds	r6, #1
 800095c:	606b      	str	r3, [r5, #4]
 800095e:	2809      	cmp	r0, #9
 8000960:	d900      	bls.n	8000964 <_vfiprintf_r+0x248>
 8000962:	e753      	b.n	800080c <_vfiprintf_r+0xf0>
 8000964:	001a      	movs	r2, r3
 8000966:	0093      	lsls	r3, r2, #2
 8000968:	189b      	adds	r3, r3, r2
 800096a:	7871      	ldrb	r1, [r6, #1]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	181a      	adds	r2, r3, r0
 8000970:	0008      	movs	r0, r1
 8000972:	3830      	subs	r0, #48	@ 0x30
 8000974:	3601      	adds	r6, #1
 8000976:	2809      	cmp	r0, #9
 8000978:	d9f5      	bls.n	8000966 <_vfiprintf_r+0x24a>
 800097a:	606a      	str	r2, [r5, #4]
 800097c:	e746      	b.n	800080c <_vfiprintf_r+0xf0>
 800097e:	f000 fc3d 	bl	80011fc <__sinit>
 8000982:	e6dc      	b.n	800073e <_vfiprintf_r+0x22>
 8000984:	08003630 	.word	0x08003630
 8000988:	08003638 	.word	0x08003638
 800098c:	0800363c 	.word	0x0800363c
 8000990:	00000000 	.word	0x00000000
 8000994:	080006d1 	.word	0x080006d1

08000998 <vfiprintf>:
 8000998:	b510      	push	{r4, lr}
 800099a:	0004      	movs	r4, r0
 800099c:	0013      	movs	r3, r2
 800099e:	4a03      	ldr	r2, [pc, #12]	@ (80009ac <vfiprintf+0x14>)
 80009a0:	6810      	ldr	r0, [r2, #0]
 80009a2:	000a      	movs	r2, r1
 80009a4:	0021      	movs	r1, r4
 80009a6:	f7ff feb9 	bl	800071c <_vfiprintf_r>
 80009aa:	bd10      	pop	{r4, pc}
 80009ac:	20000004 	.word	0x20000004

080009b0 <__swbuf_r>:
 80009b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b2:	0005      	movs	r5, r0
 80009b4:	000e      	movs	r6, r1
 80009b6:	0014      	movs	r4, r2
 80009b8:	2800      	cmp	r0, #0
 80009ba:	d002      	beq.n	80009c2 <__swbuf_r+0x12>
 80009bc:	6a03      	ldr	r3, [r0, #32]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d041      	beq.n	8000a46 <__swbuf_r+0x96>
 80009c2:	69a3      	ldr	r3, [r4, #24]
 80009c4:	60a3      	str	r3, [r4, #8]
 80009c6:	89a3      	ldrh	r3, [r4, #12]
 80009c8:	071b      	lsls	r3, r3, #28
 80009ca:	d51b      	bpl.n	8000a04 <__swbuf_r+0x54>
 80009cc:	6923      	ldr	r3, [r4, #16]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d018      	beq.n	8000a04 <__swbuf_r+0x54>
 80009d2:	22ff      	movs	r2, #255	@ 0xff
 80009d4:	b2f7      	uxtb	r7, r6
 80009d6:	6961      	ldr	r1, [r4, #20]
 80009d8:	4016      	ands	r6, r2
 80009da:	6822      	ldr	r2, [r4, #0]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	4299      	cmp	r1, r3
 80009e0:	dd1f      	ble.n	8000a22 <__swbuf_r+0x72>
 80009e2:	3301      	adds	r3, #1
 80009e4:	68a1      	ldr	r1, [r4, #8]
 80009e6:	3901      	subs	r1, #1
 80009e8:	60a1      	str	r1, [r4, #8]
 80009ea:	1c51      	adds	r1, r2, #1
 80009ec:	6021      	str	r1, [r4, #0]
 80009ee:	7017      	strb	r7, [r2, #0]
 80009f0:	6962      	ldr	r2, [r4, #20]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d01e      	beq.n	8000a34 <__swbuf_r+0x84>
 80009f6:	89a3      	ldrh	r3, [r4, #12]
 80009f8:	07db      	lsls	r3, r3, #31
 80009fa:	d501      	bpl.n	8000a00 <__swbuf_r+0x50>
 80009fc:	2e0a      	cmp	r6, #10
 80009fe:	d019      	beq.n	8000a34 <__swbuf_r+0x84>
 8000a00:	0030      	movs	r0, r6
 8000a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a04:	0021      	movs	r1, r4
 8000a06:	0028      	movs	r0, r5
 8000a08:	f000 fe7c 	bl	8001704 <__swsetup_r>
 8000a0c:	2800      	cmp	r0, #0
 8000a0e:	d117      	bne.n	8000a40 <__swbuf_r+0x90>
 8000a10:	22ff      	movs	r2, #255	@ 0xff
 8000a12:	6923      	ldr	r3, [r4, #16]
 8000a14:	b2f7      	uxtb	r7, r6
 8000a16:	6961      	ldr	r1, [r4, #20]
 8000a18:	4016      	ands	r6, r2
 8000a1a:	6822      	ldr	r2, [r4, #0]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	dcdf      	bgt.n	80009e2 <__swbuf_r+0x32>
 8000a22:	0021      	movs	r1, r4
 8000a24:	0028      	movs	r0, r5
 8000a26:	f000 fca7 	bl	8001378 <_fflush_r>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	d108      	bne.n	8000a40 <__swbuf_r+0x90>
 8000a2e:	2301      	movs	r3, #1
 8000a30:	6822      	ldr	r2, [r4, #0]
 8000a32:	e7d7      	b.n	80009e4 <__swbuf_r+0x34>
 8000a34:	0021      	movs	r1, r4
 8000a36:	0028      	movs	r0, r5
 8000a38:	f000 fc9e 	bl	8001378 <_fflush_r>
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	d0df      	beq.n	8000a00 <__swbuf_r+0x50>
 8000a40:	2601      	movs	r6, #1
 8000a42:	4276      	negs	r6, r6
 8000a44:	e7dc      	b.n	8000a00 <__swbuf_r+0x50>
 8000a46:	f000 fbd9 	bl	80011fc <__sinit>
 8000a4a:	e7ba      	b.n	80009c2 <__swbuf_r+0x12>

08000a4c <__swbuf>:
 8000a4c:	0003      	movs	r3, r0
 8000a4e:	b510      	push	{r4, lr}
 8000a50:	000a      	movs	r2, r1
 8000a52:	4903      	ldr	r1, [pc, #12]	@ (8000a60 <__swbuf+0x14>)
 8000a54:	6808      	ldr	r0, [r1, #0]
 8000a56:	0019      	movs	r1, r3
 8000a58:	f7ff ffaa 	bl	80009b0 <__swbuf_r>
 8000a5c:	bd10      	pop	{r4, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	20000004 	.word	0x20000004

08000a64 <_gettimeofday_r>:
 8000a64:	2300      	movs	r3, #0
 8000a66:	b570      	push	{r4, r5, r6, lr}
 8000a68:	4d07      	ldr	r5, [pc, #28]	@ (8000a88 <_gettimeofday_r+0x24>)
 8000a6a:	0004      	movs	r4, r0
 8000a6c:	0008      	movs	r0, r1
 8000a6e:	0011      	movs	r1, r2
 8000a70:	602b      	str	r3, [r5, #0]
 8000a72:	f001 fbaf 	bl	80021d4 <_gettimeofday>
 8000a76:	1c43      	adds	r3, r0, #1
 8000a78:	d000      	beq.n	8000a7c <_gettimeofday_r+0x18>
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
 8000a7c:	682b      	ldr	r3, [r5, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0fb      	beq.n	8000a7a <_gettimeofday_r+0x16>
 8000a82:	6023      	str	r3, [r4, #0]
 8000a84:	e7f9      	b.n	8000a7a <_gettimeofday_r+0x16>
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	20000318 	.word	0x20000318

08000a8c <__sfvwrite_r>:
 8000a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8e:	464e      	mov	r6, r9
 8000a90:	46de      	mov	lr, fp
 8000a92:	4657      	mov	r7, sl
 8000a94:	4645      	mov	r5, r8
 8000a96:	b5e0      	push	{r5, r6, r7, lr}
 8000a98:	6893      	ldr	r3, [r2, #8]
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	000c      	movs	r4, r1
 8000a9e:	4691      	mov	r9, r2
 8000aa0:	9000      	str	r0, [sp, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d05f      	beq.n	8000b66 <__sfvwrite_r+0xda>
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	5eca      	ldrsh	r2, [r1, r3]
 8000aaa:	0713      	lsls	r3, r2, #28
 8000aac:	d563      	bpl.n	8000b76 <__sfvwrite_r+0xea>
 8000aae:	690b      	ldr	r3, [r1, #16]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d060      	beq.n	8000b76 <__sfvwrite_r+0xea>
 8000ab4:	464b      	mov	r3, r9
 8000ab6:	681f      	ldr	r7, [r3, #0]
 8000ab8:	0793      	lsls	r3, r2, #30
 8000aba:	d523      	bpl.n	8000b04 <__sfvwrite_r+0x78>
 8000abc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000abe:	2600      	movs	r6, #0
 8000ac0:	469a      	mov	sl, r3
 8000ac2:	4bb3      	ldr	r3, [pc, #716]	@ (8000d90 <__sfvwrite_r+0x304>)
 8000ac4:	2500      	movs	r5, #0
 8000ac6:	4698      	mov	r8, r3
 8000ac8:	6a21      	ldr	r1, [r4, #32]
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d016      	beq.n	8000afc <__sfvwrite_r+0x70>
 8000ace:	002b      	movs	r3, r5
 8000ad0:	4545      	cmp	r5, r8
 8000ad2:	d900      	bls.n	8000ad6 <__sfvwrite_r+0x4a>
 8000ad4:	4bae      	ldr	r3, [pc, #696]	@ (8000d90 <__sfvwrite_r+0x304>)
 8000ad6:	0032      	movs	r2, r6
 8000ad8:	9800      	ldr	r0, [sp, #0]
 8000ada:	47d0      	blx	sl
 8000adc:	2800      	cmp	r0, #0
 8000ade:	dd59      	ble.n	8000b94 <__sfvwrite_r+0x108>
 8000ae0:	464b      	mov	r3, r9
 8000ae2:	464a      	mov	r2, r9
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	1836      	adds	r6, r6, r0
 8000ae8:	1a1b      	subs	r3, r3, r0
 8000aea:	1a2d      	subs	r5, r5, r0
 8000aec:	6093      	str	r3, [r2, #8]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d039      	beq.n	8000b66 <__sfvwrite_r+0xda>
 8000af2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000af4:	6a21      	ldr	r1, [r4, #32]
 8000af6:	469a      	mov	sl, r3
 8000af8:	2d00      	cmp	r5, #0
 8000afa:	d1e8      	bne.n	8000ace <__sfvwrite_r+0x42>
 8000afc:	683e      	ldr	r6, [r7, #0]
 8000afe:	687d      	ldr	r5, [r7, #4]
 8000b00:	3708      	adds	r7, #8
 8000b02:	e7e2      	b.n	8000aca <__sfvwrite_r+0x3e>
 8000b04:	07d3      	lsls	r3, r2, #31
 8000b06:	d562      	bpl.n	8000bce <__sfvwrite_r+0x142>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	46b8      	mov	r8, r7
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	469a      	mov	sl, r3
 8000b10:	2600      	movs	r6, #0
 8000b12:	001f      	movs	r7, r3
 8000b14:	2e00      	cmp	r6, #0
 8000b16:	d045      	beq.n	8000ba4 <__sfvwrite_r+0x118>
 8000b18:	2800      	cmp	r0, #0
 8000b1a:	d04c      	beq.n	8000bb6 <__sfvwrite_r+0x12a>
 8000b1c:	003b      	movs	r3, r7
 8000b1e:	46b3      	mov	fp, r6
 8000b20:	429e      	cmp	r6, r3
 8000b22:	d900      	bls.n	8000b26 <__sfvwrite_r+0x9a>
 8000b24:	469b      	mov	fp, r3
 8000b26:	6820      	ldr	r0, [r4, #0]
 8000b28:	6922      	ldr	r2, [r4, #16]
 8000b2a:	68a5      	ldr	r5, [r4, #8]
 8000b2c:	6963      	ldr	r3, [r4, #20]
 8000b2e:	4290      	cmp	r0, r2
 8000b30:	d903      	bls.n	8000b3a <__sfvwrite_r+0xae>
 8000b32:	18ed      	adds	r5, r5, r3
 8000b34:	45ab      	cmp	fp, r5
 8000b36:	dd00      	ble.n	8000b3a <__sfvwrite_r+0xae>
 8000b38:	e0fe      	b.n	8000d38 <__sfvwrite_r+0x2ac>
 8000b3a:	455b      	cmp	r3, fp
 8000b3c:	dd00      	ble.n	8000b40 <__sfvwrite_r+0xb4>
 8000b3e:	e0ee      	b.n	8000d1e <__sfvwrite_r+0x292>
 8000b40:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8000b42:	4652      	mov	r2, sl
 8000b44:	6a21      	ldr	r1, [r4, #32]
 8000b46:	9800      	ldr	r0, [sp, #0]
 8000b48:	47a8      	blx	r5
 8000b4a:	1e05      	subs	r5, r0, #0
 8000b4c:	dd22      	ble.n	8000b94 <__sfvwrite_r+0x108>
 8000b4e:	2001      	movs	r0, #1
 8000b50:	1b7f      	subs	r7, r7, r5
 8000b52:	d019      	beq.n	8000b88 <__sfvwrite_r+0xfc>
 8000b54:	464b      	mov	r3, r9
 8000b56:	464a      	mov	r2, r9
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	44aa      	add	sl, r5
 8000b5c:	1b5b      	subs	r3, r3, r5
 8000b5e:	1b76      	subs	r6, r6, r5
 8000b60:	6093      	str	r3, [r2, #8]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d1d6      	bne.n	8000b14 <__sfvwrite_r+0x88>
 8000b66:	2000      	movs	r0, #0
 8000b68:	b003      	add	sp, #12
 8000b6a:	bcf0      	pop	{r4, r5, r6, r7}
 8000b6c:	46bb      	mov	fp, r7
 8000b6e:	46b2      	mov	sl, r6
 8000b70:	46a9      	mov	r9, r5
 8000b72:	46a0      	mov	r8, r4
 8000b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b76:	0021      	movs	r1, r4
 8000b78:	9800      	ldr	r0, [sp, #0]
 8000b7a:	f000 fdc3 	bl	8001704 <__swsetup_r>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	d10d      	bne.n	8000b9e <__sfvwrite_r+0x112>
 8000b82:	230c      	movs	r3, #12
 8000b84:	5ee2      	ldrsh	r2, [r4, r3]
 8000b86:	e795      	b.n	8000ab4 <__sfvwrite_r+0x28>
 8000b88:	0021      	movs	r1, r4
 8000b8a:	9800      	ldr	r0, [sp, #0]
 8000b8c:	f000 fbf4 	bl	8001378 <_fflush_r>
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d0df      	beq.n	8000b54 <__sfvwrite_r+0xc8>
 8000b94:	220c      	movs	r2, #12
 8000b96:	5ea3      	ldrsh	r3, [r4, r2]
 8000b98:	2240      	movs	r2, #64	@ 0x40
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	81a3      	strh	r3, [r4, #12]
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	4240      	negs	r0, r0
 8000ba2:	e7e1      	b.n	8000b68 <__sfvwrite_r+0xdc>
 8000ba4:	2208      	movs	r2, #8
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	4694      	mov	ip, r2
 8000baa:	685e      	ldr	r6, [r3, #4]
 8000bac:	44e0      	add	r8, ip
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	d0f8      	beq.n	8000ba4 <__sfvwrite_r+0x118>
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	469a      	mov	sl, r3
 8000bb6:	0032      	movs	r2, r6
 8000bb8:	210a      	movs	r1, #10
 8000bba:	4650      	mov	r0, sl
 8000bbc:	f001 f8a4 	bl	8001d08 <memchr>
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	d100      	bne.n	8000bc6 <__sfvwrite_r+0x13a>
 8000bc4:	e0db      	b.n	8000d7e <__sfvwrite_r+0x2f2>
 8000bc6:	4653      	mov	r3, sl
 8000bc8:	3001      	adds	r0, #1
 8000bca:	1ac7      	subs	r7, r0, r3
 8000bcc:	e7a6      	b.n	8000b1c <__sfvwrite_r+0x90>
 8000bce:	2300      	movs	r3, #0
 8000bd0:	2180      	movs	r1, #128	@ 0x80
 8000bd2:	469a      	mov	sl, r3
 8000bd4:	0089      	lsls	r1, r1, #2
 8000bd6:	468b      	mov	fp, r1
 8000bd8:	4656      	mov	r6, sl
 8000bda:	4655      	mov	r5, sl
 8000bdc:	6820      	ldr	r0, [r4, #0]
 8000bde:	68a3      	ldr	r3, [r4, #8]
 8000be0:	4684      	mov	ip, r0
 8000be2:	4698      	mov	r8, r3
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d05c      	beq.n	8000ca2 <__sfvwrite_r+0x216>
 8000be8:	4659      	mov	r1, fp
 8000bea:	420a      	tst	r2, r1
 8000bec:	d05d      	beq.n	8000caa <__sfvwrite_r+0x21e>
 8000bee:	469a      	mov	sl, r3
 8000bf0:	42ab      	cmp	r3, r5
 8000bf2:	d900      	bls.n	8000bf6 <__sfvwrite_r+0x16a>
 8000bf4:	e090      	b.n	8000d18 <__sfvwrite_r+0x28c>
 8000bf6:	2390      	movs	r3, #144	@ 0x90
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	421a      	tst	r2, r3
 8000bfc:	d032      	beq.n	8000c64 <__sfvwrite_r+0x1d8>
 8000bfe:	6921      	ldr	r1, [r4, #16]
 8000c00:	1a43      	subs	r3, r0, r1
 8000c02:	6960      	ldr	r0, [r4, #20]
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	0043      	lsls	r3, r0, #1
 8000c08:	181b      	adds	r3, r3, r0
 8000c0a:	0fd8      	lsrs	r0, r3, #31
 8000c0c:	18c3      	adds	r3, r0, r3
 8000c0e:	1058      	asrs	r0, r3, #1
 8000c10:	9b01      	ldr	r3, [sp, #4]
 8000c12:	4682      	mov	sl, r0
 8000c14:	3301      	adds	r3, #1
 8000c16:	195b      	adds	r3, r3, r5
 8000c18:	4283      	cmp	r3, r0
 8000c1a:	d901      	bls.n	8000c20 <__sfvwrite_r+0x194>
 8000c1c:	469a      	mov	sl, r3
 8000c1e:	0018      	movs	r0, r3
 8000c20:	0552      	lsls	r2, r2, #21
 8000c22:	d400      	bmi.n	8000c26 <__sfvwrite_r+0x19a>
 8000c24:	e097      	b.n	8000d56 <__sfvwrite_r+0x2ca>
 8000c26:	0001      	movs	r1, r0
 8000c28:	9800      	ldr	r0, [sp, #0]
 8000c2a:	f000 fc0d 	bl	8001448 <_malloc_r>
 8000c2e:	4680      	mov	r8, r0
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d100      	bne.n	8000c36 <__sfvwrite_r+0x1aa>
 8000c34:	e0a6      	b.n	8000d84 <__sfvwrite_r+0x2f8>
 8000c36:	9a01      	ldr	r2, [sp, #4]
 8000c38:	6921      	ldr	r1, [r4, #16]
 8000c3a:	f7ff fcef 	bl	800061c <memcpy>
 8000c3e:	89a3      	ldrh	r3, [r4, #12]
 8000c40:	4a54      	ldr	r2, [pc, #336]	@ (8000d94 <__sfvwrite_r+0x308>)
 8000c42:	4013      	ands	r3, r2
 8000c44:	2280      	movs	r2, #128	@ 0x80
 8000c46:	4313      	orrs	r3, r2
 8000c48:	81a3      	strh	r3, [r4, #12]
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	6123      	str	r3, [r4, #16]
 8000c4e:	9b01      	ldr	r3, [sp, #4]
 8000c50:	001a      	movs	r2, r3
 8000c52:	4442      	add	r2, r8
 8000c54:	4694      	mov	ip, r2
 8000c56:	6022      	str	r2, [r4, #0]
 8000c58:	4652      	mov	r2, sl
 8000c5a:	46a8      	mov	r8, r5
 8000c5c:	46aa      	mov	sl, r5
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	6162      	str	r2, [r4, #20]
 8000c62:	60a3      	str	r3, [r4, #8]
 8000c64:	4652      	mov	r2, sl
 8000c66:	0031      	movs	r1, r6
 8000c68:	4660      	mov	r0, ip
 8000c6a:	f000 fcd1 	bl	8001610 <memmove>
 8000c6e:	4642      	mov	r2, r8
 8000c70:	46a8      	mov	r8, r5
 8000c72:	2500      	movs	r5, #0
 8000c74:	68a3      	ldr	r3, [r4, #8]
 8000c76:	6820      	ldr	r0, [r4, #0]
 8000c78:	1a9b      	subs	r3, r3, r2
 8000c7a:	4450      	add	r0, sl
 8000c7c:	60a3      	str	r3, [r4, #8]
 8000c7e:	6020      	str	r0, [r4, #0]
 8000c80:	464b      	mov	r3, r9
 8000c82:	4642      	mov	r2, r8
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	4446      	add	r6, r8
 8000c88:	1a9b      	subs	r3, r3, r2
 8000c8a:	464a      	mov	r2, r9
 8000c8c:	6093      	str	r3, [r2, #8]
 8000c8e:	d100      	bne.n	8000c92 <__sfvwrite_r+0x206>
 8000c90:	e769      	b.n	8000b66 <__sfvwrite_r+0xda>
 8000c92:	230c      	movs	r3, #12
 8000c94:	5ee2      	ldrsh	r2, [r4, r3]
 8000c96:	6820      	ldr	r0, [r4, #0]
 8000c98:	68a3      	ldr	r3, [r4, #8]
 8000c9a:	4684      	mov	ip, r0
 8000c9c:	4698      	mov	r8, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d1a2      	bne.n	8000be8 <__sfvwrite_r+0x15c>
 8000ca2:	683e      	ldr	r6, [r7, #0]
 8000ca4:	687d      	ldr	r5, [r7, #4]
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	e79a      	b.n	8000be0 <__sfvwrite_r+0x154>
 8000caa:	6922      	ldr	r2, [r4, #16]
 8000cac:	4282      	cmp	r2, r0
 8000cae:	d31b      	bcc.n	8000ce8 <__sfvwrite_r+0x25c>
 8000cb0:	6962      	ldr	r2, [r4, #20]
 8000cb2:	4690      	mov	r8, r2
 8000cb4:	42aa      	cmp	r2, r5
 8000cb6:	d817      	bhi.n	8000ce8 <__sfvwrite_r+0x25c>
 8000cb8:	2380      	movs	r3, #128	@ 0x80
 8000cba:	0028      	movs	r0, r5
 8000cbc:	061b      	lsls	r3, r3, #24
 8000cbe:	429d      	cmp	r5, r3
 8000cc0:	d300      	bcc.n	8000cc4 <__sfvwrite_r+0x238>
 8000cc2:	4835      	ldr	r0, [pc, #212]	@ (8000d98 <__sfvwrite_r+0x30c>)
 8000cc4:	4641      	mov	r1, r8
 8000cc6:	f001 f955 	bl	8001f74 <__divsi3>
 8000cca:	4643      	mov	r3, r8
 8000ccc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000cce:	4343      	muls	r3, r0
 8000cd0:	4690      	mov	r8, r2
 8000cd2:	6a21      	ldr	r1, [r4, #32]
 8000cd4:	0032      	movs	r2, r6
 8000cd6:	9800      	ldr	r0, [sp, #0]
 8000cd8:	47c0      	blx	r8
 8000cda:	2800      	cmp	r0, #0
 8000cdc:	dc00      	bgt.n	8000ce0 <__sfvwrite_r+0x254>
 8000cde:	e759      	b.n	8000b94 <__sfvwrite_r+0x108>
 8000ce0:	4680      	mov	r8, r0
 8000ce2:	4643      	mov	r3, r8
 8000ce4:	1aed      	subs	r5, r5, r3
 8000ce6:	e7cb      	b.n	8000c80 <__sfvwrite_r+0x1f4>
 8000ce8:	4698      	mov	r8, r3
 8000cea:	42ab      	cmp	r3, r5
 8000cec:	d900      	bls.n	8000cf0 <__sfvwrite_r+0x264>
 8000cee:	46a8      	mov	r8, r5
 8000cf0:	4642      	mov	r2, r8
 8000cf2:	0031      	movs	r1, r6
 8000cf4:	f000 fc8c 	bl	8001610 <memmove>
 8000cf8:	4642      	mov	r2, r8
 8000cfa:	68a3      	ldr	r3, [r4, #8]
 8000cfc:	6820      	ldr	r0, [r4, #0]
 8000cfe:	1a9b      	subs	r3, r3, r2
 8000d00:	4440      	add	r0, r8
 8000d02:	60a3      	str	r3, [r4, #8]
 8000d04:	6020      	str	r0, [r4, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d1eb      	bne.n	8000ce2 <__sfvwrite_r+0x256>
 8000d0a:	0021      	movs	r1, r4
 8000d0c:	9800      	ldr	r0, [sp, #0]
 8000d0e:	f000 fb33 	bl	8001378 <_fflush_r>
 8000d12:	2800      	cmp	r0, #0
 8000d14:	d0e5      	beq.n	8000ce2 <__sfvwrite_r+0x256>
 8000d16:	e73d      	b.n	8000b94 <__sfvwrite_r+0x108>
 8000d18:	46a8      	mov	r8, r5
 8000d1a:	46aa      	mov	sl, r5
 8000d1c:	e7a2      	b.n	8000c64 <__sfvwrite_r+0x1d8>
 8000d1e:	465a      	mov	r2, fp
 8000d20:	4651      	mov	r1, sl
 8000d22:	f000 fc75 	bl	8001610 <memmove>
 8000d26:	465a      	mov	r2, fp
 8000d28:	68a3      	ldr	r3, [r4, #8]
 8000d2a:	465d      	mov	r5, fp
 8000d2c:	1a9b      	subs	r3, r3, r2
 8000d2e:	60a3      	str	r3, [r4, #8]
 8000d30:	6823      	ldr	r3, [r4, #0]
 8000d32:	445b      	add	r3, fp
 8000d34:	6023      	str	r3, [r4, #0]
 8000d36:	e70a      	b.n	8000b4e <__sfvwrite_r+0xc2>
 8000d38:	4651      	mov	r1, sl
 8000d3a:	002a      	movs	r2, r5
 8000d3c:	f000 fc68 	bl	8001610 <memmove>
 8000d40:	6823      	ldr	r3, [r4, #0]
 8000d42:	0021      	movs	r1, r4
 8000d44:	195b      	adds	r3, r3, r5
 8000d46:	9800      	ldr	r0, [sp, #0]
 8000d48:	6023      	str	r3, [r4, #0]
 8000d4a:	f000 fb15 	bl	8001378 <_fflush_r>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	d100      	bne.n	8000d54 <__sfvwrite_r+0x2c8>
 8000d52:	e6fc      	b.n	8000b4e <__sfvwrite_r+0xc2>
 8000d54:	e71e      	b.n	8000b94 <__sfvwrite_r+0x108>
 8000d56:	0002      	movs	r2, r0
 8000d58:	9800      	ldr	r0, [sp, #0]
 8000d5a:	f000 fd39 	bl	80017d0 <_realloc_r>
 8000d5e:	4680      	mov	r8, r0
 8000d60:	2800      	cmp	r0, #0
 8000d62:	d000      	beq.n	8000d66 <__sfvwrite_r+0x2da>
 8000d64:	e771      	b.n	8000c4a <__sfvwrite_r+0x1be>
 8000d66:	9d00      	ldr	r5, [sp, #0]
 8000d68:	6921      	ldr	r1, [r4, #16]
 8000d6a:	0028      	movs	r0, r5
 8000d6c:	f000 fbf4 	bl	8001558 <_free_r>
 8000d70:	2280      	movs	r2, #128	@ 0x80
 8000d72:	89a3      	ldrh	r3, [r4, #12]
 8000d74:	4393      	bics	r3, r2
 8000d76:	3a74      	subs	r2, #116	@ 0x74
 8000d78:	b21b      	sxth	r3, r3
 8000d7a:	602a      	str	r2, [r5, #0]
 8000d7c:	e70c      	b.n	8000b98 <__sfvwrite_r+0x10c>
 8000d7e:	1c73      	adds	r3, r6, #1
 8000d80:	001f      	movs	r7, r3
 8000d82:	e6cc      	b.n	8000b1e <__sfvwrite_r+0x92>
 8000d84:	9a00      	ldr	r2, [sp, #0]
 8000d86:	330c      	adds	r3, #12
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	5ea3      	ldrsh	r3, [r4, r2]
 8000d8e:	e703      	b.n	8000b98 <__sfvwrite_r+0x10c>
 8000d90:	7ffffc00 	.word	0x7ffffc00
 8000d94:	fffffb7f 	.word	0xfffffb7f
 8000d98:	7fffffff 	.word	0x7fffffff

08000d9c <_init_signal_r>:
 8000d9c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8000d9e:	b510      	push	{r4, lr}
 8000da0:	0004      	movs	r4, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <_init_signal_r+0xe>
 8000da6:	2000      	movs	r0, #0
 8000da8:	bd10      	pop	{r4, pc}
 8000daa:	2180      	movs	r1, #128	@ 0x80
 8000dac:	f000 fb4c 	bl	8001448 <_malloc_r>
 8000db0:	63e0      	str	r0, [r4, #60]	@ 0x3c
 8000db2:	2800      	cmp	r0, #0
 8000db4:	d006      	beq.n	8000dc4 <_init_signal_r+0x28>
 8000db6:	0002      	movs	r2, r0
 8000db8:	2300      	movs	r3, #0
 8000dba:	3280      	adds	r2, #128	@ 0x80
 8000dbc:	c008      	stmia	r0!, {r3}
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	d1fc      	bne.n	8000dbc <_init_signal_r+0x20>
 8000dc2:	e7f0      	b.n	8000da6 <_init_signal_r+0xa>
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	4240      	negs	r0, r0
 8000dc8:	e7ee      	b.n	8000da8 <_init_signal_r+0xc>
 8000dca:	46c0      	nop			@ (mov r8, r8)

08000dcc <_signal_r>:
 8000dcc:	b570      	push	{r4, r5, r6, lr}
 8000dce:	0005      	movs	r5, r0
 8000dd0:	000c      	movs	r4, r1
 8000dd2:	0016      	movs	r6, r2
 8000dd4:	291f      	cmp	r1, #31
 8000dd6:	d807      	bhi.n	8000de8 <_signal_r+0x1c>
 8000dd8:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	d009      	beq.n	8000df2 <_signal_r+0x26>
 8000dde:	00a4      	lsls	r4, r4, #2
 8000de0:	1904      	adds	r4, r0, r4
 8000de2:	6820      	ldr	r0, [r4, #0]
 8000de4:	6026      	str	r6, [r4, #0]
 8000de6:	bd70      	pop	{r4, r5, r6, pc}
 8000de8:	2316      	movs	r3, #22
 8000dea:	6003      	str	r3, [r0, #0]
 8000dec:	2001      	movs	r0, #1
 8000dee:	4240      	negs	r0, r0
 8000df0:	e7f9      	b.n	8000de6 <_signal_r+0x1a>
 8000df2:	2180      	movs	r1, #128	@ 0x80
 8000df4:	0028      	movs	r0, r5
 8000df6:	f000 fb27 	bl	8001448 <_malloc_r>
 8000dfa:	0001      	movs	r1, r0
 8000dfc:	0003      	movs	r3, r0
 8000dfe:	2200      	movs	r2, #0
 8000e00:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8000e02:	3180      	adds	r1, #128	@ 0x80
 8000e04:	2800      	cmp	r0, #0
 8000e06:	d0f1      	beq.n	8000dec <_signal_r+0x20>
 8000e08:	c304      	stmia	r3!, {r2}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d1fc      	bne.n	8000e08 <_signal_r+0x3c>
 8000e0e:	e7e6      	b.n	8000dde <_signal_r+0x12>

08000e10 <_raise_r>:
 8000e10:	b570      	push	{r4, r5, r6, lr}
 8000e12:	0005      	movs	r5, r0
 8000e14:	000c      	movs	r4, r1
 8000e16:	291f      	cmp	r1, #31
 8000e18:	d81e      	bhi.n	8000e58 <_raise_r+0x48>
 8000e1a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d00e      	beq.n	8000e3e <_raise_r+0x2e>
 8000e20:	008a      	lsls	r2, r1, #2
 8000e22:	189b      	adds	r3, r3, r2
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	2a00      	cmp	r2, #0
 8000e28:	d009      	beq.n	8000e3e <_raise_r+0x2e>
 8000e2a:	2a01      	cmp	r2, #1
 8000e2c:	d005      	beq.n	8000e3a <_raise_r+0x2a>
 8000e2e:	1c51      	adds	r1, r2, #1
 8000e30:	d00e      	beq.n	8000e50 <_raise_r+0x40>
 8000e32:	2100      	movs	r1, #0
 8000e34:	0020      	movs	r0, r4
 8000e36:	6019      	str	r1, [r3, #0]
 8000e38:	4790      	blx	r2
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	bd70      	pop	{r4, r5, r6, pc}
 8000e3e:	0028      	movs	r0, r5
 8000e40:	f001 f832 	bl	8001ea8 <_getpid_r>
 8000e44:	0022      	movs	r2, r4
 8000e46:	0001      	movs	r1, r0
 8000e48:	0028      	movs	r0, r5
 8000e4a:	f001 f819 	bl	8001e80 <_kill_r>
 8000e4e:	e7f5      	b.n	8000e3c <_raise_r+0x2c>
 8000e50:	2316      	movs	r3, #22
 8000e52:	6003      	str	r3, [r0, #0]
 8000e54:	2001      	movs	r0, #1
 8000e56:	e7f1      	b.n	8000e3c <_raise_r+0x2c>
 8000e58:	2316      	movs	r3, #22
 8000e5a:	6003      	str	r3, [r0, #0]
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	4240      	negs	r0, r0
 8000e60:	e7ec      	b.n	8000e3c <_raise_r+0x2c>
 8000e62:	46c0      	nop			@ (mov r8, r8)

08000e64 <__sigtramp_r>:
 8000e64:	b570      	push	{r4, r5, r6, lr}
 8000e66:	0005      	movs	r5, r0
 8000e68:	000c      	movs	r4, r1
 8000e6a:	291f      	cmp	r1, #31
 8000e6c:	d824      	bhi.n	8000eb8 <__sigtramp_r+0x54>
 8000e6e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d014      	beq.n	8000e9e <__sigtramp_r+0x3a>
 8000e74:	00a2      	lsls	r2, r4, #2
 8000e76:	189b      	adds	r3, r3, r2
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	2a00      	cmp	r2, #0
 8000e7c:	d009      	beq.n	8000e92 <__sigtramp_r+0x2e>
 8000e7e:	1c51      	adds	r1, r2, #1
 8000e80:	d00b      	beq.n	8000e9a <__sigtramp_r+0x36>
 8000e82:	2a01      	cmp	r2, #1
 8000e84:	d007      	beq.n	8000e96 <__sigtramp_r+0x32>
 8000e86:	2100      	movs	r1, #0
 8000e88:	0020      	movs	r0, r4
 8000e8a:	6019      	str	r1, [r3, #0]
 8000e8c:	4790      	blx	r2
 8000e8e:	2000      	movs	r0, #0
 8000e90:	bd70      	pop	{r4, r5, r6, pc}
 8000e92:	2001      	movs	r0, #1
 8000e94:	e7fc      	b.n	8000e90 <__sigtramp_r+0x2c>
 8000e96:	2003      	movs	r0, #3
 8000e98:	e7fa      	b.n	8000e90 <__sigtramp_r+0x2c>
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	e7f8      	b.n	8000e90 <__sigtramp_r+0x2c>
 8000e9e:	2180      	movs	r1, #128	@ 0x80
 8000ea0:	f000 fad2 	bl	8001448 <_malloc_r>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8000ea8:	d006      	beq.n	8000eb8 <__sigtramp_r+0x54>
 8000eaa:	2100      	movs	r1, #0
 8000eac:	0002      	movs	r2, r0
 8000eae:	3080      	adds	r0, #128	@ 0x80
 8000eb0:	c202      	stmia	r2!, {r1}
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	d1fc      	bne.n	8000eb0 <__sigtramp_r+0x4c>
 8000eb6:	e7dd      	b.n	8000e74 <__sigtramp_r+0x10>
 8000eb8:	2001      	movs	r0, #1
 8000eba:	4240      	negs	r0, r0
 8000ebc:	e7e8      	b.n	8000e90 <__sigtramp_r+0x2c>
 8000ebe:	46c0      	nop			@ (mov r8, r8)

08000ec0 <raise>:
 8000ec0:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <raise+0x54>)
 8000ec2:	b570      	push	{r4, r5, r6, lr}
 8000ec4:	0004      	movs	r4, r0
 8000ec6:	681d      	ldr	r5, [r3, #0]
 8000ec8:	281f      	cmp	r0, #31
 8000eca:	d81d      	bhi.n	8000f08 <raise+0x48>
 8000ecc:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00d      	beq.n	8000eee <raise+0x2e>
 8000ed2:	0082      	lsls	r2, r0, #2
 8000ed4:	189b      	adds	r3, r3, r2
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	2a00      	cmp	r2, #0
 8000eda:	d008      	beq.n	8000eee <raise+0x2e>
 8000edc:	2a01      	cmp	r2, #1
 8000ede:	d004      	beq.n	8000eea <raise+0x2a>
 8000ee0:	1c51      	adds	r1, r2, #1
 8000ee2:	d00d      	beq.n	8000f00 <raise+0x40>
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	6019      	str	r1, [r3, #0]
 8000ee8:	4790      	blx	r2
 8000eea:	2000      	movs	r0, #0
 8000eec:	bd70      	pop	{r4, r5, r6, pc}
 8000eee:	0028      	movs	r0, r5
 8000ef0:	f000 ffda 	bl	8001ea8 <_getpid_r>
 8000ef4:	0022      	movs	r2, r4
 8000ef6:	0001      	movs	r1, r0
 8000ef8:	0028      	movs	r0, r5
 8000efa:	f000 ffc1 	bl	8001e80 <_kill_r>
 8000efe:	e7f5      	b.n	8000eec <raise+0x2c>
 8000f00:	2316      	movs	r3, #22
 8000f02:	2001      	movs	r0, #1
 8000f04:	602b      	str	r3, [r5, #0]
 8000f06:	e7f1      	b.n	8000eec <raise+0x2c>
 8000f08:	2316      	movs	r3, #22
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	602b      	str	r3, [r5, #0]
 8000f0e:	4240      	negs	r0, r0
 8000f10:	e7ec      	b.n	8000eec <raise+0x2c>
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	20000004 	.word	0x20000004

08000f18 <signal>:
 8000f18:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <signal+0x48>)
 8000f1a:	b570      	push	{r4, r5, r6, lr}
 8000f1c:	0004      	movs	r4, r0
 8000f1e:	000e      	movs	r6, r1
 8000f20:	681d      	ldr	r5, [r3, #0]
 8000f22:	281f      	cmp	r0, #31
 8000f24:	d807      	bhi.n	8000f36 <signal+0x1e>
 8000f26:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 8000f28:	2800      	cmp	r0, #0
 8000f2a:	d009      	beq.n	8000f40 <signal+0x28>
 8000f2c:	00a4      	lsls	r4, r4, #2
 8000f2e:	1904      	adds	r4, r0, r4
 8000f30:	6820      	ldr	r0, [r4, #0]
 8000f32:	6026      	str	r6, [r4, #0]
 8000f34:	bd70      	pop	{r4, r5, r6, pc}
 8000f36:	2316      	movs	r3, #22
 8000f38:	602b      	str	r3, [r5, #0]
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	4240      	negs	r0, r0
 8000f3e:	e7f9      	b.n	8000f34 <signal+0x1c>
 8000f40:	2180      	movs	r1, #128	@ 0x80
 8000f42:	0028      	movs	r0, r5
 8000f44:	f000 fa80 	bl	8001448 <_malloc_r>
 8000f48:	0001      	movs	r1, r0
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8000f50:	3180      	adds	r1, #128	@ 0x80
 8000f52:	2800      	cmp	r0, #0
 8000f54:	d0f1      	beq.n	8000f3a <signal+0x22>
 8000f56:	c304      	stmia	r3!, {r2}
 8000f58:	4299      	cmp	r1, r3
 8000f5a:	d1fc      	bne.n	8000f56 <signal+0x3e>
 8000f5c:	e7e6      	b.n	8000f2c <signal+0x14>
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	20000004 	.word	0x20000004

08000f64 <_init_signal>:
 8000f64:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <_init_signal+0x34>)
 8000f66:	b510      	push	{r4, lr}
 8000f68:	681c      	ldr	r4, [r3, #0]
 8000f6a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <_init_signal+0x10>
 8000f70:	2000      	movs	r0, #0
 8000f72:	bd10      	pop	{r4, pc}
 8000f74:	2180      	movs	r1, #128	@ 0x80
 8000f76:	0020      	movs	r0, r4
 8000f78:	f000 fa66 	bl	8001448 <_malloc_r>
 8000f7c:	63e0      	str	r0, [r4, #60]	@ 0x3c
 8000f7e:	2800      	cmp	r0, #0
 8000f80:	d006      	beq.n	8000f90 <_init_signal+0x2c>
 8000f82:	0002      	movs	r2, r0
 8000f84:	2300      	movs	r3, #0
 8000f86:	3280      	adds	r2, #128	@ 0x80
 8000f88:	c008      	stmia	r0!, {r3}
 8000f8a:	4290      	cmp	r0, r2
 8000f8c:	d1fc      	bne.n	8000f88 <_init_signal+0x24>
 8000f8e:	e7ef      	b.n	8000f70 <_init_signal+0xc>
 8000f90:	2001      	movs	r0, #1
 8000f92:	4240      	negs	r0, r0
 8000f94:	e7ed      	b.n	8000f72 <_init_signal+0xe>
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	20000004 	.word	0x20000004

08000f9c <__sigtramp>:
 8000f9c:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <__sigtramp+0x60>)
 8000f9e:	b570      	push	{r4, r5, r6, lr}
 8000fa0:	0004      	movs	r4, r0
 8000fa2:	681d      	ldr	r5, [r3, #0]
 8000fa4:	281f      	cmp	r0, #31
 8000fa6:	d825      	bhi.n	8000ff4 <__sigtramp+0x58>
 8000fa8:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d014      	beq.n	8000fd8 <__sigtramp+0x3c>
 8000fae:	00a2      	lsls	r2, r4, #2
 8000fb0:	189b      	adds	r3, r3, r2
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	2a00      	cmp	r2, #0
 8000fb6:	d009      	beq.n	8000fcc <__sigtramp+0x30>
 8000fb8:	1c51      	adds	r1, r2, #1
 8000fba:	d00b      	beq.n	8000fd4 <__sigtramp+0x38>
 8000fbc:	2a01      	cmp	r2, #1
 8000fbe:	d007      	beq.n	8000fd0 <__sigtramp+0x34>
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	0020      	movs	r0, r4
 8000fc4:	6019      	str	r1, [r3, #0]
 8000fc6:	4790      	blx	r2
 8000fc8:	2000      	movs	r0, #0
 8000fca:	bd70      	pop	{r4, r5, r6, pc}
 8000fcc:	2001      	movs	r0, #1
 8000fce:	e7fc      	b.n	8000fca <__sigtramp+0x2e>
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	e7fa      	b.n	8000fca <__sigtramp+0x2e>
 8000fd4:	2002      	movs	r0, #2
 8000fd6:	e7f8      	b.n	8000fca <__sigtramp+0x2e>
 8000fd8:	2180      	movs	r1, #128	@ 0x80
 8000fda:	0028      	movs	r0, r5
 8000fdc:	f000 fa34 	bl	8001448 <_malloc_r>
 8000fe0:	1e03      	subs	r3, r0, #0
 8000fe2:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8000fe4:	d006      	beq.n	8000ff4 <__sigtramp+0x58>
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	0002      	movs	r2, r0
 8000fea:	3080      	adds	r0, #128	@ 0x80
 8000fec:	c202      	stmia	r2!, {r1}
 8000fee:	4290      	cmp	r0, r2
 8000ff0:	d1fc      	bne.n	8000fec <__sigtramp+0x50>
 8000ff2:	e7dc      	b.n	8000fae <__sigtramp+0x12>
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	4240      	negs	r0, r0
 8000ff8:	e7e7      	b.n	8000fca <__sigtramp+0x2e>
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	20000004 	.word	0x20000004

08001000 <__fp_lock>:
 8001000:	2000      	movs	r0, #0
 8001002:	4770      	bx	lr

08001004 <stdio_exit_handler>:
 8001004:	b510      	push	{r4, lr}
 8001006:	4a03      	ldr	r2, [pc, #12]	@ (8001014 <stdio_exit_handler+0x10>)
 8001008:	4903      	ldr	r1, [pc, #12]	@ (8001018 <stdio_exit_handler+0x14>)
 800100a:	4804      	ldr	r0, [pc, #16]	@ (800101c <stdio_exit_handler+0x18>)
 800100c:	f000 fb58 	bl	80016c0 <_fwalk_sglue>
 8001010:	bd10      	pop	{r4, pc}
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	20000054 	.word	0x20000054
 8001018:	08001379 	.word	0x08001379
 800101c:	20000008 	.word	0x20000008

08001020 <cleanup_stdio>:
 8001020:	6841      	ldr	r1, [r0, #4]
 8001022:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <cleanup_stdio+0x30>)
 8001024:	b510      	push	{r4, lr}
 8001026:	0004      	movs	r4, r0
 8001028:	4299      	cmp	r1, r3
 800102a:	d001      	beq.n	8001030 <cleanup_stdio+0x10>
 800102c:	f000 f9a4 	bl	8001378 <_fflush_r>
 8001030:	68a1      	ldr	r1, [r4, #8]
 8001032:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <cleanup_stdio+0x34>)
 8001034:	4299      	cmp	r1, r3
 8001036:	d002      	beq.n	800103e <cleanup_stdio+0x1e>
 8001038:	0020      	movs	r0, r4
 800103a:	f000 f99d 	bl	8001378 <_fflush_r>
 800103e:	68e1      	ldr	r1, [r4, #12]
 8001040:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <cleanup_stdio+0x38>)
 8001042:	4299      	cmp	r1, r3
 8001044:	d002      	beq.n	800104c <cleanup_stdio+0x2c>
 8001046:	0020      	movs	r0, r4
 8001048:	f000 f996 	bl	8001378 <_fflush_r>
 800104c:	bd10      	pop	{r4, pc}
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	200001d8 	.word	0x200001d8
 8001054:	20000240 	.word	0x20000240
 8001058:	200002a8 	.word	0x200002a8

0800105c <__fp_unlock>:
 800105c:	2000      	movs	r0, #0
 800105e:	4770      	bx	lr

08001060 <global_stdio_init.part.0>:
 8001060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001062:	46ce      	mov	lr, r9
 8001064:	4647      	mov	r7, r8
 8001066:	4c34      	ldr	r4, [pc, #208]	@ (8001138 <global_stdio_init.part.0+0xd8>)
 8001068:	4b34      	ldr	r3, [pc, #208]	@ (800113c <global_stdio_init.part.0+0xdc>)
 800106a:	4a35      	ldr	r2, [pc, #212]	@ (8001140 <global_stdio_init.part.0+0xe0>)
 800106c:	0020      	movs	r0, r4
 800106e:	2500      	movs	r5, #0
 8001070:	b580      	push	{r7, lr}
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	2304      	movs	r3, #4
 8001076:	2208      	movs	r2, #8
 8001078:	2100      	movs	r1, #0
 800107a:	305c      	adds	r0, #92	@ 0x5c
 800107c:	6025      	str	r5, [r4, #0]
 800107e:	6065      	str	r5, [r4, #4]
 8001080:	60a5      	str	r5, [r4, #8]
 8001082:	6665      	str	r5, [r4, #100]	@ 0x64
 8001084:	6125      	str	r5, [r4, #16]
 8001086:	6165      	str	r5, [r4, #20]
 8001088:	61a5      	str	r5, [r4, #24]
 800108a:	60e3      	str	r3, [r4, #12]
 800108c:	f7ff fa40 	bl	8000510 <memset>
 8001090:	4b2c      	ldr	r3, [pc, #176]	@ (8001144 <global_stdio_init.part.0+0xe4>)
 8001092:	0020      	movs	r0, r4
 8001094:	4699      	mov	r9, r3
 8001096:	6263      	str	r3, [r4, #36]	@ 0x24
 8001098:	4b2b      	ldr	r3, [pc, #172]	@ (8001148 <global_stdio_init.part.0+0xe8>)
 800109a:	4f2c      	ldr	r7, [pc, #176]	@ (800114c <global_stdio_init.part.0+0xec>)
 800109c:	4698      	mov	r8, r3
 800109e:	62a3      	str	r3, [r4, #40]	@ 0x28
 80010a0:	23cc      	movs	r3, #204	@ 0xcc
 80010a2:	50e5      	str	r5, [r4, r3]
 80010a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001150 <global_stdio_init.part.0+0xf0>)
 80010a6:	4e2b      	ldr	r6, [pc, #172]	@ (8001154 <global_stdio_init.part.0+0xf4>)
 80010a8:	6763      	str	r3, [r4, #116]	@ 0x74
 80010aa:	2380      	movs	r3, #128	@ 0x80
 80010ac:	2208      	movs	r2, #8
 80010ae:	2100      	movs	r1, #0
 80010b0:	30c4      	adds	r0, #196	@ 0xc4
 80010b2:	50e5      	str	r5, [r4, r3]
 80010b4:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80010b6:	6326      	str	r6, [r4, #48]	@ 0x30
 80010b8:	66a5      	str	r5, [r4, #104]	@ 0x68
 80010ba:	66e5      	str	r5, [r4, #108]	@ 0x6c
 80010bc:	6725      	str	r5, [r4, #112]	@ 0x70
 80010be:	67a5      	str	r5, [r4, #120]	@ 0x78
 80010c0:	67e5      	str	r5, [r4, #124]	@ 0x7c
 80010c2:	6224      	str	r4, [r4, #32]
 80010c4:	f7ff fa24 	bl	8000510 <memset>
 80010c8:	0022      	movs	r2, r4
 80010ca:	2388      	movs	r3, #136	@ 0x88
 80010cc:	3268      	adds	r2, #104	@ 0x68
 80010ce:	50e2      	str	r2, [r4, r3]
 80010d0:	464a      	mov	r2, r9
 80010d2:	3304      	adds	r3, #4
 80010d4:	50e2      	str	r2, [r4, r3]
 80010d6:	4642      	mov	r2, r8
 80010d8:	0020      	movs	r0, r4
 80010da:	3304      	adds	r3, #4
 80010dc:	50e2      	str	r2, [r4, r3]
 80010de:	3304      	adds	r3, #4
 80010e0:	50e7      	str	r7, [r4, r3]
 80010e2:	3304      	adds	r3, #4
 80010e4:	50e6      	str	r6, [r4, r3]
 80010e6:	3338      	adds	r3, #56	@ 0x38
 80010e8:	50e5      	str	r5, [r4, r3]
 80010ea:	3304      	adds	r3, #4
 80010ec:	50e5      	str	r5, [r4, r3]
 80010ee:	3304      	adds	r3, #4
 80010f0:	50e5      	str	r5, [r4, r3]
 80010f2:	4a19      	ldr	r2, [pc, #100]	@ (8001158 <global_stdio_init.part.0+0xf8>)
 80010f4:	335c      	adds	r3, #92	@ 0x5c
 80010f6:	50e5      	str	r5, [r4, r3]
 80010f8:	3b58      	subs	r3, #88	@ 0x58
 80010fa:	50e2      	str	r2, [r4, r3]
 80010fc:	3304      	adds	r3, #4
 80010fe:	50e5      	str	r5, [r4, r3]
 8001100:	302d      	adds	r0, #45	@ 0x2d
 8001102:	3304      	adds	r3, #4
 8001104:	50e5      	str	r5, [r4, r3]
 8001106:	2208      	movs	r2, #8
 8001108:	3304      	adds	r3, #4
 800110a:	2100      	movs	r1, #0
 800110c:	30ff      	adds	r0, #255	@ 0xff
 800110e:	50e5      	str	r5, [r4, r3]
 8001110:	f7ff f9fe 	bl	8000510 <memset>
 8001114:	0022      	movs	r2, r4
 8001116:	23f0      	movs	r3, #240	@ 0xf0
 8001118:	32d0      	adds	r2, #208	@ 0xd0
 800111a:	50e2      	str	r2, [r4, r3]
 800111c:	464a      	mov	r2, r9
 800111e:	3304      	adds	r3, #4
 8001120:	50e2      	str	r2, [r4, r3]
 8001122:	4642      	mov	r2, r8
 8001124:	3304      	adds	r3, #4
 8001126:	50e2      	str	r2, [r4, r3]
 8001128:	3304      	adds	r3, #4
 800112a:	50e7      	str	r7, [r4, r3]
 800112c:	3304      	adds	r3, #4
 800112e:	50e6      	str	r6, [r4, r3]
 8001130:	bcc0      	pop	{r6, r7}
 8001132:	46b9      	mov	r9, r7
 8001134:	46b0      	mov	r8, r6
 8001136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001138:	200001d8 	.word	0x200001d8
 800113c:	200001d4 	.word	0x200001d4
 8001140:	08001005 	.word	0x08001005
 8001144:	08001dc5 	.word	0x08001dc5
 8001148:	08001df1 	.word	0x08001df1
 800114c:	08001e31 	.word	0x08001e31
 8001150:	00010009 	.word	0x00010009
 8001154:	08001e61 	.word	0x08001e61
 8001158:	00020012 	.word	0x00020012

0800115c <__sfp>:
 800115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800115e:	4b24      	ldr	r3, [pc, #144]	@ (80011f0 <__sfp+0x94>)
 8001160:	0007      	movs	r7, r0
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d03b      	beq.n	80011e0 <__sfp+0x84>
 8001168:	4e22      	ldr	r6, [pc, #136]	@ (80011f4 <__sfp+0x98>)
 800116a:	6873      	ldr	r3, [r6, #4]
 800116c:	68b4      	ldr	r4, [r6, #8]
 800116e:	3b01      	subs	r3, #1
 8001170:	d503      	bpl.n	800117a <__sfp+0x1e>
 8001172:	e01b      	b.n	80011ac <__sfp+0x50>
 8001174:	3468      	adds	r4, #104	@ 0x68
 8001176:	3b01      	subs	r3, #1
 8001178:	d318      	bcc.n	80011ac <__sfp+0x50>
 800117a:	220c      	movs	r2, #12
 800117c:	5ea5      	ldrsh	r5, [r4, r2]
 800117e:	2d00      	cmp	r5, #0
 8001180:	d1f8      	bne.n	8001174 <__sfp+0x18>
 8001182:	0020      	movs	r0, r4
 8001184:	4b1c      	ldr	r3, [pc, #112]	@ (80011f8 <__sfp+0x9c>)
 8001186:	2208      	movs	r2, #8
 8001188:	2100      	movs	r1, #0
 800118a:	60e3      	str	r3, [r4, #12]
 800118c:	6665      	str	r5, [r4, #100]	@ 0x64
 800118e:	6025      	str	r5, [r4, #0]
 8001190:	60a5      	str	r5, [r4, #8]
 8001192:	6065      	str	r5, [r4, #4]
 8001194:	6125      	str	r5, [r4, #16]
 8001196:	6165      	str	r5, [r4, #20]
 8001198:	61a5      	str	r5, [r4, #24]
 800119a:	305c      	adds	r0, #92	@ 0x5c
 800119c:	f7ff f9b8 	bl	8000510 <memset>
 80011a0:	6365      	str	r5, [r4, #52]	@ 0x34
 80011a2:	63a5      	str	r5, [r4, #56]	@ 0x38
 80011a4:	64a5      	str	r5, [r4, #72]	@ 0x48
 80011a6:	64e5      	str	r5, [r4, #76]	@ 0x4c
 80011a8:	0020      	movs	r0, r4
 80011aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011ac:	6835      	ldr	r5, [r6, #0]
 80011ae:	2d00      	cmp	r5, #0
 80011b0:	d001      	beq.n	80011b6 <__sfp+0x5a>
 80011b2:	002e      	movs	r6, r5
 80011b4:	e7d9      	b.n	800116a <__sfp+0xe>
 80011b6:	21d6      	movs	r1, #214	@ 0xd6
 80011b8:	0038      	movs	r0, r7
 80011ba:	0049      	lsls	r1, r1, #1
 80011bc:	f000 f944 	bl	8001448 <_malloc_r>
 80011c0:	1e04      	subs	r4, r0, #0
 80011c2:	d010      	beq.n	80011e6 <__sfp+0x8a>
 80011c4:	2304      	movs	r3, #4
 80011c6:	22d0      	movs	r2, #208	@ 0xd0
 80011c8:	6005      	str	r5, [r0, #0]
 80011ca:	0025      	movs	r5, r4
 80011cc:	6043      	str	r3, [r0, #4]
 80011ce:	300c      	adds	r0, #12
 80011d0:	2100      	movs	r1, #0
 80011d2:	60a0      	str	r0, [r4, #8]
 80011d4:	0052      	lsls	r2, r2, #1
 80011d6:	f7ff f99b 	bl	8000510 <memset>
 80011da:	6034      	str	r4, [r6, #0]
 80011dc:	002e      	movs	r6, r5
 80011de:	e7c4      	b.n	800116a <__sfp+0xe>
 80011e0:	f7ff ff3e 	bl	8001060 <global_stdio_init.part.0>
 80011e4:	e7c0      	b.n	8001168 <__sfp+0xc>
 80011e6:	230c      	movs	r3, #12
 80011e8:	6030      	str	r0, [r6, #0]
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	e7dc      	b.n	80011a8 <__sfp+0x4c>
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	200001d4 	.word	0x200001d4
 80011f4:	20000054 	.word	0x20000054
 80011f8:	ffff0001 	.word	0xffff0001

080011fc <__sinit>:
 80011fc:	6a03      	ldr	r3, [r0, #32]
 80011fe:	b510      	push	{r4, lr}
 8001200:	2b00      	cmp	r3, #0
 8001202:	d000      	beq.n	8001206 <__sinit+0xa>
 8001204:	bd10      	pop	{r4, pc}
 8001206:	4b04      	ldr	r3, [pc, #16]	@ (8001218 <__sinit+0x1c>)
 8001208:	6203      	str	r3, [r0, #32]
 800120a:	4b04      	ldr	r3, [pc, #16]	@ (800121c <__sinit+0x20>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f8      	bne.n	8001204 <__sinit+0x8>
 8001212:	f7ff ff25 	bl	8001060 <global_stdio_init.part.0>
 8001216:	e7f5      	b.n	8001204 <__sinit+0x8>
 8001218:	08001021 	.word	0x08001021
 800121c:	200001d4 	.word	0x200001d4

08001220 <__sfp_lock_acquire>:
 8001220:	4770      	bx	lr
 8001222:	46c0      	nop			@ (mov r8, r8)

08001224 <__sfp_lock_release>:
 8001224:	4770      	bx	lr
 8001226:	46c0      	nop			@ (mov r8, r8)

08001228 <__fp_lock_all>:
 8001228:	b510      	push	{r4, lr}
 800122a:	2000      	movs	r0, #0
 800122c:	4a02      	ldr	r2, [pc, #8]	@ (8001238 <__fp_lock_all+0x10>)
 800122e:	4903      	ldr	r1, [pc, #12]	@ (800123c <__fp_lock_all+0x14>)
 8001230:	f000 fa46 	bl	80016c0 <_fwalk_sglue>
 8001234:	bd10      	pop	{r4, pc}
 8001236:	46c0      	nop			@ (mov r8, r8)
 8001238:	20000054 	.word	0x20000054
 800123c:	08001001 	.word	0x08001001

08001240 <__fp_unlock_all>:
 8001240:	b510      	push	{r4, lr}
 8001242:	2000      	movs	r0, #0
 8001244:	4a02      	ldr	r2, [pc, #8]	@ (8001250 <__fp_unlock_all+0x10>)
 8001246:	4903      	ldr	r1, [pc, #12]	@ (8001254 <__fp_unlock_all+0x14>)
 8001248:	f000 fa3a 	bl	80016c0 <_fwalk_sglue>
 800124c:	bd10      	pop	{r4, pc}
 800124e:	46c0      	nop			@ (mov r8, r8)
 8001250:	20000054 	.word	0x20000054
 8001254:	0800105d 	.word	0x0800105d

08001258 <__sflush_r>:
 8001258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125a:	46c6      	mov	lr, r8
 800125c:	b500      	push	{lr}
 800125e:	220c      	movs	r2, #12
 8001260:	5e8b      	ldrsh	r3, [r1, r2]
 8001262:	0007      	movs	r7, r0
 8001264:	000c      	movs	r4, r1
 8001266:	071a      	lsls	r2, r3, #28
 8001268:	d43c      	bmi.n	80012e4 <__sflush_r+0x8c>
 800126a:	684a      	ldr	r2, [r1, #4]
 800126c:	2a00      	cmp	r2, #0
 800126e:	dd5c      	ble.n	800132a <__sflush_r+0xd2>
 8001270:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001272:	2e00      	cmp	r6, #0
 8001274:	d032      	beq.n	80012dc <__sflush_r+0x84>
 8001276:	2200      	movs	r2, #0
 8001278:	683d      	ldr	r5, [r7, #0]
 800127a:	6a21      	ldr	r1, [r4, #32]
 800127c:	603a      	str	r2, [r7, #0]
 800127e:	04da      	lsls	r2, r3, #19
 8001280:	d457      	bmi.n	8001332 <__sflush_r+0xda>
 8001282:	2200      	movs	r2, #0
 8001284:	2301      	movs	r3, #1
 8001286:	0038      	movs	r0, r7
 8001288:	47b0      	blx	r6
 800128a:	0002      	movs	r2, r0
 800128c:	1c43      	adds	r3, r0, #1
 800128e:	d065      	beq.n	800135c <__sflush_r+0x104>
 8001290:	210c      	movs	r1, #12
 8001292:	5e63      	ldrsh	r3, [r4, r1]
 8001294:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001296:	6a21      	ldr	r1, [r4, #32]
 8001298:	075b      	lsls	r3, r3, #29
 800129a:	d506      	bpl.n	80012aa <__sflush_r+0x52>
 800129c:	6863      	ldr	r3, [r4, #4]
 800129e:	1ad2      	subs	r2, r2, r3
 80012a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <__sflush_r+0x52>
 80012a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80012a8:	1ad2      	subs	r2, r2, r3
 80012aa:	2300      	movs	r3, #0
 80012ac:	0038      	movs	r0, r7
 80012ae:	47b0      	blx	r6
 80012b0:	1c43      	adds	r3, r0, #1
 80012b2:	d040      	beq.n	8001336 <__sflush_r+0xde>
 80012b4:	2300      	movs	r3, #0
 80012b6:	6063      	str	r3, [r4, #4]
 80012b8:	6923      	ldr	r3, [r4, #16]
 80012ba:	6023      	str	r3, [r4, #0]
 80012bc:	89a3      	ldrh	r3, [r4, #12]
 80012be:	04db      	lsls	r3, r3, #19
 80012c0:	d44a      	bmi.n	8001358 <__sflush_r+0x100>
 80012c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012c4:	603d      	str	r5, [r7, #0]
 80012c6:	2900      	cmp	r1, #0
 80012c8:	d008      	beq.n	80012dc <__sflush_r+0x84>
 80012ca:	0023      	movs	r3, r4
 80012cc:	3344      	adds	r3, #68	@ 0x44
 80012ce:	4299      	cmp	r1, r3
 80012d0:	d002      	beq.n	80012d8 <__sflush_r+0x80>
 80012d2:	0038      	movs	r0, r7
 80012d4:	f000 f940 	bl	8001558 <_free_r>
 80012d8:	2300      	movs	r3, #0
 80012da:	6363      	str	r3, [r4, #52]	@ 0x34
 80012dc:	2000      	movs	r0, #0
 80012de:	bc80      	pop	{r7}
 80012e0:	46b8      	mov	r8, r7
 80012e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e4:	690e      	ldr	r6, [r1, #16]
 80012e6:	2e00      	cmp	r6, #0
 80012e8:	d0f8      	beq.n	80012dc <__sflush_r+0x84>
 80012ea:	680d      	ldr	r5, [r1, #0]
 80012ec:	2200      	movs	r2, #0
 80012ee:	1bad      	subs	r5, r5, r6
 80012f0:	600e      	str	r6, [r1, #0]
 80012f2:	079b      	lsls	r3, r3, #30
 80012f4:	d100      	bne.n	80012f8 <__sflush_r+0xa0>
 80012f6:	694a      	ldr	r2, [r1, #20]
 80012f8:	60a2      	str	r2, [r4, #8]
 80012fa:	2d00      	cmp	r5, #0
 80012fc:	dc04      	bgt.n	8001308 <__sflush_r+0xb0>
 80012fe:	e7ed      	b.n	80012dc <__sflush_r+0x84>
 8001300:	1836      	adds	r6, r6, r0
 8001302:	1a2d      	subs	r5, r5, r0
 8001304:	2d00      	cmp	r5, #0
 8001306:	dde9      	ble.n	80012dc <__sflush_r+0x84>
 8001308:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800130a:	0032      	movs	r2, r6
 800130c:	4698      	mov	r8, r3
 800130e:	0038      	movs	r0, r7
 8001310:	002b      	movs	r3, r5
 8001312:	6a21      	ldr	r1, [r4, #32]
 8001314:	47c0      	blx	r8
 8001316:	2800      	cmp	r0, #0
 8001318:	dcf2      	bgt.n	8001300 <__sflush_r+0xa8>
 800131a:	2240      	movs	r2, #64	@ 0x40
 800131c:	89a3      	ldrh	r3, [r4, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	b21b      	sxth	r3, r3
 8001322:	2001      	movs	r0, #1
 8001324:	81a3      	strh	r3, [r4, #12]
 8001326:	4240      	negs	r0, r0
 8001328:	e7d9      	b.n	80012de <__sflush_r+0x86>
 800132a:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800132c:	2a00      	cmp	r2, #0
 800132e:	dc9f      	bgt.n	8001270 <__sflush_r+0x18>
 8001330:	e7d4      	b.n	80012dc <__sflush_r+0x84>
 8001332:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001334:	e7b0      	b.n	8001298 <__sflush_r+0x40>
 8001336:	6839      	ldr	r1, [r7, #0]
 8001338:	220c      	movs	r2, #12
 800133a:	5ea3      	ldrsh	r3, [r4, r2]
 800133c:	291d      	cmp	r1, #29
 800133e:	d816      	bhi.n	800136e <__sflush_r+0x116>
 8001340:	4a0c      	ldr	r2, [pc, #48]	@ (8001374 <__sflush_r+0x11c>)
 8001342:	40ca      	lsrs	r2, r1
 8001344:	07d2      	lsls	r2, r2, #31
 8001346:	d512      	bpl.n	800136e <__sflush_r+0x116>
 8001348:	2200      	movs	r2, #0
 800134a:	6062      	str	r2, [r4, #4]
 800134c:	6922      	ldr	r2, [r4, #16]
 800134e:	6022      	str	r2, [r4, #0]
 8001350:	04db      	lsls	r3, r3, #19
 8001352:	d5b6      	bpl.n	80012c2 <__sflush_r+0x6a>
 8001354:	2900      	cmp	r1, #0
 8001356:	d1b4      	bne.n	80012c2 <__sflush_r+0x6a>
 8001358:	6560      	str	r0, [r4, #84]	@ 0x54
 800135a:	e7b2      	b.n	80012c2 <__sflush_r+0x6a>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d096      	beq.n	8001290 <__sflush_r+0x38>
 8001362:	2b1d      	cmp	r3, #29
 8001364:	d001      	beq.n	800136a <__sflush_r+0x112>
 8001366:	2b16      	cmp	r3, #22
 8001368:	d1d7      	bne.n	800131a <__sflush_r+0xc2>
 800136a:	603d      	str	r5, [r7, #0]
 800136c:	e7b6      	b.n	80012dc <__sflush_r+0x84>
 800136e:	2240      	movs	r2, #64	@ 0x40
 8001370:	4313      	orrs	r3, r2
 8001372:	e7d6      	b.n	8001322 <__sflush_r+0xca>
 8001374:	20400001 	.word	0x20400001

08001378 <_fflush_r>:
 8001378:	690b      	ldr	r3, [r1, #16]
 800137a:	b570      	push	{r4, r5, r6, lr}
 800137c:	0005      	movs	r5, r0
 800137e:	000c      	movs	r4, r1
 8001380:	2b00      	cmp	r3, #0
 8001382:	d008      	beq.n	8001396 <_fflush_r+0x1e>
 8001384:	2800      	cmp	r0, #0
 8001386:	d002      	beq.n	800138e <_fflush_r+0x16>
 8001388:	6a03      	ldr	r3, [r0, #32]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00a      	beq.n	80013a4 <_fflush_r+0x2c>
 800138e:	220c      	movs	r2, #12
 8001390:	5ea3      	ldrsh	r3, [r4, r2]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <_fflush_r+0x22>
 8001396:	2000      	movs	r0, #0
 8001398:	bd70      	pop	{r4, r5, r6, pc}
 800139a:	0021      	movs	r1, r4
 800139c:	0028      	movs	r0, r5
 800139e:	f7ff ff5b 	bl	8001258 <__sflush_r>
 80013a2:	e7f9      	b.n	8001398 <_fflush_r+0x20>
 80013a4:	f7ff ff2a 	bl	80011fc <__sinit>
 80013a8:	e7f1      	b.n	800138e <_fflush_r+0x16>
 80013aa:	46c0      	nop			@ (mov r8, r8)

080013ac <fflush>:
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	1e04      	subs	r4, r0, #0
 80013b0:	d018      	beq.n	80013e4 <fflush+0x38>
 80013b2:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <fflush+0x44>)
 80013b4:	681d      	ldr	r5, [r3, #0]
 80013b6:	6903      	ldr	r3, [r0, #16]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d008      	beq.n	80013ce <fflush+0x22>
 80013bc:	2d00      	cmp	r5, #0
 80013be:	d002      	beq.n	80013c6 <fflush+0x1a>
 80013c0:	6a2b      	ldr	r3, [r5, #32]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00a      	beq.n	80013dc <fflush+0x30>
 80013c6:	220c      	movs	r2, #12
 80013c8:	5ea3      	ldrsh	r3, [r4, r2]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <fflush+0x26>
 80013ce:	2000      	movs	r0, #0
 80013d0:	bd70      	pop	{r4, r5, r6, pc}
 80013d2:	0021      	movs	r1, r4
 80013d4:	0028      	movs	r0, r5
 80013d6:	f7ff ff3f 	bl	8001258 <__sflush_r>
 80013da:	e7f9      	b.n	80013d0 <fflush+0x24>
 80013dc:	0028      	movs	r0, r5
 80013de:	f7ff ff0d 	bl	80011fc <__sinit>
 80013e2:	e7f0      	b.n	80013c6 <fflush+0x1a>
 80013e4:	4a03      	ldr	r2, [pc, #12]	@ (80013f4 <fflush+0x48>)
 80013e6:	4904      	ldr	r1, [pc, #16]	@ (80013f8 <fflush+0x4c>)
 80013e8:	4804      	ldr	r0, [pc, #16]	@ (80013fc <fflush+0x50>)
 80013ea:	f000 f969 	bl	80016c0 <_fwalk_sglue>
 80013ee:	e7ef      	b.n	80013d0 <fflush+0x24>
 80013f0:	20000004 	.word	0x20000004
 80013f4:	20000054 	.word	0x20000054
 80013f8:	08001379 	.word	0x08001379
 80013fc:	20000008 	.word	0x20000008

08001400 <sbrk_aligned>:
 8001400:	b570      	push	{r4, r5, r6, lr}
 8001402:	4e10      	ldr	r6, [pc, #64]	@ (8001444 <sbrk_aligned+0x44>)
 8001404:	0005      	movs	r5, r0
 8001406:	6833      	ldr	r3, [r6, #0]
 8001408:	000c      	movs	r4, r1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d015      	beq.n	800143a <sbrk_aligned+0x3a>
 800140e:	0021      	movs	r1, r4
 8001410:	0028      	movs	r0, r5
 8001412:	f000 fcc5 	bl	8001da0 <_sbrk_r>
 8001416:	1c43      	adds	r3, r0, #1
 8001418:	d00c      	beq.n	8001434 <sbrk_aligned+0x34>
 800141a:	2303      	movs	r3, #3
 800141c:	1cc4      	adds	r4, r0, #3
 800141e:	439c      	bics	r4, r3
 8001420:	42a0      	cmp	r0, r4
 8001422:	d005      	beq.n	8001430 <sbrk_aligned+0x30>
 8001424:	1a21      	subs	r1, r4, r0
 8001426:	0028      	movs	r0, r5
 8001428:	f000 fcba 	bl	8001da0 <_sbrk_r>
 800142c:	3001      	adds	r0, #1
 800142e:	d001      	beq.n	8001434 <sbrk_aligned+0x34>
 8001430:	0020      	movs	r0, r4
 8001432:	bd70      	pop	{r4, r5, r6, pc}
 8001434:	2401      	movs	r4, #1
 8001436:	4264      	negs	r4, r4
 8001438:	e7fa      	b.n	8001430 <sbrk_aligned+0x30>
 800143a:	2100      	movs	r1, #0
 800143c:	f000 fcb0 	bl	8001da0 <_sbrk_r>
 8001440:	6030      	str	r0, [r6, #0]
 8001442:	e7e4      	b.n	800140e <sbrk_aligned+0xe>
 8001444:	20000310 	.word	0x20000310

08001448 <_malloc_r>:
 8001448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144a:	2303      	movs	r3, #3
 800144c:	46ce      	mov	lr, r9
 800144e:	4647      	mov	r7, r8
 8001450:	1ccd      	adds	r5, r1, #3
 8001452:	439d      	bics	r5, r3
 8001454:	3508      	adds	r5, #8
 8001456:	0006      	movs	r6, r0
 8001458:	b580      	push	{r7, lr}
 800145a:	2d0c      	cmp	r5, #12
 800145c:	d21e      	bcs.n	800149c <_malloc_r+0x54>
 800145e:	250c      	movs	r5, #12
 8001460:	42a9      	cmp	r1, r5
 8001462:	d81d      	bhi.n	80014a0 <_malloc_r+0x58>
 8001464:	0030      	movs	r0, r6
 8001466:	f000 fbc3 	bl	8001bf0 <__malloc_lock>
 800146a:	4f3a      	ldr	r7, [pc, #232]	@ (8001554 <_malloc_r+0x10c>)
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	2a00      	cmp	r2, #0
 8001470:	d01a      	beq.n	80014a8 <_malloc_r+0x60>
 8001472:	0014      	movs	r4, r2
 8001474:	e004      	b.n	8001480 <_malloc_r+0x38>
 8001476:	6863      	ldr	r3, [r4, #4]
 8001478:	0022      	movs	r2, r4
 800147a:	2b00      	cmp	r3, #0
 800147c:	d014      	beq.n	80014a8 <_malloc_r+0x60>
 800147e:	001c      	movs	r4, r3
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	1b5b      	subs	r3, r3, r5
 8001484:	d4f7      	bmi.n	8001476 <_malloc_r+0x2e>
 8001486:	2b0b      	cmp	r3, #11
 8001488:	d927      	bls.n	80014da <_malloc_r+0x92>
 800148a:	1961      	adds	r1, r4, r5
 800148c:	6025      	str	r5, [r4, #0]
 800148e:	4294      	cmp	r4, r2
 8001490:	d05b      	beq.n	800154a <_malloc_r+0x102>
 8001492:	6051      	str	r1, [r2, #4]
 8001494:	600b      	str	r3, [r1, #0]
 8001496:	6863      	ldr	r3, [r4, #4]
 8001498:	604b      	str	r3, [r1, #4]
 800149a:	e00d      	b.n	80014b8 <_malloc_r+0x70>
 800149c:	2d00      	cmp	r5, #0
 800149e:	dadf      	bge.n	8001460 <_malloc_r+0x18>
 80014a0:	230c      	movs	r3, #12
 80014a2:	2000      	movs	r0, #0
 80014a4:	6033      	str	r3, [r6, #0]
 80014a6:	e014      	b.n	80014d2 <_malloc_r+0x8a>
 80014a8:	0029      	movs	r1, r5
 80014aa:	0030      	movs	r0, r6
 80014ac:	f7ff ffa8 	bl	8001400 <sbrk_aligned>
 80014b0:	0004      	movs	r4, r0
 80014b2:	1c43      	adds	r3, r0, #1
 80014b4:	d019      	beq.n	80014ea <_malloc_r+0xa2>
 80014b6:	6005      	str	r5, [r0, #0]
 80014b8:	0030      	movs	r0, r6
 80014ba:	f000 fb9b 	bl	8001bf4 <__malloc_unlock>
 80014be:	0020      	movs	r0, r4
 80014c0:	2207      	movs	r2, #7
 80014c2:	300b      	adds	r0, #11
 80014c4:	1d23      	adds	r3, r4, #4
 80014c6:	4390      	bics	r0, r2
 80014c8:	1ac2      	subs	r2, r0, r3
 80014ca:	4298      	cmp	r0, r3
 80014cc:	d001      	beq.n	80014d2 <_malloc_r+0x8a>
 80014ce:	1a1b      	subs	r3, r3, r0
 80014d0:	50a3      	str	r3, [r4, r2]
 80014d2:	bcc0      	pop	{r6, r7}
 80014d4:	46b9      	mov	r9, r7
 80014d6:	46b0      	mov	r8, r6
 80014d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014da:	6863      	ldr	r3, [r4, #4]
 80014dc:	4294      	cmp	r4, r2
 80014de:	d002      	beq.n	80014e6 <_malloc_r+0x9e>
 80014e0:	6053      	str	r3, [r2, #4]
 80014e2:	e7e9      	b.n	80014b8 <_malloc_r+0x70>
 80014e4:	4643      	mov	r3, r8
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	e7e6      	b.n	80014b8 <_malloc_r+0x70>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4698      	mov	r8, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d024      	beq.n	800153c <_malloc_r+0xf4>
 80014f2:	4644      	mov	r4, r8
 80014f4:	6863      	ldr	r3, [r4, #4]
 80014f6:	4698      	mov	r8, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1fa      	bne.n	80014f2 <_malloc_r+0xaa>
 80014fc:	6823      	ldr	r3, [r4, #0]
 80014fe:	2100      	movs	r1, #0
 8001500:	4699      	mov	r9, r3
 8001502:	0030      	movs	r0, r6
 8001504:	44a1      	add	r9, r4
 8001506:	f000 fc4b 	bl	8001da0 <_sbrk_r>
 800150a:	4581      	cmp	r9, r0
 800150c:	d116      	bne.n	800153c <_malloc_r+0xf4>
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	0030      	movs	r0, r6
 8001512:	1aed      	subs	r5, r5, r3
 8001514:	0029      	movs	r1, r5
 8001516:	f7ff ff73 	bl	8001400 <sbrk_aligned>
 800151a:	3001      	adds	r0, #1
 800151c:	d00e      	beq.n	800153c <_malloc_r+0xf4>
 800151e:	6823      	ldr	r3, [r4, #0]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	195b      	adds	r3, r3, r5
 8001524:	6023      	str	r3, [r4, #0]
 8001526:	6853      	ldr	r3, [r2, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <_malloc_r+0xea>
 800152c:	e7da      	b.n	80014e4 <_malloc_r+0x9c>
 800152e:	001a      	movs	r2, r3
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	429c      	cmp	r4, r3
 8001534:	d1fb      	bne.n	800152e <_malloc_r+0xe6>
 8001536:	2300      	movs	r3, #0
 8001538:	6053      	str	r3, [r2, #4]
 800153a:	e7bd      	b.n	80014b8 <_malloc_r+0x70>
 800153c:	230c      	movs	r3, #12
 800153e:	0030      	movs	r0, r6
 8001540:	6033      	str	r3, [r6, #0]
 8001542:	f000 fb57 	bl	8001bf4 <__malloc_unlock>
 8001546:	2000      	movs	r0, #0
 8001548:	e7c3      	b.n	80014d2 <_malloc_r+0x8a>
 800154a:	6079      	str	r1, [r7, #4]
 800154c:	600b      	str	r3, [r1, #0]
 800154e:	6863      	ldr	r3, [r4, #4]
 8001550:	604b      	str	r3, [r1, #4]
 8001552:	e7b1      	b.n	80014b8 <_malloc_r+0x70>
 8001554:	20000310 	.word	0x20000310

08001558 <_free_r>:
 8001558:	b570      	push	{r4, r5, r6, lr}
 800155a:	0005      	movs	r5, r0
 800155c:	2900      	cmp	r1, #0
 800155e:	d015      	beq.n	800158c <_free_r+0x34>
 8001560:	1f0c      	subs	r4, r1, #4
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	db23      	blt.n	80015b0 <_free_r+0x58>
 8001568:	0028      	movs	r0, r5
 800156a:	f000 fb41 	bl	8001bf0 <__malloc_lock>
 800156e:	4a27      	ldr	r2, [pc, #156]	@ (800160c <_free_r+0xb4>)
 8001570:	6813      	ldr	r3, [r2, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d005      	beq.n	8001582 <_free_r+0x2a>
 8001576:	42a3      	cmp	r3, r4
 8001578:	d90b      	bls.n	8001592 <_free_r+0x3a>
 800157a:	6821      	ldr	r1, [r4, #0]
 800157c:	1860      	adds	r0, r4, r1
 800157e:	4283      	cmp	r3, r0
 8001580:	d02c      	beq.n	80015dc <_free_r+0x84>
 8001582:	0028      	movs	r0, r5
 8001584:	6063      	str	r3, [r4, #4]
 8001586:	6014      	str	r4, [r2, #0]
 8001588:	f000 fb34 	bl	8001bf4 <__malloc_unlock>
 800158c:	bd70      	pop	{r4, r5, r6, pc}
 800158e:	42a3      	cmp	r3, r4
 8001590:	d810      	bhi.n	80015b4 <_free_r+0x5c>
 8001592:	001a      	movs	r2, r3
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f9      	bne.n	800158e <_free_r+0x36>
 800159a:	6810      	ldr	r0, [r2, #0]
 800159c:	1811      	adds	r1, r2, r0
 800159e:	428c      	cmp	r4, r1
 80015a0:	d018      	beq.n	80015d4 <_free_r+0x7c>
 80015a2:	d32c      	bcc.n	80015fe <_free_r+0xa6>
 80015a4:	6063      	str	r3, [r4, #4]
 80015a6:	6054      	str	r4, [r2, #4]
 80015a8:	0028      	movs	r0, r5
 80015aa:	f000 fb23 	bl	8001bf4 <__malloc_unlock>
 80015ae:	e7ed      	b.n	800158c <_free_r+0x34>
 80015b0:	18e4      	adds	r4, r4, r3
 80015b2:	e7d9      	b.n	8001568 <_free_r+0x10>
 80015b4:	6811      	ldr	r1, [r2, #0]
 80015b6:	1850      	adds	r0, r2, r1
 80015b8:	42a0      	cmp	r0, r4
 80015ba:	d014      	beq.n	80015e6 <_free_r+0x8e>
 80015bc:	d81f      	bhi.n	80015fe <_free_r+0xa6>
 80015be:	6821      	ldr	r1, [r4, #0]
 80015c0:	1860      	adds	r0, r4, r1
 80015c2:	4283      	cmp	r3, r0
 80015c4:	d1ee      	bne.n	80015a4 <_free_r+0x4c>
 80015c6:	6818      	ldr	r0, [r3, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	1841      	adds	r1, r0, r1
 80015cc:	6021      	str	r1, [r4, #0]
 80015ce:	6063      	str	r3, [r4, #4]
 80015d0:	6054      	str	r4, [r2, #4]
 80015d2:	e7e9      	b.n	80015a8 <_free_r+0x50>
 80015d4:	6823      	ldr	r3, [r4, #0]
 80015d6:	181b      	adds	r3, r3, r0
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e7e5      	b.n	80015a8 <_free_r+0x50>
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	1841      	adds	r1, r0, r1
 80015e2:	6021      	str	r1, [r4, #0]
 80015e4:	e7cd      	b.n	8001582 <_free_r+0x2a>
 80015e6:	6820      	ldr	r0, [r4, #0]
 80015e8:	1809      	adds	r1, r1, r0
 80015ea:	1850      	adds	r0, r2, r1
 80015ec:	6011      	str	r1, [r2, #0]
 80015ee:	4283      	cmp	r3, r0
 80015f0:	d1da      	bne.n	80015a8 <_free_r+0x50>
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	1841      	adds	r1, r0, r1
 80015f8:	6011      	str	r1, [r2, #0]
 80015fa:	6053      	str	r3, [r2, #4]
 80015fc:	e7d4      	b.n	80015a8 <_free_r+0x50>
 80015fe:	230c      	movs	r3, #12
 8001600:	0028      	movs	r0, r5
 8001602:	602b      	str	r3, [r5, #0]
 8001604:	f000 faf6 	bl	8001bf4 <__malloc_unlock>
 8001608:	e7c0      	b.n	800158c <_free_r+0x34>
 800160a:	46c0      	nop			@ (mov r8, r8)
 800160c:	20000314 	.word	0x20000314

08001610 <memmove>:
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	4288      	cmp	r0, r1
 8001614:	d90a      	bls.n	800162c <memmove+0x1c>
 8001616:	188b      	adds	r3, r1, r2
 8001618:	4298      	cmp	r0, r3
 800161a:	d207      	bcs.n	800162c <memmove+0x1c>
 800161c:	1e53      	subs	r3, r2, #1
 800161e:	2a00      	cmp	r2, #0
 8001620:	d003      	beq.n	800162a <memmove+0x1a>
 8001622:	5cca      	ldrb	r2, [r1, r3]
 8001624:	54c2      	strb	r2, [r0, r3]
 8001626:	3b01      	subs	r3, #1
 8001628:	d2fb      	bcs.n	8001622 <memmove+0x12>
 800162a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162c:	0005      	movs	r5, r0
 800162e:	2a0f      	cmp	r2, #15
 8001630:	d80a      	bhi.n	8001648 <memmove+0x38>
 8001632:	1e56      	subs	r6, r2, #1
 8001634:	2a00      	cmp	r2, #0
 8001636:	d0f8      	beq.n	800162a <memmove+0x1a>
 8001638:	2300      	movs	r3, #0
 800163a:	5ccc      	ldrb	r4, [r1, r3]
 800163c:	001a      	movs	r2, r3
 800163e:	54ec      	strb	r4, [r5, r3]
 8001640:	3301      	adds	r3, #1
 8001642:	4296      	cmp	r6, r2
 8001644:	d1f9      	bne.n	800163a <memmove+0x2a>
 8001646:	e7f0      	b.n	800162a <memmove+0x1a>
 8001648:	2703      	movs	r7, #3
 800164a:	003e      	movs	r6, r7
 800164c:	430d      	orrs	r5, r1
 800164e:	000c      	movs	r4, r1
 8001650:	0003      	movs	r3, r0
 8001652:	402e      	ands	r6, r5
 8001654:	422f      	tst	r7, r5
 8001656:	d12d      	bne.n	80016b4 <memmove+0xa4>
 8001658:	0015      	movs	r5, r2
 800165a:	3d10      	subs	r5, #16
 800165c:	092d      	lsrs	r5, r5, #4
 800165e:	46ac      	mov	ip, r5
 8001660:	012f      	lsls	r7, r5, #4
 8001662:	183f      	adds	r7, r7, r0
 8001664:	6825      	ldr	r5, [r4, #0]
 8001666:	601d      	str	r5, [r3, #0]
 8001668:	6865      	ldr	r5, [r4, #4]
 800166a:	605d      	str	r5, [r3, #4]
 800166c:	68a5      	ldr	r5, [r4, #8]
 800166e:	609d      	str	r5, [r3, #8]
 8001670:	68e5      	ldr	r5, [r4, #12]
 8001672:	3410      	adds	r4, #16
 8001674:	60dd      	str	r5, [r3, #12]
 8001676:	001d      	movs	r5, r3
 8001678:	3310      	adds	r3, #16
 800167a:	42bd      	cmp	r5, r7
 800167c:	d1f2      	bne.n	8001664 <memmove+0x54>
 800167e:	4665      	mov	r5, ip
 8001680:	230f      	movs	r3, #15
 8001682:	240c      	movs	r4, #12
 8001684:	3501      	adds	r5, #1
 8001686:	012d      	lsls	r5, r5, #4
 8001688:	1949      	adds	r1, r1, r5
 800168a:	4013      	ands	r3, r2
 800168c:	1945      	adds	r5, r0, r5
 800168e:	4214      	tst	r4, r2
 8001690:	d013      	beq.n	80016ba <memmove+0xaa>
 8001692:	3b04      	subs	r3, #4
 8001694:	089b      	lsrs	r3, r3, #2
 8001696:	3301      	adds	r3, #1
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	598c      	ldr	r4, [r1, r6]
 800169c:	51ac      	str	r4, [r5, r6]
 800169e:	3604      	adds	r6, #4
 80016a0:	429e      	cmp	r6, r3
 80016a2:	d1fa      	bne.n	800169a <memmove+0x8a>
 80016a4:	2303      	movs	r3, #3
 80016a6:	401a      	ands	r2, r3
 80016a8:	19ad      	adds	r5, r5, r6
 80016aa:	1989      	adds	r1, r1, r6
 80016ac:	1e56      	subs	r6, r2, #1
 80016ae:	2a00      	cmp	r2, #0
 80016b0:	d1c2      	bne.n	8001638 <memmove+0x28>
 80016b2:	e7ba      	b.n	800162a <memmove+0x1a>
 80016b4:	0005      	movs	r5, r0
 80016b6:	1e56      	subs	r6, r2, #1
 80016b8:	e7be      	b.n	8001638 <memmove+0x28>
 80016ba:	001a      	movs	r2, r3
 80016bc:	e7b9      	b.n	8001632 <memmove+0x22>
 80016be:	46c0      	nop			@ (mov r8, r8)

080016c0 <_fwalk_sglue>:
 80016c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016c2:	4647      	mov	r7, r8
 80016c4:	46ce      	mov	lr, r9
 80016c6:	4688      	mov	r8, r1
 80016c8:	b580      	push	{r7, lr}
 80016ca:	4681      	mov	r9, r0
 80016cc:	0017      	movs	r7, r2
 80016ce:	2600      	movs	r6, #0
 80016d0:	687d      	ldr	r5, [r7, #4]
 80016d2:	68bc      	ldr	r4, [r7, #8]
 80016d4:	3d01      	subs	r5, #1
 80016d6:	d40d      	bmi.n	80016f4 <_fwalk_sglue+0x34>
 80016d8:	89a3      	ldrh	r3, [r4, #12]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d907      	bls.n	80016ee <_fwalk_sglue+0x2e>
 80016de:	220e      	movs	r2, #14
 80016e0:	5ea3      	ldrsh	r3, [r4, r2]
 80016e2:	3301      	adds	r3, #1
 80016e4:	d003      	beq.n	80016ee <_fwalk_sglue+0x2e>
 80016e6:	0021      	movs	r1, r4
 80016e8:	4648      	mov	r0, r9
 80016ea:	47c0      	blx	r8
 80016ec:	4306      	orrs	r6, r0
 80016ee:	3468      	adds	r4, #104	@ 0x68
 80016f0:	3d01      	subs	r5, #1
 80016f2:	d2f1      	bcs.n	80016d8 <_fwalk_sglue+0x18>
 80016f4:	683f      	ldr	r7, [r7, #0]
 80016f6:	2f00      	cmp	r7, #0
 80016f8:	d1ea      	bne.n	80016d0 <_fwalk_sglue+0x10>
 80016fa:	0030      	movs	r0, r6
 80016fc:	bcc0      	pop	{r6, r7}
 80016fe:	46b9      	mov	r9, r7
 8001700:	46b0      	mov	r8, r6
 8001702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001704 <__swsetup_r>:
 8001704:	4b31      	ldr	r3, [pc, #196]	@ (80017cc <__swsetup_r+0xc8>)
 8001706:	b570      	push	{r4, r5, r6, lr}
 8001708:	0005      	movs	r5, r0
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	000c      	movs	r4, r1
 800170e:	2800      	cmp	r0, #0
 8001710:	d002      	beq.n	8001718 <__swsetup_r+0x14>
 8001712:	6a02      	ldr	r2, [r0, #32]
 8001714:	2a00      	cmp	r2, #0
 8001716:	d04f      	beq.n	80017b8 <__swsetup_r+0xb4>
 8001718:	220c      	movs	r2, #12
 800171a:	5ea3      	ldrsh	r3, [r4, r2]
 800171c:	071a      	lsls	r2, r3, #28
 800171e:	d51d      	bpl.n	800175c <__swsetup_r+0x58>
 8001720:	6922      	ldr	r2, [r4, #16]
 8001722:	2a00      	cmp	r2, #0
 8001724:	d024      	beq.n	8001770 <__swsetup_r+0x6c>
 8001726:	07d9      	lsls	r1, r3, #31
 8001728:	d508      	bpl.n	800173c <__swsetup_r+0x38>
 800172a:	2100      	movs	r1, #0
 800172c:	60a1      	str	r1, [r4, #8]
 800172e:	6961      	ldr	r1, [r4, #20]
 8001730:	2000      	movs	r0, #0
 8001732:	4249      	negs	r1, r1
 8001734:	61a1      	str	r1, [r4, #24]
 8001736:	2a00      	cmp	r2, #0
 8001738:	d008      	beq.n	800174c <__swsetup_r+0x48>
 800173a:	bd70      	pop	{r4, r5, r6, pc}
 800173c:	2100      	movs	r1, #0
 800173e:	0798      	lsls	r0, r3, #30
 8001740:	d400      	bmi.n	8001744 <__swsetup_r+0x40>
 8001742:	6961      	ldr	r1, [r4, #20]
 8001744:	2000      	movs	r0, #0
 8001746:	60a1      	str	r1, [r4, #8]
 8001748:	2a00      	cmp	r2, #0
 800174a:	d1f6      	bne.n	800173a <__swsetup_r+0x36>
 800174c:	061a      	lsls	r2, r3, #24
 800174e:	d5f4      	bpl.n	800173a <__swsetup_r+0x36>
 8001750:	2240      	movs	r2, #64	@ 0x40
 8001752:	4313      	orrs	r3, r2
 8001754:	81a3      	strh	r3, [r4, #12]
 8001756:	2001      	movs	r0, #1
 8001758:	4240      	negs	r0, r0
 800175a:	e7ee      	b.n	800173a <__swsetup_r+0x36>
 800175c:	06da      	lsls	r2, r3, #27
 800175e:	d52e      	bpl.n	80017be <__swsetup_r+0xba>
 8001760:	075a      	lsls	r2, r3, #29
 8001762:	d414      	bmi.n	800178e <__swsetup_r+0x8a>
 8001764:	6922      	ldr	r2, [r4, #16]
 8001766:	2108      	movs	r1, #8
 8001768:	430b      	orrs	r3, r1
 800176a:	81a3      	strh	r3, [r4, #12]
 800176c:	2a00      	cmp	r2, #0
 800176e:	d1da      	bne.n	8001726 <__swsetup_r+0x22>
 8001770:	21a0      	movs	r1, #160	@ 0xa0
 8001772:	2080      	movs	r0, #128	@ 0x80
 8001774:	0089      	lsls	r1, r1, #2
 8001776:	0080      	lsls	r0, r0, #2
 8001778:	4019      	ands	r1, r3
 800177a:	4281      	cmp	r1, r0
 800177c:	d0d3      	beq.n	8001726 <__swsetup_r+0x22>
 800177e:	0021      	movs	r1, r4
 8001780:	0028      	movs	r0, r5
 8001782:	f000 fa39 	bl	8001bf8 <__smakebuf_r>
 8001786:	220c      	movs	r2, #12
 8001788:	5ea3      	ldrsh	r3, [r4, r2]
 800178a:	6922      	ldr	r2, [r4, #16]
 800178c:	e7cb      	b.n	8001726 <__swsetup_r+0x22>
 800178e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001790:	2900      	cmp	r1, #0
 8001792:	d00a      	beq.n	80017aa <__swsetup_r+0xa6>
 8001794:	0022      	movs	r2, r4
 8001796:	3244      	adds	r2, #68	@ 0x44
 8001798:	4291      	cmp	r1, r2
 800179a:	d004      	beq.n	80017a6 <__swsetup_r+0xa2>
 800179c:	0028      	movs	r0, r5
 800179e:	f7ff fedb 	bl	8001558 <_free_r>
 80017a2:	220c      	movs	r2, #12
 80017a4:	5ea3      	ldrsh	r3, [r4, r2]
 80017a6:	2200      	movs	r2, #0
 80017a8:	6362      	str	r2, [r4, #52]	@ 0x34
 80017aa:	2224      	movs	r2, #36	@ 0x24
 80017ac:	4393      	bics	r3, r2
 80017ae:	2200      	movs	r2, #0
 80017b0:	6062      	str	r2, [r4, #4]
 80017b2:	6922      	ldr	r2, [r4, #16]
 80017b4:	6022      	str	r2, [r4, #0]
 80017b6:	e7d6      	b.n	8001766 <__swsetup_r+0x62>
 80017b8:	f7ff fd20 	bl	80011fc <__sinit>
 80017bc:	e7ac      	b.n	8001718 <__swsetup_r+0x14>
 80017be:	2209      	movs	r2, #9
 80017c0:	602a      	str	r2, [r5, #0]
 80017c2:	2240      	movs	r2, #64	@ 0x40
 80017c4:	4313      	orrs	r3, r2
 80017c6:	81a3      	strh	r3, [r4, #12]
 80017c8:	e7c5      	b.n	8001756 <__swsetup_r+0x52>
 80017ca:	46c0      	nop			@ (mov r8, r8)
 80017cc:	20000004 	.word	0x20000004

080017d0 <_realloc_r>:
 80017d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d2:	46c6      	mov	lr, r8
 80017d4:	0007      	movs	r7, r0
 80017d6:	000e      	movs	r6, r1
 80017d8:	0014      	movs	r4, r2
 80017da:	b500      	push	{lr}
 80017dc:	2900      	cmp	r1, #0
 80017de:	d02d      	beq.n	800183c <_realloc_r+0x6c>
 80017e0:	2a00      	cmp	r2, #0
 80017e2:	d027      	beq.n	8001834 <_realloc_r+0x64>
 80017e4:	f000 fb42 	bl	8001e6c <_malloc_usable_size_r>
 80017e8:	4680      	mov	r8, r0
 80017ea:	4284      	cmp	r4, r0
 80017ec:	d803      	bhi.n	80017f6 <_realloc_r+0x26>
 80017ee:	0035      	movs	r5, r6
 80017f0:	0843      	lsrs	r3, r0, #1
 80017f2:	42a3      	cmp	r3, r4
 80017f4:	d310      	bcc.n	8001818 <_realloc_r+0x48>
 80017f6:	0021      	movs	r1, r4
 80017f8:	0038      	movs	r0, r7
 80017fa:	f7ff fe25 	bl	8001448 <_malloc_r>
 80017fe:	1e05      	subs	r5, r0, #0
 8001800:	d00a      	beq.n	8001818 <_realloc_r+0x48>
 8001802:	0022      	movs	r2, r4
 8001804:	4544      	cmp	r4, r8
 8001806:	d80b      	bhi.n	8001820 <_realloc_r+0x50>
 8001808:	0031      	movs	r1, r6
 800180a:	0028      	movs	r0, r5
 800180c:	f7fe ff06 	bl	800061c <memcpy>
 8001810:	0031      	movs	r1, r6
 8001812:	0038      	movs	r0, r7
 8001814:	f7ff fea0 	bl	8001558 <_free_r>
 8001818:	0028      	movs	r0, r5
 800181a:	bc80      	pop	{r7}
 800181c:	46b8      	mov	r8, r7
 800181e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001820:	0031      	movs	r1, r6
 8001822:	4642      	mov	r2, r8
 8001824:	0028      	movs	r0, r5
 8001826:	f7fe fef9 	bl	800061c <memcpy>
 800182a:	0031      	movs	r1, r6
 800182c:	0038      	movs	r0, r7
 800182e:	f7ff fe93 	bl	8001558 <_free_r>
 8001832:	e7f1      	b.n	8001818 <_realloc_r+0x48>
 8001834:	f7ff fe90 	bl	8001558 <_free_r>
 8001838:	2500      	movs	r5, #0
 800183a:	e7ed      	b.n	8001818 <_realloc_r+0x48>
 800183c:	0011      	movs	r1, r2
 800183e:	f7ff fe03 	bl	8001448 <_malloc_r>
 8001842:	0005      	movs	r5, r0
 8001844:	e7e8      	b.n	8001818 <_realloc_r+0x48>
 8001846:	46c0      	nop			@ (mov r8, r8)

08001848 <_printf_common>:
 8001848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184a:	4657      	mov	r7, sl
 800184c:	464e      	mov	r6, r9
 800184e:	4645      	mov	r5, r8
 8001850:	46de      	mov	lr, fp
 8001852:	b5e0      	push	{r5, r6, r7, lr}
 8001854:	001f      	movs	r7, r3
 8001856:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001858:	4692      	mov	sl, r2
 800185a:	4698      	mov	r8, r3
 800185c:	690a      	ldr	r2, [r1, #16]
 800185e:	688b      	ldr	r3, [r1, #8]
 8001860:	0006      	movs	r6, r0
 8001862:	000c      	movs	r4, r1
 8001864:	429a      	cmp	r2, r3
 8001866:	da00      	bge.n	800186a <_printf_common+0x22>
 8001868:	001a      	movs	r2, r3
 800186a:	4653      	mov	r3, sl
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	2343      	movs	r3, #67	@ 0x43
 8001870:	5ce3      	ldrb	r3, [r4, r3]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <_printf_common+0x34>
 8001876:	4651      	mov	r1, sl
 8001878:	3201      	adds	r2, #1
 800187a:	600a      	str	r2, [r1, #0]
 800187c:	6822      	ldr	r2, [r4, #0]
 800187e:	0691      	lsls	r1, r2, #26
 8001880:	d561      	bpl.n	8001946 <_printf_common+0xfe>
 8001882:	4653      	mov	r3, sl
 8001884:	4652      	mov	r2, sl
 8001886:	2006      	movs	r0, #6
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	3302      	adds	r3, #2
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	6822      	ldr	r2, [r4, #0]
 8001890:	0011      	movs	r1, r2
 8001892:	4210      	tst	r0, r2
 8001894:	d108      	bne.n	80018a8 <_printf_common+0x60>
 8001896:	2000      	movs	r0, #0
 8001898:	4681      	mov	r9, r0
 800189a:	3019      	adds	r0, #25
 800189c:	4683      	mov	fp, r0
 800189e:	68e1      	ldr	r1, [r4, #12]
 80018a0:	44a3      	add	fp, r4
 80018a2:	4299      	cmp	r1, r3
 80018a4:	dc47      	bgt.n	8001936 <_printf_common+0xee>
 80018a6:	0011      	movs	r1, r2
 80018a8:	2343      	movs	r3, #67	@ 0x43
 80018aa:	5ce3      	ldrb	r3, [r4, r3]
 80018ac:	1e5a      	subs	r2, r3, #1
 80018ae:	4193      	sbcs	r3, r2
 80018b0:	0689      	lsls	r1, r1, #26
 80018b2:	d50a      	bpl.n	80018ca <_printf_common+0x82>
 80018b4:	2030      	movs	r0, #48	@ 0x30
 80018b6:	18e1      	adds	r1, r4, r3
 80018b8:	3143      	adds	r1, #67	@ 0x43
 80018ba:	7008      	strb	r0, [r1, #0]
 80018bc:	2145      	movs	r1, #69	@ 0x45
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	5c61      	ldrb	r1, [r4, r1]
 80018c2:	18a2      	adds	r2, r4, r2
 80018c4:	3243      	adds	r2, #67	@ 0x43
 80018c6:	3302      	adds	r3, #2
 80018c8:	7011      	strb	r1, [r2, #0]
 80018ca:	0022      	movs	r2, r4
 80018cc:	0039      	movs	r1, r7
 80018ce:	0030      	movs	r0, r6
 80018d0:	3243      	adds	r2, #67	@ 0x43
 80018d2:	47c0      	blx	r8
 80018d4:	3001      	adds	r0, #1
 80018d6:	d01d      	beq.n	8001914 <_printf_common+0xcc>
 80018d8:	4653      	mov	r3, sl
 80018da:	2506      	movs	r5, #6
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68e1      	ldr	r1, [r4, #12]
 80018e0:	469c      	mov	ip, r3
 80018e2:	6823      	ldr	r3, [r4, #0]
 80018e4:	68a2      	ldr	r2, [r4, #8]
 80018e6:	6920      	ldr	r0, [r4, #16]
 80018e8:	402b      	ands	r3, r5
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d031      	beq.n	8001952 <_printf_common+0x10a>
 80018ee:	4282      	cmp	r2, r0
 80018f0:	dd39      	ble.n	8001966 <_printf_common+0x11e>
 80018f2:	2300      	movs	r3, #0
 80018f4:	4699      	mov	r9, r3
 80018f6:	1a12      	subs	r2, r2, r0
 80018f8:	4491      	add	r9, r2
 80018fa:	2500      	movs	r5, #0
 80018fc:	341a      	adds	r4, #26
 80018fe:	e002      	b.n	8001906 <_printf_common+0xbe>
 8001900:	3501      	adds	r5, #1
 8001902:	454d      	cmp	r5, r9
 8001904:	da2f      	bge.n	8001966 <_printf_common+0x11e>
 8001906:	2301      	movs	r3, #1
 8001908:	0022      	movs	r2, r4
 800190a:	0039      	movs	r1, r7
 800190c:	0030      	movs	r0, r6
 800190e:	47c0      	blx	r8
 8001910:	3001      	adds	r0, #1
 8001912:	d1f5      	bne.n	8001900 <_printf_common+0xb8>
 8001914:	2001      	movs	r0, #1
 8001916:	4240      	negs	r0, r0
 8001918:	bcf0      	pop	{r4, r5, r6, r7}
 800191a:	46bb      	mov	fp, r7
 800191c:	46b2      	mov	sl, r6
 800191e:	46a9      	mov	r9, r5
 8001920:	46a0      	mov	r8, r4
 8001922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001924:	2301      	movs	r3, #1
 8001926:	469c      	mov	ip, r3
 8001928:	4653      	mov	r3, sl
 800192a:	68e5      	ldr	r5, [r4, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	44e1      	add	r9, ip
 8001930:	1aed      	subs	r5, r5, r3
 8001932:	454d      	cmp	r5, r9
 8001934:	dd24      	ble.n	8001980 <_printf_common+0x138>
 8001936:	2301      	movs	r3, #1
 8001938:	465a      	mov	r2, fp
 800193a:	0039      	movs	r1, r7
 800193c:	0030      	movs	r0, r6
 800193e:	47c0      	blx	r8
 8001940:	3001      	adds	r0, #1
 8001942:	d1ef      	bne.n	8001924 <_printf_common+0xdc>
 8001944:	e7e6      	b.n	8001914 <_printf_common+0xcc>
 8001946:	2106      	movs	r1, #6
 8001948:	4211      	tst	r1, r2
 800194a:	d00e      	beq.n	800196a <_printf_common+0x122>
 800194c:	1e5a      	subs	r2, r3, #1
 800194e:	4193      	sbcs	r3, r2
 8001950:	e7bb      	b.n	80018ca <_printf_common+0x82>
 8001952:	4663      	mov	r3, ip
 8001954:	1ac9      	subs	r1, r1, r3
 8001956:	43cb      	mvns	r3, r1
 8001958:	17db      	asrs	r3, r3, #31
 800195a:	400b      	ands	r3, r1
 800195c:	4699      	mov	r9, r3
 800195e:	4282      	cmp	r2, r0
 8001960:	dcc9      	bgt.n	80018f6 <_printf_common+0xae>
 8001962:	2900      	cmp	r1, #0
 8001964:	dcc9      	bgt.n	80018fa <_printf_common+0xb2>
 8001966:	2000      	movs	r0, #0
 8001968:	e7d6      	b.n	8001918 <_printf_common+0xd0>
 800196a:	2000      	movs	r0, #0
 800196c:	4653      	mov	r3, sl
 800196e:	4681      	mov	r9, r0
 8001970:	3019      	adds	r0, #25
 8001972:	4683      	mov	fp, r0
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68e1      	ldr	r1, [r4, #12]
 8001978:	44a3      	add	fp, r4
 800197a:	4299      	cmp	r1, r3
 800197c:	dcdb      	bgt.n	8001936 <_printf_common+0xee>
 800197e:	e792      	b.n	80018a6 <_printf_common+0x5e>
 8001980:	2343      	movs	r3, #67	@ 0x43
 8001982:	6821      	ldr	r1, [r4, #0]
 8001984:	5ce3      	ldrb	r3, [r4, r3]
 8001986:	1e5a      	subs	r2, r3, #1
 8001988:	4193      	sbcs	r3, r2
 800198a:	0689      	lsls	r1, r1, #26
 800198c:	d492      	bmi.n	80018b4 <_printf_common+0x6c>
 800198e:	e79c      	b.n	80018ca <_printf_common+0x82>

08001990 <_printf_i>:
 8001990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001992:	464e      	mov	r6, r9
 8001994:	4699      	mov	r9, r3
 8001996:	2343      	movs	r3, #67	@ 0x43
 8001998:	469c      	mov	ip, r3
 800199a:	4657      	mov	r7, sl
 800199c:	4645      	mov	r5, r8
 800199e:	46de      	mov	lr, fp
 80019a0:	448c      	add	ip, r1
 80019a2:	4663      	mov	r3, ip
 80019a4:	b5e0      	push	{r5, r6, r7, lr}
 80019a6:	b087      	sub	sp, #28
 80019a8:	9302      	str	r3, [sp, #8]
 80019aa:	000c      	movs	r4, r1
 80019ac:	7e09      	ldrb	r1, [r1, #24]
 80019ae:	4690      	mov	r8, r2
 80019b0:	0007      	movs	r7, r0
 80019b2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80019b4:	2900      	cmp	r1, #0
 80019b6:	d014      	beq.n	80019e2 <_printf_i+0x52>
 80019b8:	000b      	movs	r3, r1
 80019ba:	3b58      	subs	r3, #88	@ 0x58
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b20      	cmp	r3, #32
 80019c0:	d848      	bhi.n	8001a54 <_printf_i+0xc4>
 80019c2:	4888      	ldr	r0, [pc, #544]	@ (8001be4 <_printf_i+0x254>)
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	58c3      	ldr	r3, [r0, r3]
 80019c8:	469f      	mov	pc, r3
 80019ca:	6813      	ldr	r3, [r2, #0]
 80019cc:	6821      	ldr	r1, [r4, #0]
 80019ce:	1d1d      	adds	r5, r3, #4
 80019d0:	6960      	ldr	r0, [r4, #20]
 80019d2:	6015      	str	r5, [r2, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	060e      	lsls	r6, r1, #24
 80019d8:	d402      	bmi.n	80019e0 <_printf_i+0x50>
 80019da:	0649      	lsls	r1, r1, #25
 80019dc:	d500      	bpl.n	80019e0 <_printf_i+0x50>
 80019de:	e0dc      	b.n	8001b9a <_printf_i+0x20a>
 80019e0:	6018      	str	r0, [r3, #0]
 80019e2:	2300      	movs	r3, #0
 80019e4:	9d02      	ldr	r5, [sp, #8]
 80019e6:	6123      	str	r3, [r4, #16]
 80019e8:	464b      	mov	r3, r9
 80019ea:	0021      	movs	r1, r4
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	0038      	movs	r0, r7
 80019f0:	4643      	mov	r3, r8
 80019f2:	aa05      	add	r2, sp, #20
 80019f4:	f7ff ff28 	bl	8001848 <_printf_common>
 80019f8:	3001      	adds	r0, #1
 80019fa:	d01e      	beq.n	8001a3a <_printf_i+0xaa>
 80019fc:	002a      	movs	r2, r5
 80019fe:	4641      	mov	r1, r8
 8001a00:	0038      	movs	r0, r7
 8001a02:	6923      	ldr	r3, [r4, #16]
 8001a04:	47c8      	blx	r9
 8001a06:	3001      	adds	r0, #1
 8001a08:	d017      	beq.n	8001a3a <_printf_i+0xaa>
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	68e0      	ldr	r0, [r4, #12]
 8001a0e:	9e05      	ldr	r6, [sp, #20]
 8001a10:	079b      	lsls	r3, r3, #30
 8001a12:	d51b      	bpl.n	8001a4c <_printf_i+0xbc>
 8001a14:	42b0      	cmp	r0, r6
 8001a16:	dd19      	ble.n	8001a4c <_printf_i+0xbc>
 8001a18:	2319      	movs	r3, #25
 8001a1a:	469a      	mov	sl, r3
 8001a1c:	2500      	movs	r5, #0
 8001a1e:	44a2      	add	sl, r4
 8001a20:	e004      	b.n	8001a2c <_printf_i+0x9c>
 8001a22:	68e0      	ldr	r0, [r4, #12]
 8001a24:	3501      	adds	r5, #1
 8001a26:	1b83      	subs	r3, r0, r6
 8001a28:	42ab      	cmp	r3, r5
 8001a2a:	dd0f      	ble.n	8001a4c <_printf_i+0xbc>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	4652      	mov	r2, sl
 8001a30:	4641      	mov	r1, r8
 8001a32:	0038      	movs	r0, r7
 8001a34:	47c8      	blx	r9
 8001a36:	3001      	adds	r0, #1
 8001a38:	d1f3      	bne.n	8001a22 <_printf_i+0x92>
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	4240      	negs	r0, r0
 8001a3e:	b007      	add	sp, #28
 8001a40:	bcf0      	pop	{r4, r5, r6, r7}
 8001a42:	46bb      	mov	fp, r7
 8001a44:	46b2      	mov	sl, r6
 8001a46:	46a9      	mov	r9, r5
 8001a48:	46a0      	mov	r8, r4
 8001a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4c:	42b0      	cmp	r0, r6
 8001a4e:	daf6      	bge.n	8001a3e <_printf_i+0xae>
 8001a50:	0030      	movs	r0, r6
 8001a52:	e7f4      	b.n	8001a3e <_printf_i+0xae>
 8001a54:	0025      	movs	r5, r4
 8001a56:	2342      	movs	r3, #66	@ 0x42
 8001a58:	2001      	movs	r0, #1
 8001a5a:	3542      	adds	r5, #66	@ 0x42
 8001a5c:	54e1      	strb	r1, [r4, r3]
 8001a5e:	2343      	movs	r3, #67	@ 0x43
 8001a60:	2200      	movs	r2, #0
 8001a62:	6120      	str	r0, [r4, #16]
 8001a64:	54e2      	strb	r2, [r4, r3]
 8001a66:	e7bf      	b.n	80019e8 <_printf_i+0x58>
 8001a68:	6813      	ldr	r3, [r2, #0]
 8001a6a:	6821      	ldr	r1, [r4, #0]
 8001a6c:	1d18      	adds	r0, r3, #4
 8001a6e:	6010      	str	r0, [r2, #0]
 8001a70:	060d      	lsls	r5, r1, #24
 8001a72:	d402      	bmi.n	8001a7a <_printf_i+0xea>
 8001a74:	064d      	lsls	r5, r1, #25
 8001a76:	d500      	bpl.n	8001a7a <_printf_i+0xea>
 8001a78:	e094      	b.n	8001ba4 <_printf_i+0x214>
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	0016      	movs	r6, r2
 8001a7e:	6863      	ldr	r3, [r4, #4]
 8001a80:	2a00      	cmp	r2, #0
 8001a82:	da00      	bge.n	8001a86 <_printf_i+0xf6>
 8001a84:	e092      	b.n	8001bac <_printf_i+0x21c>
 8001a86:	4a58      	ldr	r2, [pc, #352]	@ (8001be8 <_printf_i+0x258>)
 8001a88:	4693      	mov	fp, r2
 8001a8a:	220a      	movs	r2, #10
 8001a8c:	9203      	str	r2, [sp, #12]
 8001a8e:	e04b      	b.n	8001b28 <_printf_i+0x198>
 8001a90:	6813      	ldr	r3, [r2, #0]
 8001a92:	6820      	ldr	r0, [r4, #0]
 8001a94:	cb40      	ldmia	r3!, {r6}
 8001a96:	0605      	lsls	r5, r0, #24
 8001a98:	d401      	bmi.n	8001a9e <_printf_i+0x10e>
 8001a9a:	0640      	lsls	r0, r0, #25
 8001a9c:	d47f      	bmi.n	8001b9e <_printf_i+0x20e>
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	4b51      	ldr	r3, [pc, #324]	@ (8001be8 <_printf_i+0x258>)
 8001aa2:	469b      	mov	fp, r3
 8001aa4:	296f      	cmp	r1, #111	@ 0x6f
 8001aa6:	d100      	bne.n	8001aaa <_printf_i+0x11a>
 8001aa8:	e091      	b.n	8001bce <_printf_i+0x23e>
 8001aaa:	230a      	movs	r3, #10
 8001aac:	9303      	str	r3, [sp, #12]
 8001aae:	e037      	b.n	8001b20 <_printf_i+0x190>
 8001ab0:	6813      	ldr	r3, [r2, #0]
 8001ab2:	0025      	movs	r5, r4
 8001ab4:	1d19      	adds	r1, r3, #4
 8001ab6:	6011      	str	r1, [r2, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	2342      	movs	r3, #66	@ 0x42
 8001abc:	2001      	movs	r0, #1
 8001abe:	3542      	adds	r5, #66	@ 0x42
 8001ac0:	54e2      	strb	r2, [r4, r3]
 8001ac2:	e7cc      	b.n	8001a5e <_printf_i+0xce>
 8001ac4:	6813      	ldr	r3, [r2, #0]
 8001ac6:	1d19      	adds	r1, r3, #4
 8001ac8:	6011      	str	r1, [r2, #0]
 8001aca:	681d      	ldr	r5, [r3, #0]
 8001acc:	2100      	movs	r1, #0
 8001ace:	0028      	movs	r0, r5
 8001ad0:	6862      	ldr	r2, [r4, #4]
 8001ad2:	f000 f919 	bl	8001d08 <memchr>
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	d100      	bne.n	8001adc <_printf_i+0x14c>
 8001ada:	e081      	b.n	8001be0 <_printf_i+0x250>
 8001adc:	1b40      	subs	r0, r0, r5
 8001ade:	6060      	str	r0, [r4, #4]
 8001ae0:	e7bd      	b.n	8001a5e <_printf_i+0xce>
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	6821      	ldr	r1, [r4, #0]
 8001ae6:	430b      	orrs	r3, r1
 8001ae8:	6023      	str	r3, [r4, #0]
 8001aea:	2145      	movs	r1, #69	@ 0x45
 8001aec:	2078      	movs	r0, #120	@ 0x78
 8001aee:	5460      	strb	r0, [r4, r1]
 8001af0:	493e      	ldr	r1, [pc, #248]	@ (8001bec <_printf_i+0x25c>)
 8001af2:	468b      	mov	fp, r1
 8001af4:	6811      	ldr	r1, [r2, #0]
 8001af6:	c940      	ldmia	r1!, {r6}
 8001af8:	0618      	lsls	r0, r3, #24
 8001afa:	d403      	bmi.n	8001b04 <_printf_i+0x174>
 8001afc:	0658      	lsls	r0, r3, #25
 8001afe:	d501      	bpl.n	8001b04 <_printf_i+0x174>
 8001b00:	0436      	lsls	r6, r6, #16
 8001b02:	0c36      	lsrs	r6, r6, #16
 8001b04:	6011      	str	r1, [r2, #0]
 8001b06:	07da      	lsls	r2, r3, #31
 8001b08:	d502      	bpl.n	8001b10 <_printf_i+0x180>
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	6023      	str	r3, [r4, #0]
 8001b10:	2e00      	cmp	r6, #0
 8001b12:	d103      	bne.n	8001b1c <_printf_i+0x18c>
 8001b14:	2220      	movs	r2, #32
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	4393      	bics	r3, r2
 8001b1a:	6023      	str	r3, [r4, #0]
 8001b1c:	2310      	movs	r3, #16
 8001b1e:	9303      	str	r3, [sp, #12]
 8001b20:	2343      	movs	r3, #67	@ 0x43
 8001b22:	2200      	movs	r2, #0
 8001b24:	54e2      	strb	r2, [r4, r3]
 8001b26:	6863      	ldr	r3, [r4, #4]
 8001b28:	60a3      	str	r3, [r4, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	db18      	blt.n	8001b60 <_printf_i+0x1d0>
 8001b2e:	2104      	movs	r1, #4
 8001b30:	6822      	ldr	r2, [r4, #0]
 8001b32:	438a      	bics	r2, r1
 8001b34:	6022      	str	r2, [r4, #0]
 8001b36:	2e00      	cmp	r6, #0
 8001b38:	d112      	bne.n	8001b60 <_printf_i+0x1d0>
 8001b3a:	9d02      	ldr	r5, [sp, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d149      	bne.n	8001bd4 <_printf_i+0x244>
 8001b40:	9b03      	ldr	r3, [sp, #12]
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d01e      	beq.n	8001b84 <_printf_i+0x1f4>
 8001b46:	9b02      	ldr	r3, [sp, #8]
 8001b48:	1b5b      	subs	r3, r3, r5
 8001b4a:	6123      	str	r3, [r4, #16]
 8001b4c:	e74c      	b.n	80019e8 <_printf_i+0x58>
 8001b4e:	2345      	movs	r3, #69	@ 0x45
 8001b50:	2158      	movs	r1, #88	@ 0x58
 8001b52:	54e1      	strb	r1, [r4, r3]
 8001b54:	4924      	ldr	r1, [pc, #144]	@ (8001be8 <_printf_i+0x258>)
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	468b      	mov	fp, r1
 8001b5a:	e7cb      	b.n	8001af4 <_printf_i+0x164>
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	e7c4      	b.n	8001aea <_printf_i+0x15a>
 8001b60:	9b03      	ldr	r3, [sp, #12]
 8001b62:	469a      	mov	sl, r3
 8001b64:	9d02      	ldr	r5, [sp, #8]
 8001b66:	0030      	movs	r0, r6
 8001b68:	4651      	mov	r1, sl
 8001b6a:	f7fe fbe9 	bl	8000340 <__aeabi_uidivmod>
 8001b6e:	465b      	mov	r3, fp
 8001b70:	5c5b      	ldrb	r3, [r3, r1]
 8001b72:	3d01      	subs	r5, #1
 8001b74:	702b      	strb	r3, [r5, #0]
 8001b76:	0033      	movs	r3, r6
 8001b78:	0006      	movs	r6, r0
 8001b7a:	4553      	cmp	r3, sl
 8001b7c:	d2f3      	bcs.n	8001b66 <_printf_i+0x1d6>
 8001b7e:	9b03      	ldr	r3, [sp, #12]
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d1e0      	bne.n	8001b46 <_printf_i+0x1b6>
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	07db      	lsls	r3, r3, #31
 8001b88:	d5dd      	bpl.n	8001b46 <_printf_i+0x1b6>
 8001b8a:	6862      	ldr	r2, [r4, #4]
 8001b8c:	6923      	ldr	r3, [r4, #16]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	dcd9      	bgt.n	8001b46 <_printf_i+0x1b6>
 8001b92:	2330      	movs	r3, #48	@ 0x30
 8001b94:	3d01      	subs	r5, #1
 8001b96:	702b      	strb	r3, [r5, #0]
 8001b98:	e7d5      	b.n	8001b46 <_printf_i+0x1b6>
 8001b9a:	8018      	strh	r0, [r3, #0]
 8001b9c:	e721      	b.n	80019e2 <_printf_i+0x52>
 8001b9e:	0436      	lsls	r6, r6, #16
 8001ba0:	0c36      	lsrs	r6, r6, #16
 8001ba2:	e77c      	b.n	8001a9e <_printf_i+0x10e>
 8001ba4:	2600      	movs	r6, #0
 8001ba6:	5f9e      	ldrsh	r6, [r3, r6]
 8001ba8:	0032      	movs	r2, r6
 8001baa:	e768      	b.n	8001a7e <_printf_i+0xee>
 8001bac:	2243      	movs	r2, #67	@ 0x43
 8001bae:	202d      	movs	r0, #45	@ 0x2d
 8001bb0:	54a0      	strb	r0, [r4, r2]
 8001bb2:	60a3      	str	r3, [r4, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db02      	blt.n	8001bbe <_printf_i+0x22e>
 8001bb8:	2304      	movs	r3, #4
 8001bba:	4399      	bics	r1, r3
 8001bbc:	6021      	str	r1, [r4, #0]
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	469a      	mov	sl, r3
 8001bc2:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <_printf_i+0x258>)
 8001bc4:	4276      	negs	r6, r6
 8001bc6:	469b      	mov	fp, r3
 8001bc8:	230a      	movs	r3, #10
 8001bca:	9303      	str	r3, [sp, #12]
 8001bcc:	e7ca      	b.n	8001b64 <_printf_i+0x1d4>
 8001bce:	2308      	movs	r3, #8
 8001bd0:	9303      	str	r3, [sp, #12]
 8001bd2:	e7a5      	b.n	8001b20 <_printf_i+0x190>
 8001bd4:	465b      	mov	r3, fp
 8001bd6:	0025      	movs	r5, r4
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	3542      	adds	r5, #66	@ 0x42
 8001bdc:	702b      	strb	r3, [r5, #0]
 8001bde:	e7af      	b.n	8001b40 <_printf_i+0x1b0>
 8001be0:	6860      	ldr	r0, [r4, #4]
 8001be2:	e73c      	b.n	8001a5e <_printf_i+0xce>
 8001be4:	08003528 	.word	0x08003528
 8001be8:	08003644 	.word	0x08003644
 8001bec:	08003658 	.word	0x08003658

08001bf0 <__malloc_lock>:
 8001bf0:	4770      	bx	lr
 8001bf2:	46c0      	nop			@ (mov r8, r8)

08001bf4 <__malloc_unlock>:
 8001bf4:	4770      	bx	lr
 8001bf6:	46c0      	nop			@ (mov r8, r8)

08001bf8 <__smakebuf_r>:
 8001bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfa:	230c      	movs	r3, #12
 8001bfc:	5ecd      	ldrsh	r5, [r1, r3]
 8001bfe:	0006      	movs	r6, r0
 8001c00:	000c      	movs	r4, r1
 8001c02:	b097      	sub	sp, #92	@ 0x5c
 8001c04:	07aa      	lsls	r2, r5, #30
 8001c06:	d507      	bpl.n	8001c18 <__smakebuf_r+0x20>
 8001c08:	0023      	movs	r3, r4
 8001c0a:	3347      	adds	r3, #71	@ 0x47
 8001c0c:	6023      	str	r3, [r4, #0]
 8001c0e:	6123      	str	r3, [r4, #16]
 8001c10:	2301      	movs	r3, #1
 8001c12:	6163      	str	r3, [r4, #20]
 8001c14:	b017      	add	sp, #92	@ 0x5c
 8001c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c18:	230e      	movs	r3, #14
 8001c1a:	5ec9      	ldrsh	r1, [r1, r3]
 8001c1c:	2900      	cmp	r1, #0
 8001c1e:	db2b      	blt.n	8001c78 <__smakebuf_r+0x80>
 8001c20:	466a      	mov	r2, sp
 8001c22:	f000 f96b 	bl	8001efc <_fstat_r>
 8001c26:	2800      	cmp	r0, #0
 8001c28:	db24      	blt.n	8001c74 <__smakebuf_r+0x7c>
 8001c2a:	2780      	movs	r7, #128	@ 0x80
 8001c2c:	00ff      	lsls	r7, r7, #3
 8001c2e:	0039      	movs	r1, r7
 8001c30:	0030      	movs	r0, r6
 8001c32:	9d01      	ldr	r5, [sp, #4]
 8001c34:	f7ff fc08 	bl	8001448 <_malloc_r>
 8001c38:	2800      	cmp	r0, #0
 8001c3a:	d033      	beq.n	8001ca4 <__smakebuf_r+0xac>
 8001c3c:	2280      	movs	r2, #128	@ 0x80
 8001c3e:	89a3      	ldrh	r3, [r4, #12]
 8001c40:	6020      	str	r0, [r4, #0]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	81a3      	strh	r3, [r4, #12]
 8001c46:	23f0      	movs	r3, #240	@ 0xf0
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	401d      	ands	r5, r3
 8001c4c:	2380      	movs	r3, #128	@ 0x80
 8001c4e:	6120      	str	r0, [r4, #16]
 8001c50:	6167      	str	r7, [r4, #20]
 8001c52:	019b      	lsls	r3, r3, #6
 8001c54:	429d      	cmp	r5, r3
 8001c56:	d1dd      	bne.n	8001c14 <__smakebuf_r+0x1c>
 8001c58:	0030      	movs	r0, r6
 8001c5a:	230e      	movs	r3, #14
 8001c5c:	5ee1      	ldrsh	r1, [r4, r3]
 8001c5e:	f000 f88d 	bl	8001d7c <_isatty_r>
 8001c62:	2800      	cmp	r0, #0
 8001c64:	d0d6      	beq.n	8001c14 <__smakebuf_r+0x1c>
 8001c66:	2203      	movs	r2, #3
 8001c68:	89a3      	ldrh	r3, [r4, #12]
 8001c6a:	4393      	bics	r3, r2
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	81a3      	strh	r3, [r4, #12]
 8001c72:	e7cf      	b.n	8001c14 <__smakebuf_r+0x1c>
 8001c74:	230c      	movs	r3, #12
 8001c76:	5ee5      	ldrsh	r5, [r4, r3]
 8001c78:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb8 <__smakebuf_r+0xc0>)
 8001c7a:	062d      	lsls	r5, r5, #24
 8001c7c:	17ed      	asrs	r5, r5, #31
 8001c7e:	401d      	ands	r5, r3
 8001c80:	2380      	movs	r3, #128	@ 0x80
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	469c      	mov	ip, r3
 8001c86:	4465      	add	r5, ip
 8001c88:	0029      	movs	r1, r5
 8001c8a:	0030      	movs	r0, r6
 8001c8c:	f7ff fbdc 	bl	8001448 <_malloc_r>
 8001c90:	2800      	cmp	r0, #0
 8001c92:	d007      	beq.n	8001ca4 <__smakebuf_r+0xac>
 8001c94:	2280      	movs	r2, #128	@ 0x80
 8001c96:	89a3      	ldrh	r3, [r4, #12]
 8001c98:	6020      	str	r0, [r4, #0]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	81a3      	strh	r3, [r4, #12]
 8001c9e:	6120      	str	r0, [r4, #16]
 8001ca0:	6165      	str	r5, [r4, #20]
 8001ca2:	e7b7      	b.n	8001c14 <__smakebuf_r+0x1c>
 8001ca4:	220c      	movs	r2, #12
 8001ca6:	5ea3      	ldrsh	r3, [r4, r2]
 8001ca8:	059a      	lsls	r2, r3, #22
 8001caa:	d4b3      	bmi.n	8001c14 <__smakebuf_r+0x1c>
 8001cac:	2203      	movs	r2, #3
 8001cae:	4393      	bics	r3, r2
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	81a3      	strh	r3, [r4, #12]
 8001cb6:	e7a7      	b.n	8001c08 <__smakebuf_r+0x10>
 8001cb8:	fffffc40 	.word	0xfffffc40

08001cbc <__swhatbuf_r>:
 8001cbc:	b570      	push	{r4, r5, r6, lr}
 8001cbe:	000c      	movs	r4, r1
 8001cc0:	001e      	movs	r6, r3
 8001cc2:	230e      	movs	r3, #14
 8001cc4:	5ec9      	ldrsh	r1, [r1, r3]
 8001cc6:	0015      	movs	r5, r2
 8001cc8:	b096      	sub	sp, #88	@ 0x58
 8001cca:	2900      	cmp	r1, #0
 8001ccc:	db14      	blt.n	8001cf8 <__swhatbuf_r+0x3c>
 8001cce:	466a      	mov	r2, sp
 8001cd0:	f000 f914 	bl	8001efc <_fstat_r>
 8001cd4:	2800      	cmp	r0, #0
 8001cd6:	db0f      	blt.n	8001cf8 <__swhatbuf_r+0x3c>
 8001cd8:	23f0      	movs	r3, #240	@ 0xf0
 8001cda:	9901      	ldr	r1, [sp, #4]
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	4019      	ands	r1, r3
 8001ce0:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <__swhatbuf_r+0x48>)
 8001ce2:	469c      	mov	ip, r3
 8001ce4:	4461      	add	r1, ip
 8001ce6:	424b      	negs	r3, r1
 8001ce8:	4159      	adcs	r1, r3
 8001cea:	2380      	movs	r3, #128	@ 0x80
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	2000      	movs	r0, #0
 8001cf0:	6031      	str	r1, [r6, #0]
 8001cf2:	602b      	str	r3, [r5, #0]
 8001cf4:	b016      	add	sp, #88	@ 0x58
 8001cf6:	bd70      	pop	{r4, r5, r6, pc}
 8001cf8:	89a3      	ldrh	r3, [r4, #12]
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	061b      	lsls	r3, r3, #24
 8001cfe:	d5f4      	bpl.n	8001cea <__swhatbuf_r+0x2e>
 8001d00:	2340      	movs	r3, #64	@ 0x40
 8001d02:	e7f4      	b.n	8001cee <__swhatbuf_r+0x32>
 8001d04:	ffffe000 	.word	0xffffe000

08001d08 <memchr>:
 8001d08:	b570      	push	{r4, r5, r6, lr}
 8001d0a:	b2cc      	uxtb	r4, r1
 8001d0c:	0783      	lsls	r3, r0, #30
 8001d0e:	d00d      	beq.n	8001d2c <memchr+0x24>
 8001d10:	1e53      	subs	r3, r2, #1
 8001d12:	2a00      	cmp	r2, #0
 8001d14:	d00f      	beq.n	8001d36 <memchr+0x2e>
 8001d16:	2503      	movs	r5, #3
 8001d18:	e004      	b.n	8001d24 <memchr+0x1c>
 8001d1a:	3001      	adds	r0, #1
 8001d1c:	4228      	tst	r0, r5
 8001d1e:	d006      	beq.n	8001d2e <memchr+0x26>
 8001d20:	3b01      	subs	r3, #1
 8001d22:	d308      	bcc.n	8001d36 <memchr+0x2e>
 8001d24:	7802      	ldrb	r2, [r0, #0]
 8001d26:	42a2      	cmp	r2, r4
 8001d28:	d1f7      	bne.n	8001d1a <memchr+0x12>
 8001d2a:	bd70      	pop	{r4, r5, r6, pc}
 8001d2c:	0013      	movs	r3, r2
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d803      	bhi.n	8001d3a <memchr+0x32>
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d114      	bne.n	8001d60 <memchr+0x58>
 8001d36:	2000      	movs	r0, #0
 8001d38:	e7f7      	b.n	8001d2a <memchr+0x22>
 8001d3a:	22ff      	movs	r2, #255	@ 0xff
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	0215      	lsls	r5, r2, #8
 8001d40:	18ad      	adds	r5, r5, r2
 8001d42:	042a      	lsls	r2, r5, #16
 8001d44:	4e0b      	ldr	r6, [pc, #44]	@ (8001d74 <memchr+0x6c>)
 8001d46:	18ad      	adds	r5, r5, r2
 8001d48:	e003      	b.n	8001d52 <memchr+0x4a>
 8001d4a:	3b04      	subs	r3, #4
 8001d4c:	3004      	adds	r0, #4
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d9ef      	bls.n	8001d32 <memchr+0x2a>
 8001d52:	6802      	ldr	r2, [r0, #0]
 8001d54:	4908      	ldr	r1, [pc, #32]	@ (8001d78 <memchr+0x70>)
 8001d56:	406a      	eors	r2, r5
 8001d58:	1851      	adds	r1, r2, r1
 8001d5a:	4391      	bics	r1, r2
 8001d5c:	4231      	tst	r1, r6
 8001d5e:	d0f4      	beq.n	8001d4a <memchr+0x42>
 8001d60:	18c3      	adds	r3, r0, r3
 8001d62:	e002      	b.n	8001d6a <memchr+0x62>
 8001d64:	3001      	adds	r0, #1
 8001d66:	4298      	cmp	r0, r3
 8001d68:	d0e5      	beq.n	8001d36 <memchr+0x2e>
 8001d6a:	7802      	ldrb	r2, [r0, #0]
 8001d6c:	42a2      	cmp	r2, r4
 8001d6e:	d1f9      	bne.n	8001d64 <memchr+0x5c>
 8001d70:	e7db      	b.n	8001d2a <memchr+0x22>
 8001d72:	46c0      	nop			@ (mov r8, r8)
 8001d74:	80808080 	.word	0x80808080
 8001d78:	fefefeff 	.word	0xfefefeff

08001d7c <_isatty_r>:
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	b570      	push	{r4, r5, r6, lr}
 8001d80:	4c06      	ldr	r4, [pc, #24]	@ (8001d9c <_isatty_r+0x20>)
 8001d82:	0005      	movs	r5, r0
 8001d84:	0008      	movs	r0, r1
 8001d86:	6023      	str	r3, [r4, #0]
 8001d88:	f000 fa2c 	bl	80021e4 <_isatty>
 8001d8c:	1c43      	adds	r3, r0, #1
 8001d8e:	d000      	beq.n	8001d92 <_isatty_r+0x16>
 8001d90:	bd70      	pop	{r4, r5, r6, pc}
 8001d92:	6823      	ldr	r3, [r4, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0fb      	beq.n	8001d90 <_isatty_r+0x14>
 8001d98:	602b      	str	r3, [r5, #0]
 8001d9a:	e7f9      	b.n	8001d90 <_isatty_r+0x14>
 8001d9c:	20000318 	.word	0x20000318

08001da0 <_sbrk_r>:
 8001da0:	2300      	movs	r3, #0
 8001da2:	b570      	push	{r4, r5, r6, lr}
 8001da4:	4c06      	ldr	r4, [pc, #24]	@ (8001dc0 <_sbrk_r+0x20>)
 8001da6:	0005      	movs	r5, r0
 8001da8:	0008      	movs	r0, r1
 8001daa:	6023      	str	r3, [r4, #0]
 8001dac:	f000 fa3a 	bl	8002224 <_sbrk>
 8001db0:	1c43      	adds	r3, r0, #1
 8001db2:	d000      	beq.n	8001db6 <_sbrk_r+0x16>
 8001db4:	bd70      	pop	{r4, r5, r6, pc}
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0fb      	beq.n	8001db4 <_sbrk_r+0x14>
 8001dbc:	602b      	str	r3, [r5, #0]
 8001dbe:	e7f9      	b.n	8001db4 <_sbrk_r+0x14>
 8001dc0:	20000318 	.word	0x20000318

08001dc4 <__sread>:
 8001dc4:	b570      	push	{r4, r5, r6, lr}
 8001dc6:	000c      	movs	r4, r1
 8001dc8:	250e      	movs	r5, #14
 8001dca:	5f49      	ldrsh	r1, [r1, r5]
 8001dcc:	f000 f882 	bl	8001ed4 <_read_r>
 8001dd0:	2800      	cmp	r0, #0
 8001dd2:	db03      	blt.n	8001ddc <__sread+0x18>
 8001dd4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001dd6:	181b      	adds	r3, r3, r0
 8001dd8:	6563      	str	r3, [r4, #84]	@ 0x54
 8001dda:	bd70      	pop	{r4, r5, r6, pc}
 8001ddc:	89a3      	ldrh	r3, [r4, #12]
 8001dde:	4a02      	ldr	r2, [pc, #8]	@ (8001de8 <__sread+0x24>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	81a3      	strh	r3, [r4, #12]
 8001de4:	e7f9      	b.n	8001dda <__sread+0x16>
 8001de6:	46c0      	nop			@ (mov r8, r8)
 8001de8:	ffffefff 	.word	0xffffefff

08001dec <__seofread>:
 8001dec:	2000      	movs	r0, #0
 8001dee:	4770      	bx	lr

08001df0 <__swrite>:
 8001df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df2:	000c      	movs	r4, r1
 8001df4:	001f      	movs	r7, r3
 8001df6:	230c      	movs	r3, #12
 8001df8:	5ec9      	ldrsh	r1, [r1, r3]
 8001dfa:	0005      	movs	r5, r0
 8001dfc:	0016      	movs	r6, r2
 8001dfe:	05cb      	lsls	r3, r1, #23
 8001e00:	d40a      	bmi.n	8001e18 <__swrite+0x28>
 8001e02:	4b0a      	ldr	r3, [pc, #40]	@ (8001e2c <__swrite+0x3c>)
 8001e04:	0032      	movs	r2, r6
 8001e06:	4019      	ands	r1, r3
 8001e08:	0028      	movs	r0, r5
 8001e0a:	81a1      	strh	r1, [r4, #12]
 8001e0c:	230e      	movs	r3, #14
 8001e0e:	5ee1      	ldrsh	r1, [r4, r3]
 8001e10:	003b      	movs	r3, r7
 8001e12:	f000 f89b 	bl	8001f4c <_write_r>
 8001e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e18:	230e      	movs	r3, #14
 8001e1a:	5ee1      	ldrsh	r1, [r4, r3]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2302      	movs	r3, #2
 8001e20:	f000 f880 	bl	8001f24 <_lseek_r>
 8001e24:	230c      	movs	r3, #12
 8001e26:	5ee1      	ldrsh	r1, [r4, r3]
 8001e28:	e7eb      	b.n	8001e02 <__swrite+0x12>
 8001e2a:	46c0      	nop			@ (mov r8, r8)
 8001e2c:	ffffefff 	.word	0xffffefff

08001e30 <__sseek>:
 8001e30:	b570      	push	{r4, r5, r6, lr}
 8001e32:	000c      	movs	r4, r1
 8001e34:	250e      	movs	r5, #14
 8001e36:	5f49      	ldrsh	r1, [r1, r5]
 8001e38:	f000 f874 	bl	8001f24 <_lseek_r>
 8001e3c:	1c43      	adds	r3, r0, #1
 8001e3e:	d007      	beq.n	8001e50 <__sseek+0x20>
 8001e40:	2380      	movs	r3, #128	@ 0x80
 8001e42:	89a2      	ldrh	r2, [r4, #12]
 8001e44:	015b      	lsls	r3, r3, #5
 8001e46:	4313      	orrs	r3, r2
 8001e48:	b21b      	sxth	r3, r3
 8001e4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8001e4c:	81a3      	strh	r3, [r4, #12]
 8001e4e:	bd70      	pop	{r4, r5, r6, pc}
 8001e50:	89a3      	ldrh	r3, [r4, #12]
 8001e52:	4a02      	ldr	r2, [pc, #8]	@ (8001e5c <__sseek+0x2c>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	b21b      	sxth	r3, r3
 8001e58:	e7f8      	b.n	8001e4c <__sseek+0x1c>
 8001e5a:	46c0      	nop			@ (mov r8, r8)
 8001e5c:	ffffefff 	.word	0xffffefff

08001e60 <__sclose>:
 8001e60:	b510      	push	{r4, lr}
 8001e62:	230e      	movs	r3, #14
 8001e64:	5ec9      	ldrsh	r1, [r1, r3]
 8001e66:	f000 f823 	bl	8001eb0 <_close_r>
 8001e6a:	bd10      	pop	{r4, pc}

08001e6c <_malloc_usable_size_r>:
 8001e6c:	1f0b      	subs	r3, r1, #4
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	1f18      	subs	r0, r3, #4
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	db00      	blt.n	8001e78 <_malloc_usable_size_r+0xc>
 8001e76:	4770      	bx	lr
 8001e78:	580b      	ldr	r3, [r1, r0]
 8001e7a:	18c0      	adds	r0, r0, r3
 8001e7c:	e7fb      	b.n	8001e76 <_malloc_usable_size_r+0xa>
 8001e7e:	46c0      	nop			@ (mov r8, r8)

08001e80 <_kill_r>:
 8001e80:	2300      	movs	r3, #0
 8001e82:	b570      	push	{r4, r5, r6, lr}
 8001e84:	4d07      	ldr	r5, [pc, #28]	@ (8001ea4 <_kill_r+0x24>)
 8001e86:	0004      	movs	r4, r0
 8001e88:	0008      	movs	r0, r1
 8001e8a:	0011      	movs	r1, r2
 8001e8c:	602b      	str	r3, [r5, #0]
 8001e8e:	f000 f9b1 	bl	80021f4 <_kill>
 8001e92:	1c43      	adds	r3, r0, #1
 8001e94:	d000      	beq.n	8001e98 <_kill_r+0x18>
 8001e96:	bd70      	pop	{r4, r5, r6, pc}
 8001e98:	682b      	ldr	r3, [r5, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0fb      	beq.n	8001e96 <_kill_r+0x16>
 8001e9e:	6023      	str	r3, [r4, #0]
 8001ea0:	e7f9      	b.n	8001e96 <_kill_r+0x16>
 8001ea2:	46c0      	nop			@ (mov r8, r8)
 8001ea4:	20000318 	.word	0x20000318

08001ea8 <_getpid_r>:
 8001ea8:	b510      	push	{r4, lr}
 8001eaa:	f000 f98b 	bl	80021c4 <_getpid>
 8001eae:	bd10      	pop	{r4, pc}

08001eb0 <_close_r>:
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	b570      	push	{r4, r5, r6, lr}
 8001eb4:	4c06      	ldr	r4, [pc, #24]	@ (8001ed0 <_close_r+0x20>)
 8001eb6:	0005      	movs	r5, r0
 8001eb8:	0008      	movs	r0, r1
 8001eba:	6023      	str	r3, [r4, #0]
 8001ebc:	f000 f972 	bl	80021a4 <_close>
 8001ec0:	1c43      	adds	r3, r0, #1
 8001ec2:	d000      	beq.n	8001ec6 <_close_r+0x16>
 8001ec4:	bd70      	pop	{r4, r5, r6, pc}
 8001ec6:	6823      	ldr	r3, [r4, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0fb      	beq.n	8001ec4 <_close_r+0x14>
 8001ecc:	602b      	str	r3, [r5, #0]
 8001ece:	e7f9      	b.n	8001ec4 <_close_r+0x14>
 8001ed0:	20000318 	.word	0x20000318

08001ed4 <_read_r>:
 8001ed4:	b570      	push	{r4, r5, r6, lr}
 8001ed6:	0004      	movs	r4, r0
 8001ed8:	0008      	movs	r0, r1
 8001eda:	0011      	movs	r1, r2
 8001edc:	001a      	movs	r2, r3
 8001ede:	2300      	movs	r3, #0
 8001ee0:	4d05      	ldr	r5, [pc, #20]	@ (8001ef8 <_read_r+0x24>)
 8001ee2:	602b      	str	r3, [r5, #0]
 8001ee4:	f000 f996 	bl	8002214 <_read>
 8001ee8:	1c43      	adds	r3, r0, #1
 8001eea:	d000      	beq.n	8001eee <_read_r+0x1a>
 8001eec:	bd70      	pop	{r4, r5, r6, pc}
 8001eee:	682b      	ldr	r3, [r5, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0fb      	beq.n	8001eec <_read_r+0x18>
 8001ef4:	6023      	str	r3, [r4, #0]
 8001ef6:	e7f9      	b.n	8001eec <_read_r+0x18>
 8001ef8:	20000318 	.word	0x20000318

08001efc <_fstat_r>:
 8001efc:	2300      	movs	r3, #0
 8001efe:	b570      	push	{r4, r5, r6, lr}
 8001f00:	4d07      	ldr	r5, [pc, #28]	@ (8001f20 <_fstat_r+0x24>)
 8001f02:	0004      	movs	r4, r0
 8001f04:	0008      	movs	r0, r1
 8001f06:	0011      	movs	r1, r2
 8001f08:	602b      	str	r3, [r5, #0]
 8001f0a:	f000 f953 	bl	80021b4 <_fstat>
 8001f0e:	1c43      	adds	r3, r0, #1
 8001f10:	d000      	beq.n	8001f14 <_fstat_r+0x18>
 8001f12:	bd70      	pop	{r4, r5, r6, pc}
 8001f14:	682b      	ldr	r3, [r5, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0fb      	beq.n	8001f12 <_fstat_r+0x16>
 8001f1a:	6023      	str	r3, [r4, #0]
 8001f1c:	e7f9      	b.n	8001f12 <_fstat_r+0x16>
 8001f1e:	46c0      	nop			@ (mov r8, r8)
 8001f20:	20000318 	.word	0x20000318

08001f24 <_lseek_r>:
 8001f24:	b570      	push	{r4, r5, r6, lr}
 8001f26:	0004      	movs	r4, r0
 8001f28:	0008      	movs	r0, r1
 8001f2a:	0011      	movs	r1, r2
 8001f2c:	001a      	movs	r2, r3
 8001f2e:	2300      	movs	r3, #0
 8001f30:	4d05      	ldr	r5, [pc, #20]	@ (8001f48 <_lseek_r+0x24>)
 8001f32:	602b      	str	r3, [r5, #0]
 8001f34:	f000 f966 	bl	8002204 <_lseek>
 8001f38:	1c43      	adds	r3, r0, #1
 8001f3a:	d000      	beq.n	8001f3e <_lseek_r+0x1a>
 8001f3c:	bd70      	pop	{r4, r5, r6, pc}
 8001f3e:	682b      	ldr	r3, [r5, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0fb      	beq.n	8001f3c <_lseek_r+0x18>
 8001f44:	6023      	str	r3, [r4, #0]
 8001f46:	e7f9      	b.n	8001f3c <_lseek_r+0x18>
 8001f48:	20000318 	.word	0x20000318

08001f4c <_write_r>:
 8001f4c:	b570      	push	{r4, r5, r6, lr}
 8001f4e:	0004      	movs	r4, r0
 8001f50:	0008      	movs	r0, r1
 8001f52:	0011      	movs	r1, r2
 8001f54:	001a      	movs	r2, r3
 8001f56:	2300      	movs	r3, #0
 8001f58:	4d05      	ldr	r5, [pc, #20]	@ (8001f70 <_write_r+0x24>)
 8001f5a:	602b      	str	r3, [r5, #0]
 8001f5c:	f000 f970 	bl	8002240 <_write>
 8001f60:	1c43      	adds	r3, r0, #1
 8001f62:	d000      	beq.n	8001f66 <_write_r+0x1a>
 8001f64:	bd70      	pop	{r4, r5, r6, pc}
 8001f66:	682b      	ldr	r3, [r5, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0fb      	beq.n	8001f64 <_write_r+0x18>
 8001f6c:	6023      	str	r3, [r4, #0]
 8001f6e:	e7f9      	b.n	8001f64 <_write_r+0x18>
 8001f70:	20000318 	.word	0x20000318

08001f74 <__divsi3>:
 8001f74:	4603      	mov	r3, r0
 8001f76:	430b      	orrs	r3, r1
 8001f78:	d47f      	bmi.n	800207a <__divsi3+0x106>
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	0843      	lsrs	r3, r0, #1
 8001f7e:	428b      	cmp	r3, r1
 8001f80:	d374      	bcc.n	800206c <__divsi3+0xf8>
 8001f82:	0903      	lsrs	r3, r0, #4
 8001f84:	428b      	cmp	r3, r1
 8001f86:	d35f      	bcc.n	8002048 <__divsi3+0xd4>
 8001f88:	0a03      	lsrs	r3, r0, #8
 8001f8a:	428b      	cmp	r3, r1
 8001f8c:	d344      	bcc.n	8002018 <__divsi3+0xa4>
 8001f8e:	0b03      	lsrs	r3, r0, #12
 8001f90:	428b      	cmp	r3, r1
 8001f92:	d328      	bcc.n	8001fe6 <__divsi3+0x72>
 8001f94:	0c03      	lsrs	r3, r0, #16
 8001f96:	428b      	cmp	r3, r1
 8001f98:	d30d      	bcc.n	8001fb6 <__divsi3+0x42>
 8001f9a:	22ff      	movs	r2, #255	@ 0xff
 8001f9c:	0209      	lsls	r1, r1, #8
 8001f9e:	ba12      	rev	r2, r2
 8001fa0:	0c03      	lsrs	r3, r0, #16
 8001fa2:	428b      	cmp	r3, r1
 8001fa4:	d302      	bcc.n	8001fac <__divsi3+0x38>
 8001fa6:	1212      	asrs	r2, r2, #8
 8001fa8:	0209      	lsls	r1, r1, #8
 8001faa:	d065      	beq.n	8002078 <__divsi3+0x104>
 8001fac:	0b03      	lsrs	r3, r0, #12
 8001fae:	428b      	cmp	r3, r1
 8001fb0:	d319      	bcc.n	8001fe6 <__divsi3+0x72>
 8001fb2:	e000      	b.n	8001fb6 <__divsi3+0x42>
 8001fb4:	0a09      	lsrs	r1, r1, #8
 8001fb6:	0bc3      	lsrs	r3, r0, #15
 8001fb8:	428b      	cmp	r3, r1
 8001fba:	d301      	bcc.n	8001fc0 <__divsi3+0x4c>
 8001fbc:	03cb      	lsls	r3, r1, #15
 8001fbe:	1ac0      	subs	r0, r0, r3
 8001fc0:	4152      	adcs	r2, r2
 8001fc2:	0b83      	lsrs	r3, r0, #14
 8001fc4:	428b      	cmp	r3, r1
 8001fc6:	d301      	bcc.n	8001fcc <__divsi3+0x58>
 8001fc8:	038b      	lsls	r3, r1, #14
 8001fca:	1ac0      	subs	r0, r0, r3
 8001fcc:	4152      	adcs	r2, r2
 8001fce:	0b43      	lsrs	r3, r0, #13
 8001fd0:	428b      	cmp	r3, r1
 8001fd2:	d301      	bcc.n	8001fd8 <__divsi3+0x64>
 8001fd4:	034b      	lsls	r3, r1, #13
 8001fd6:	1ac0      	subs	r0, r0, r3
 8001fd8:	4152      	adcs	r2, r2
 8001fda:	0b03      	lsrs	r3, r0, #12
 8001fdc:	428b      	cmp	r3, r1
 8001fde:	d301      	bcc.n	8001fe4 <__divsi3+0x70>
 8001fe0:	030b      	lsls	r3, r1, #12
 8001fe2:	1ac0      	subs	r0, r0, r3
 8001fe4:	4152      	adcs	r2, r2
 8001fe6:	0ac3      	lsrs	r3, r0, #11
 8001fe8:	428b      	cmp	r3, r1
 8001fea:	d301      	bcc.n	8001ff0 <__divsi3+0x7c>
 8001fec:	02cb      	lsls	r3, r1, #11
 8001fee:	1ac0      	subs	r0, r0, r3
 8001ff0:	4152      	adcs	r2, r2
 8001ff2:	0a83      	lsrs	r3, r0, #10
 8001ff4:	428b      	cmp	r3, r1
 8001ff6:	d301      	bcc.n	8001ffc <__divsi3+0x88>
 8001ff8:	028b      	lsls	r3, r1, #10
 8001ffa:	1ac0      	subs	r0, r0, r3
 8001ffc:	4152      	adcs	r2, r2
 8001ffe:	0a43      	lsrs	r3, r0, #9
 8002000:	428b      	cmp	r3, r1
 8002002:	d301      	bcc.n	8002008 <__divsi3+0x94>
 8002004:	024b      	lsls	r3, r1, #9
 8002006:	1ac0      	subs	r0, r0, r3
 8002008:	4152      	adcs	r2, r2
 800200a:	0a03      	lsrs	r3, r0, #8
 800200c:	428b      	cmp	r3, r1
 800200e:	d301      	bcc.n	8002014 <__divsi3+0xa0>
 8002010:	020b      	lsls	r3, r1, #8
 8002012:	1ac0      	subs	r0, r0, r3
 8002014:	4152      	adcs	r2, r2
 8002016:	d2cd      	bcs.n	8001fb4 <__divsi3+0x40>
 8002018:	09c3      	lsrs	r3, r0, #7
 800201a:	428b      	cmp	r3, r1
 800201c:	d301      	bcc.n	8002022 <__divsi3+0xae>
 800201e:	01cb      	lsls	r3, r1, #7
 8002020:	1ac0      	subs	r0, r0, r3
 8002022:	4152      	adcs	r2, r2
 8002024:	0983      	lsrs	r3, r0, #6
 8002026:	428b      	cmp	r3, r1
 8002028:	d301      	bcc.n	800202e <__divsi3+0xba>
 800202a:	018b      	lsls	r3, r1, #6
 800202c:	1ac0      	subs	r0, r0, r3
 800202e:	4152      	adcs	r2, r2
 8002030:	0943      	lsrs	r3, r0, #5
 8002032:	428b      	cmp	r3, r1
 8002034:	d301      	bcc.n	800203a <__divsi3+0xc6>
 8002036:	014b      	lsls	r3, r1, #5
 8002038:	1ac0      	subs	r0, r0, r3
 800203a:	4152      	adcs	r2, r2
 800203c:	0903      	lsrs	r3, r0, #4
 800203e:	428b      	cmp	r3, r1
 8002040:	d301      	bcc.n	8002046 <__divsi3+0xd2>
 8002042:	010b      	lsls	r3, r1, #4
 8002044:	1ac0      	subs	r0, r0, r3
 8002046:	4152      	adcs	r2, r2
 8002048:	08c3      	lsrs	r3, r0, #3
 800204a:	428b      	cmp	r3, r1
 800204c:	d301      	bcc.n	8002052 <__divsi3+0xde>
 800204e:	00cb      	lsls	r3, r1, #3
 8002050:	1ac0      	subs	r0, r0, r3
 8002052:	4152      	adcs	r2, r2
 8002054:	0883      	lsrs	r3, r0, #2
 8002056:	428b      	cmp	r3, r1
 8002058:	d301      	bcc.n	800205e <__divsi3+0xea>
 800205a:	008b      	lsls	r3, r1, #2
 800205c:	1ac0      	subs	r0, r0, r3
 800205e:	4152      	adcs	r2, r2
 8002060:	0843      	lsrs	r3, r0, #1
 8002062:	428b      	cmp	r3, r1
 8002064:	d301      	bcc.n	800206a <__divsi3+0xf6>
 8002066:	004b      	lsls	r3, r1, #1
 8002068:	1ac0      	subs	r0, r0, r3
 800206a:	4152      	adcs	r2, r2
 800206c:	1a41      	subs	r1, r0, r1
 800206e:	d200      	bcs.n	8002072 <__divsi3+0xfe>
 8002070:	4601      	mov	r1, r0
 8002072:	4152      	adcs	r2, r2
 8002074:	4610      	mov	r0, r2
 8002076:	4770      	bx	lr
 8002078:	e05d      	b.n	8002136 <__divsi3+0x1c2>
 800207a:	0fca      	lsrs	r2, r1, #31
 800207c:	d000      	beq.n	8002080 <__divsi3+0x10c>
 800207e:	4249      	negs	r1, r1
 8002080:	1003      	asrs	r3, r0, #32
 8002082:	d300      	bcc.n	8002086 <__divsi3+0x112>
 8002084:	4240      	negs	r0, r0
 8002086:	4053      	eors	r3, r2
 8002088:	2200      	movs	r2, #0
 800208a:	469c      	mov	ip, r3
 800208c:	0903      	lsrs	r3, r0, #4
 800208e:	428b      	cmp	r3, r1
 8002090:	d32d      	bcc.n	80020ee <__divsi3+0x17a>
 8002092:	0a03      	lsrs	r3, r0, #8
 8002094:	428b      	cmp	r3, r1
 8002096:	d312      	bcc.n	80020be <__divsi3+0x14a>
 8002098:	22fc      	movs	r2, #252	@ 0xfc
 800209a:	0189      	lsls	r1, r1, #6
 800209c:	ba12      	rev	r2, r2
 800209e:	0a03      	lsrs	r3, r0, #8
 80020a0:	428b      	cmp	r3, r1
 80020a2:	d30c      	bcc.n	80020be <__divsi3+0x14a>
 80020a4:	0189      	lsls	r1, r1, #6
 80020a6:	1192      	asrs	r2, r2, #6
 80020a8:	428b      	cmp	r3, r1
 80020aa:	d308      	bcc.n	80020be <__divsi3+0x14a>
 80020ac:	0189      	lsls	r1, r1, #6
 80020ae:	1192      	asrs	r2, r2, #6
 80020b0:	428b      	cmp	r3, r1
 80020b2:	d304      	bcc.n	80020be <__divsi3+0x14a>
 80020b4:	0189      	lsls	r1, r1, #6
 80020b6:	d03a      	beq.n	800212e <__divsi3+0x1ba>
 80020b8:	1192      	asrs	r2, r2, #6
 80020ba:	e000      	b.n	80020be <__divsi3+0x14a>
 80020bc:	0989      	lsrs	r1, r1, #6
 80020be:	09c3      	lsrs	r3, r0, #7
 80020c0:	428b      	cmp	r3, r1
 80020c2:	d301      	bcc.n	80020c8 <__divsi3+0x154>
 80020c4:	01cb      	lsls	r3, r1, #7
 80020c6:	1ac0      	subs	r0, r0, r3
 80020c8:	4152      	adcs	r2, r2
 80020ca:	0983      	lsrs	r3, r0, #6
 80020cc:	428b      	cmp	r3, r1
 80020ce:	d301      	bcc.n	80020d4 <__divsi3+0x160>
 80020d0:	018b      	lsls	r3, r1, #6
 80020d2:	1ac0      	subs	r0, r0, r3
 80020d4:	4152      	adcs	r2, r2
 80020d6:	0943      	lsrs	r3, r0, #5
 80020d8:	428b      	cmp	r3, r1
 80020da:	d301      	bcc.n	80020e0 <__divsi3+0x16c>
 80020dc:	014b      	lsls	r3, r1, #5
 80020de:	1ac0      	subs	r0, r0, r3
 80020e0:	4152      	adcs	r2, r2
 80020e2:	0903      	lsrs	r3, r0, #4
 80020e4:	428b      	cmp	r3, r1
 80020e6:	d301      	bcc.n	80020ec <__divsi3+0x178>
 80020e8:	010b      	lsls	r3, r1, #4
 80020ea:	1ac0      	subs	r0, r0, r3
 80020ec:	4152      	adcs	r2, r2
 80020ee:	08c3      	lsrs	r3, r0, #3
 80020f0:	428b      	cmp	r3, r1
 80020f2:	d301      	bcc.n	80020f8 <__divsi3+0x184>
 80020f4:	00cb      	lsls	r3, r1, #3
 80020f6:	1ac0      	subs	r0, r0, r3
 80020f8:	4152      	adcs	r2, r2
 80020fa:	0883      	lsrs	r3, r0, #2
 80020fc:	428b      	cmp	r3, r1
 80020fe:	d301      	bcc.n	8002104 <__divsi3+0x190>
 8002100:	008b      	lsls	r3, r1, #2
 8002102:	1ac0      	subs	r0, r0, r3
 8002104:	4152      	adcs	r2, r2
 8002106:	d2d9      	bcs.n	80020bc <__divsi3+0x148>
 8002108:	0843      	lsrs	r3, r0, #1
 800210a:	428b      	cmp	r3, r1
 800210c:	d301      	bcc.n	8002112 <__divsi3+0x19e>
 800210e:	004b      	lsls	r3, r1, #1
 8002110:	1ac0      	subs	r0, r0, r3
 8002112:	4152      	adcs	r2, r2
 8002114:	1a41      	subs	r1, r0, r1
 8002116:	d200      	bcs.n	800211a <__divsi3+0x1a6>
 8002118:	4601      	mov	r1, r0
 800211a:	4663      	mov	r3, ip
 800211c:	4152      	adcs	r2, r2
 800211e:	105b      	asrs	r3, r3, #1
 8002120:	4610      	mov	r0, r2
 8002122:	d301      	bcc.n	8002128 <__divsi3+0x1b4>
 8002124:	4240      	negs	r0, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d500      	bpl.n	800212c <__divsi3+0x1b8>
 800212a:	4249      	negs	r1, r1
 800212c:	4770      	bx	lr
 800212e:	4663      	mov	r3, ip
 8002130:	105b      	asrs	r3, r3, #1
 8002132:	d300      	bcc.n	8002136 <__divsi3+0x1c2>
 8002134:	4240      	negs	r0, r0
 8002136:	b501      	push	{r0, lr}
 8002138:	2000      	movs	r0, #0
 800213a:	f7fe f905 	bl	8000348 <__aeabi_idiv0>
 800213e:	bd02      	pop	{r1, pc}

08002140 <__aeabi_idivmod>:
 8002140:	2900      	cmp	r1, #0
 8002142:	d0f8      	beq.n	8002136 <__divsi3+0x1c2>
 8002144:	e716      	b.n	8001f74 <__divsi3>
 8002146:	4770      	bx	lr

08002148 <__aeabi_lmul>:
 8002148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800214a:	46ce      	mov	lr, r9
 800214c:	4699      	mov	r9, r3
 800214e:	0c03      	lsrs	r3, r0, #16
 8002150:	469c      	mov	ip, r3
 8002152:	0413      	lsls	r3, r2, #16
 8002154:	4647      	mov	r7, r8
 8002156:	0c1b      	lsrs	r3, r3, #16
 8002158:	001d      	movs	r5, r3
 800215a:	000e      	movs	r6, r1
 800215c:	4661      	mov	r1, ip
 800215e:	0404      	lsls	r4, r0, #16
 8002160:	0c24      	lsrs	r4, r4, #16
 8002162:	b580      	push	{r7, lr}
 8002164:	0007      	movs	r7, r0
 8002166:	0c10      	lsrs	r0, r2, #16
 8002168:	434b      	muls	r3, r1
 800216a:	4365      	muls	r5, r4
 800216c:	4341      	muls	r1, r0
 800216e:	4360      	muls	r0, r4
 8002170:	0c2c      	lsrs	r4, r5, #16
 8002172:	18c0      	adds	r0, r0, r3
 8002174:	1824      	adds	r4, r4, r0
 8002176:	468c      	mov	ip, r1
 8002178:	42a3      	cmp	r3, r4
 800217a:	d903      	bls.n	8002184 <__aeabi_lmul+0x3c>
 800217c:	2380      	movs	r3, #128	@ 0x80
 800217e:	025b      	lsls	r3, r3, #9
 8002180:	4698      	mov	r8, r3
 8002182:	44c4      	add	ip, r8
 8002184:	4649      	mov	r1, r9
 8002186:	4379      	muls	r1, r7
 8002188:	4356      	muls	r6, r2
 800218a:	0c23      	lsrs	r3, r4, #16
 800218c:	042d      	lsls	r5, r5, #16
 800218e:	0c2d      	lsrs	r5, r5, #16
 8002190:	1989      	adds	r1, r1, r6
 8002192:	4463      	add	r3, ip
 8002194:	0424      	lsls	r4, r4, #16
 8002196:	1960      	adds	r0, r4, r5
 8002198:	18c9      	adds	r1, r1, r3
 800219a:	bcc0      	pop	{r6, r7}
 800219c:	46b9      	mov	r9, r7
 800219e:	46b0      	mov	r8, r6
 80021a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a2:	46c0      	nop			@ (mov r8, r8)

080021a4 <_close>:
 80021a4:	2258      	movs	r2, #88	@ 0x58
 80021a6:	2001      	movs	r0, #1
 80021a8:	4b01      	ldr	r3, [pc, #4]	@ (80021b0 <_close+0xc>)
 80021aa:	4240      	negs	r0, r0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	4770      	bx	lr
 80021b0:	20000318 	.word	0x20000318

080021b4 <_fstat>:
 80021b4:	2258      	movs	r2, #88	@ 0x58
 80021b6:	2001      	movs	r0, #1
 80021b8:	4b01      	ldr	r3, [pc, #4]	@ (80021c0 <_fstat+0xc>)
 80021ba:	4240      	negs	r0, r0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	4770      	bx	lr
 80021c0:	20000318 	.word	0x20000318

080021c4 <_getpid>:
 80021c4:	2258      	movs	r2, #88	@ 0x58
 80021c6:	2001      	movs	r0, #1
 80021c8:	4b01      	ldr	r3, [pc, #4]	@ (80021d0 <_getpid+0xc>)
 80021ca:	4240      	negs	r0, r0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	4770      	bx	lr
 80021d0:	20000318 	.word	0x20000318

080021d4 <_gettimeofday>:
 80021d4:	2258      	movs	r2, #88	@ 0x58
 80021d6:	2001      	movs	r0, #1
 80021d8:	4b01      	ldr	r3, [pc, #4]	@ (80021e0 <_gettimeofday+0xc>)
 80021da:	4240      	negs	r0, r0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	4770      	bx	lr
 80021e0:	20000318 	.word	0x20000318

080021e4 <_isatty>:
 80021e4:	2258      	movs	r2, #88	@ 0x58
 80021e6:	4b02      	ldr	r3, [pc, #8]	@ (80021f0 <_isatty+0xc>)
 80021e8:	2000      	movs	r0, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	4770      	bx	lr
 80021ee:	46c0      	nop			@ (mov r8, r8)
 80021f0:	20000318 	.word	0x20000318

080021f4 <_kill>:
 80021f4:	2258      	movs	r2, #88	@ 0x58
 80021f6:	2001      	movs	r0, #1
 80021f8:	4b01      	ldr	r3, [pc, #4]	@ (8002200 <_kill+0xc>)
 80021fa:	4240      	negs	r0, r0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	4770      	bx	lr
 8002200:	20000318 	.word	0x20000318

08002204 <_lseek>:
 8002204:	2258      	movs	r2, #88	@ 0x58
 8002206:	2001      	movs	r0, #1
 8002208:	4b01      	ldr	r3, [pc, #4]	@ (8002210 <_lseek+0xc>)
 800220a:	4240      	negs	r0, r0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	4770      	bx	lr
 8002210:	20000318 	.word	0x20000318

08002214 <_read>:
 8002214:	2258      	movs	r2, #88	@ 0x58
 8002216:	2001      	movs	r0, #1
 8002218:	4b01      	ldr	r3, [pc, #4]	@ (8002220 <_read+0xc>)
 800221a:	4240      	negs	r0, r0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	4770      	bx	lr
 8002220:	20000318 	.word	0x20000318

08002224 <_sbrk>:
 8002224:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <_sbrk+0x14>)
 8002226:	0003      	movs	r3, r0
 8002228:	6810      	ldr	r0, [r2, #0]
 800222a:	2800      	cmp	r0, #0
 800222c:	d002      	beq.n	8002234 <_sbrk+0x10>
 800222e:	18c3      	adds	r3, r0, r3
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4770      	bx	lr
 8002234:	4801      	ldr	r0, [pc, #4]	@ (800223c <_sbrk+0x18>)
 8002236:	e7fa      	b.n	800222e <_sbrk+0xa>
 8002238:	2000031c 	.word	0x2000031c
 800223c:	20000320 	.word	0x20000320

08002240 <_write>:
 8002240:	2258      	movs	r2, #88	@ 0x58
 8002242:	2001      	movs	r0, #1
 8002244:	4b01      	ldr	r3, [pc, #4]	@ (800224c <_write+0xc>)
 8002246:	4240      	negs	r0, r0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	4770      	bx	lr
 800224c:	20000318 	.word	0x20000318

08002250 <_exit>:
 8002250:	e7fe      	b.n	8002250 <_exit>
 8002252:	46c0      	nop			@ (mov r8, r8)

08002254 <init_mask>:
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};


// Initialize the pseudorandom mask
void init_mask(){
 8002254:	b510      	push	{r4, lr}
    srand(time(NULL));
 8002256:	2000      	movs	r0, #0
 8002258:	f7fe f93e 	bl	80004d8 <time>
 800225c:	f7fe f876 	bl	800034c <srand>

    for (int i = 0; i < 16; i++) {
 8002260:	2300      	movs	r3, #0
        //mask[i] = rand() % 256; // Random value between 0x00 and 0xFF
        mask[i] = i + 128;
 8002262:	4a04      	ldr	r2, [pc, #16]	@ (8002274 <init_mask+0x20>)
 8002264:	0019      	movs	r1, r3
 8002266:	3980      	subs	r1, #128	@ 0x80
 8002268:	5499      	strb	r1, [r3, r2]
    for (int i = 0; i < 16; i++) {
 800226a:	3301      	adds	r3, #1
 800226c:	2b10      	cmp	r3, #16
 800226e:	d1f9      	bne.n	8002264 <init_mask+0x10>
    }
}
 8002270:	bd10      	pop	{r4, pc}
 8002272:	46c0      	nop			@ (mov r8, r8)
 8002274:	2000007c 	.word	0x2000007c

08002278 <substitute_byte>:


// Function to substitute a byte
uint8_t substitute_byte(uint8_t byte) {
    uint8_t result = 0;
    for (int i = 0; i < 256; i++) {
 8002278:	2300      	movs	r3, #0
uint8_t substitute_byte(uint8_t byte) {
 800227a:	b530      	push	{r4, r5, lr}
    for (int i = 0; i < 256; i++) {
 800227c:	2480      	movs	r4, #128	@ 0x80
uint8_t substitute_byte(uint8_t byte) {
 800227e:	0002      	movs	r2, r0
    uint8_t result = 0;
 8002280:	0018      	movs	r0, r3
        uint8_t match = (byte == i);         // 1 if true, 0 if false
        result |= match * SBox[i];           // Add SBox[i] to result only if match
 8002282:	4d06      	ldr	r5, [pc, #24]	@ (800229c <substitute_byte+0x24>)
    for (int i = 0; i < 256; i++) {
 8002284:	0064      	lsls	r4, r4, #1
        result |= match * SBox[i];           // Add SBox[i] to result only if match
 8002286:	2100      	movs	r1, #0
 8002288:	429a      	cmp	r2, r3
 800228a:	d100      	bne.n	800228e <substitute_byte+0x16>
 800228c:	5ce9      	ldrb	r1, [r5, r3]
 800228e:	4308      	orrs	r0, r1
    for (int i = 0; i < 256; i++) {
 8002290:	3301      	adds	r3, #1
 8002292:	b2c0      	uxtb	r0, r0
 8002294:	42a3      	cmp	r3, r4
 8002296:	d1f6      	bne.n	8002286 <substitute_byte+0xe>
    }
    return result;
}
 8002298:	bd30      	pop	{r4, r5, pc}
 800229a:	46c0      	nop			@ (mov r8, r8)
 800229c:	08003424 	.word	0x08003424

080022a0 <substitute>:

// Apply the substitution step
void substitute(uint8_t *block) {
 80022a0:	b570      	push	{r4, r5, r6, lr}
 80022a2:	0005      	movs	r5, r0
 80022a4:	0004      	movs	r4, r0
 80022a6:	3510      	adds	r5, #16
    for (int i = 0; i < BLOCK_SIZE; i++) {
        block[i] = substitute_byte(block[i]);
 80022a8:	7820      	ldrb	r0, [r4, #0]
 80022aa:	f7ff ffe5 	bl	8002278 <substitute_byte>
 80022ae:	7020      	strb	r0, [r4, #0]
    for (int i = 0; i < BLOCK_SIZE; i++) {
 80022b0:	3401      	adds	r4, #1
 80022b2:	42ac      	cmp	r4, r5
 80022b4:	d1f8      	bne.n	80022a8 <substitute+0x8>
    }
}
 80022b6:	bd70      	pop	{r4, r5, r6, pc}

080022b8 <balanced_xor>:

// Perform XOR
void balanced_xor(uint8_t *block, const uint8_t *mask) {
    for (int i = 0; i < BLOCK_SIZE; i++) {
 80022b8:	2300      	movs	r3, #0
void balanced_xor(uint8_t *block, const uint8_t *mask) {
 80022ba:	b510      	push	{r4, lr}
        block[i] ^= mask[i]; 
 80022bc:	5cc2      	ldrb	r2, [r0, r3]
 80022be:	5ccc      	ldrb	r4, [r1, r3]
 80022c0:	4062      	eors	r2, r4
 80022c2:	54c2      	strb	r2, [r0, r3]
    for (int i = 0; i < BLOCK_SIZE; i++) {
 80022c4:	3301      	adds	r3, #1
 80022c6:	2b10      	cmp	r3, #16
 80022c8:	d1f8      	bne.n	80022bc <balanced_xor+0x4>
    }
}
 80022ca:	bd10      	pop	{r4, pc}

080022cc <permute>:

// Perform permutation
void permute(uint8_t *block) {
 80022cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    
    uint8_t temp[BLOCK_SIZE];
    memcpy(temp, block, BLOCK_SIZE);
 80022ce:	7a03      	ldrb	r3, [r0, #8]
void permute(uint8_t *block) {
 80022d0:	b087      	sub	sp, #28
    memcpy(temp, block, BLOCK_SIZE);
 80022d2:	9305      	str	r3, [sp, #20]
 80022d4:	7a43      	ldrb	r3, [r0, #9]
 80022d6:	7905      	ldrb	r5, [r0, #4]
 80022d8:	9304      	str	r3, [sp, #16]
 80022da:	7b03      	ldrb	r3, [r0, #12]
 80022dc:	7a84      	ldrb	r4, [r0, #10]
 80022de:	9303      	str	r3, [sp, #12]
 80022e0:	7b43      	ldrb	r3, [r0, #13]
 80022e2:	7ac1      	ldrb	r1, [r0, #11]
 80022e4:	9302      	str	r3, [sp, #8]
 80022e6:	7b83      	ldrb	r3, [r0, #14]
 80022e8:	7987      	ldrb	r7, [r0, #6]
 80022ea:	9301      	str	r3, [sp, #4]
    block[1] = temp[1];
    block[2] = temp[2];
    block[3] = temp[3];

    // Row 1: Shift left by 1
    block[4] = temp[5];
 80022ec:	7943      	ldrb	r3, [r0, #5]
    memcpy(temp, block, BLOCK_SIZE);
 80022ee:	79c6      	ldrb	r6, [r0, #7]
    block[4] = temp[5];
 80022f0:	7103      	strb	r3, [r0, #4]
    block[7] = temp[4];

    // Row 2: Shift left by 2
    block[8] = temp[10];
    block[9] = temp[11];
    block[10] = temp[8];
 80022f2:	9b05      	ldr	r3, [sp, #20]
    memcpy(temp, block, BLOCK_SIZE);
 80022f4:	7bc2      	ldrb	r2, [r0, #15]
    block[10] = temp[8];
 80022f6:	7283      	strb	r3, [r0, #10]
    block[11] = temp[9];
 80022f8:	9b04      	ldr	r3, [sp, #16]
    block[5] = temp[6];
 80022fa:	7147      	strb	r7, [r0, #5]
    block[11] = temp[9];
 80022fc:	72c3      	strb	r3, [r0, #11]

    // Row 3: Shift left by 3
    block[12] = temp[15];
    block[13] = temp[12];
 80022fe:	9b03      	ldr	r3, [sp, #12]
    block[6] = temp[7];
 8002300:	7186      	strb	r6, [r0, #6]
    block[13] = temp[12];
 8002302:	7343      	strb	r3, [r0, #13]
    block[14] = temp[13];
 8002304:	9b02      	ldr	r3, [sp, #8]
    block[7] = temp[4];
 8002306:	71c5      	strb	r5, [r0, #7]
    block[8] = temp[10];
 8002308:	7204      	strb	r4, [r0, #8]
    block[9] = temp[11];
 800230a:	7241      	strb	r1, [r0, #9]
    block[12] = temp[15];
 800230c:	7302      	strb	r2, [r0, #12]
    block[14] = temp[13];
 800230e:	7383      	strb	r3, [r0, #14]
    block[15] = temp[14];
 8002310:	9b01      	ldr	r3, [sp, #4]
 8002312:	73c3      	strb	r3, [r0, #15]
}
 8002314:	b007      	add	sp, #28
 8002316:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002318 <encrypt_block>:

// Encryption function
void encrypt_block(uint8_t *block, const uint8_t *key, const uint8_t *mask) {
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	0004      	movs	r4, r0
 800231c:	000e      	movs	r6, r1
 800231e:	0017      	movs	r7, r2
 8002320:	250a      	movs	r5, #10
    for (int round = 0; round < 10; round++) {
        balanced_xor(block, mask);        // Masking step
 8002322:	0039      	movs	r1, r7
 8002324:	0020      	movs	r0, r4
 8002326:	f7ff ffc7 	bl	80022b8 <balanced_xor>
        trigger_high();
 800232a:	f000 faab 	bl	8002884 <trigger_high>
        substitute(block);               // Substitution step
 800232e:	0020      	movs	r0, r4
 8002330:	f7ff ffb6 	bl	80022a0 <substitute>
        trigger_low();
 8002334:	f000 faae 	bl	8002894 <trigger_low>
        permute(block);                  // Permutation step
 8002338:	0020      	movs	r0, r4
 800233a:	f7ff ffc7 	bl	80022cc <permute>
    for (int round = 0; round < 10; round++) {
 800233e:	3d01      	subs	r5, #1
        balanced_xor(block, key);        // XOR with key
 8002340:	0031      	movs	r1, r6
 8002342:	0020      	movs	r0, r4
 8002344:	f7ff ffb8 	bl	80022b8 <balanced_xor>
    for (int round = 0; round < 10; round++) {
 8002348:	2d00      	cmp	r5, #0
 800234a:	d1ea      	bne.n	8002322 <encrypt_block+0xa>
    }
}
 800234c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800234e:	0000      	movs	r0, r0

08002350 <inverse_substitute_byte>:

// Apply the substitution step
uint8_t inverse_substitute_byte(uint8_t byte) {
    uint8_t result = 0;
    for (int i = 0; i < 256; i++) {
 8002350:	2300      	movs	r3, #0
uint8_t inverse_substitute_byte(uint8_t byte) {
 8002352:	b530      	push	{r4, r5, lr}
    for (int i = 0; i < 256; i++) {
 8002354:	2480      	movs	r4, #128	@ 0x80
uint8_t inverse_substitute_byte(uint8_t byte) {
 8002356:	0002      	movs	r2, r0
    uint8_t result = 0;
 8002358:	0018      	movs	r0, r3
        uint8_t match = (byte == i);         // 1 if true, 0 if false
        result |= match * InvSBox[i];           // Add SBox[i] to result only if match
 800235a:	4d06      	ldr	r5, [pc, #24]	@ (8002374 <inverse_substitute_byte+0x24>)
    for (int i = 0; i < 256; i++) {
 800235c:	0064      	lsls	r4, r4, #1
        result |= match * InvSBox[i];           // Add SBox[i] to result only if match
 800235e:	2100      	movs	r1, #0
 8002360:	429a      	cmp	r2, r3
 8002362:	d100      	bne.n	8002366 <inverse_substitute_byte+0x16>
 8002364:	5ce9      	ldrb	r1, [r5, r3]
 8002366:	4308      	orrs	r0, r1
    for (int i = 0; i < 256; i++) {
 8002368:	3301      	adds	r3, #1
 800236a:	b2c0      	uxtb	r0, r0
 800236c:	42a3      	cmp	r3, r4
 800236e:	d1f6      	bne.n	800235e <inverse_substitute_byte+0xe>
    }
    return result;
}
 8002370:	bd30      	pop	{r4, r5, pc}
 8002372:	46c0      	nop			@ (mov r8, r8)
 8002374:	08003324 	.word	0x08003324

08002378 <inverse_substitute>:


// Function to substitute a byte
void inverse_substitute(uint8_t *block) {
 8002378:	b570      	push	{r4, r5, r6, lr}
 800237a:	0005      	movs	r5, r0
 800237c:	0004      	movs	r4, r0
 800237e:	3510      	adds	r5, #16
    for (int i = 0; i < BLOCK_SIZE; i++) {
        block[i] = inverse_substitute_byte(block[i]);
 8002380:	7820      	ldrb	r0, [r4, #0]
 8002382:	f7ff ffe5 	bl	8002350 <inverse_substitute_byte>
 8002386:	7020      	strb	r0, [r4, #0]
    for (int i = 0; i < BLOCK_SIZE; i++) {
 8002388:	3401      	adds	r4, #1
 800238a:	42ac      	cmp	r4, r5
 800238c:	d1f8      	bne.n	8002380 <inverse_substitute+0x8>
    }
}
 800238e:	bd70      	pop	{r4, r5, r6, pc}

08002390 <reverse_permute>:

//Reverse permutation
void reverse_permute(uint8_t *block) {
 8002390:	b5f0      	push	{r4, r5, r6, r7, lr}

    uint8_t temp[BLOCK_SIZE];
    memcpy(temp, block, BLOCK_SIZE);
 8002392:	7a03      	ldrb	r3, [r0, #8]
void reverse_permute(uint8_t *block) {
 8002394:	b087      	sub	sp, #28
    memcpy(temp, block, BLOCK_SIZE);
 8002396:	9304      	str	r3, [sp, #16]
 8002398:	7a43      	ldrb	r3, [r0, #9]
 800239a:	7907      	ldrb	r7, [r0, #4]
 800239c:	9303      	str	r3, [sp, #12]
 800239e:	7b03      	ldrb	r3, [r0, #12]
 80023a0:	7a84      	ldrb	r4, [r0, #10]
 80023a2:	9302      	str	r3, [sp, #8]
 80023a4:	7b43      	ldrb	r3, [r0, #13]
 80023a6:	7ac1      	ldrb	r1, [r0, #11]
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	7bc3      	ldrb	r3, [r0, #15]
 80023ac:	7946      	ldrb	r6, [r0, #5]
 80023ae:	9305      	str	r3, [sp, #20]
    block[1] = temp[1];
    block[2] = temp[2];
    block[3] = temp[3];

    // Row 1: Shift right by 1
    block[4] = temp[7];
 80023b0:	79c3      	ldrb	r3, [r0, #7]
    memcpy(temp, block, BLOCK_SIZE);
 80023b2:	7985      	ldrb	r5, [r0, #6]
    block[4] = temp[7];
 80023b4:	7103      	strb	r3, [r0, #4]
    block[7] = temp[6];

    // Row 2: Shift right by 2
    block[8] = temp[10];
    block[9] = temp[11];
    block[10] = temp[8];
 80023b6:	9b04      	ldr	r3, [sp, #16]
    memcpy(temp, block, BLOCK_SIZE);
 80023b8:	7b82      	ldrb	r2, [r0, #14]
    block[10] = temp[8];
 80023ba:	7283      	strb	r3, [r0, #10]
    block[11] = temp[9];
 80023bc:	9b03      	ldr	r3, [sp, #12]
    block[5] = temp[4];
 80023be:	7147      	strb	r7, [r0, #5]
    block[11] = temp[9];
 80023c0:	72c3      	strb	r3, [r0, #11]

    // Row 3: Shift right by 3
    block[12] = temp[13];
 80023c2:	9b01      	ldr	r3, [sp, #4]
    block[6] = temp[5];
 80023c4:	7186      	strb	r6, [r0, #6]
    block[12] = temp[13];
 80023c6:	7303      	strb	r3, [r0, #12]
    block[13] = temp[14];
    block[14] = temp[15];
 80023c8:	9b05      	ldr	r3, [sp, #20]
    block[7] = temp[6];
 80023ca:	71c5      	strb	r5, [r0, #7]
    block[8] = temp[10];
 80023cc:	7204      	strb	r4, [r0, #8]
    block[9] = temp[11];
 80023ce:	7241      	strb	r1, [r0, #9]
    block[13] = temp[14];
 80023d0:	7342      	strb	r2, [r0, #13]
    block[14] = temp[15];
 80023d2:	7383      	strb	r3, [r0, #14]
    block[15] = temp[12];
 80023d4:	9b02      	ldr	r3, [sp, #8]
 80023d6:	73c3      	strb	r3, [r0, #15]
}
 80023d8:	b007      	add	sp, #28
 80023da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023dc <decrypt_block>:

//Decryption function
void decrypt_block(uint8_t *block, const uint8_t *key, const uint8_t *mask) {
 80023dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023de:	0004      	movs	r4, r0
 80023e0:	000f      	movs	r7, r1
 80023e2:	0016      	movs	r6, r2
 80023e4:	250a      	movs	r5, #10
    for (int round = 0; round < ROUNDS; round++) {
        balanced_xor(block, key);        // Reverse XOR with key
 80023e6:	0039      	movs	r1, r7
 80023e8:	0020      	movs	r0, r4
 80023ea:	f7ff ff65 	bl	80022b8 <balanced_xor>
        reverse_permute(block);          // Reverse permutation
 80023ee:	0020      	movs	r0, r4
 80023f0:	f7ff ffce 	bl	8002390 <reverse_permute>
        inverse_substitute(block);       // Reverse substitution
 80023f4:	0020      	movs	r0, r4
 80023f6:	f7ff ffbf 	bl	8002378 <inverse_substitute>
    for (int round = 0; round < ROUNDS; round++) {
 80023fa:	3d01      	subs	r5, #1
        balanced_xor(block, mask);       // Reverse XOR with mask
 80023fc:	0031      	movs	r1, r6
 80023fe:	0020      	movs	r0, r4
 8002400:	f7ff ff5a 	bl	80022b8 <balanced_xor>
    for (int round = 0; round < ROUNDS; round++) {
 8002404:	2d00      	cmp	r5, #0
 8002406:	d1ee      	bne.n	80023e6 <decrypt_block+0xa>
    }
}
 8002408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800240a:	0000      	movs	r0, r0

0800240c <get_pt>:


// Function to get the plaintext from UART and perform encryption
uint8_t get_pt(uint8_t* pt, uint8_t len)
{
 800240c:	b510      	push	{r4, lr}
 800240e:	0004      	movs	r4, r0

  #ifdef ADD_JITTER
  for (volatile uint8_t k = 0; k < (*pt & 0x0F); k++);
  #endif

	encrypt_block(pt, key, mask); /* encrypting the data block */
 8002410:	4a05      	ldr	r2, [pc, #20]	@ (8002428 <get_pt+0x1c>)
 8002412:	4906      	ldr	r1, [pc, #24]	@ (800242c <get_pt+0x20>)
 8002414:	f7ff ff80 	bl	8002318 <encrypt_block>
	//trigger_low();

	simpleserial_put('r', 16, pt);
 8002418:	0022      	movs	r2, r4
 800241a:	2110      	movs	r1, #16
 800241c:	2072      	movs	r0, #114	@ 0x72
 800241e:	f000 f8cb 	bl	80025b8 <simpleserial_put>

	return 0x00;
}
 8002422:	2000      	movs	r0, #0
 8002424:	bd10      	pop	{r4, pc}
 8002426:	46c0      	nop			@ (mov r8, r8)
 8002428:	2000007c 	.word	0x2000007c
 800242c:	2000008c 	.word	0x2000008c

08002430 <get_pt_wrapper>:

}


uint8_t get_pt_wrapper(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 8002430:	b510      	push	{r4, lr}
 8002432:	0011      	movs	r1, r2
 8002434:	0018      	movs	r0, r3
    uint8_t err = 0;
    err = get_pt(buf, len);
 8002436:	f7ff ffe9 	bl	800240c <get_pt>
        return err;
    
    return 0x00;
}
 800243a:	bd10      	pop	{r4, pc}

0800243c <give_dt>:
{
 800243c:	b510      	push	{r4, lr}
 800243e:	0004      	movs	r4, r0
	trigger_high();
 8002440:	f000 fa20 	bl	8002884 <trigger_high>
	trigger_high();
 8002444:	f000 fa1e 	bl	8002884 <trigger_high>
	decrypt_block(dt, key, mask); /* encrypting the data block */
 8002448:	0020      	movs	r0, r4
 800244a:	4a06      	ldr	r2, [pc, #24]	@ (8002464 <give_dt+0x28>)
 800244c:	4906      	ldr	r1, [pc, #24]	@ (8002468 <give_dt+0x2c>)
 800244e:	f7ff ffc5 	bl	80023dc <decrypt_block>
	trigger_low();
 8002452:	f000 fa1f 	bl	8002894 <trigger_low>
	simpleserial_put('r', 16, dt);
 8002456:	0022      	movs	r2, r4
 8002458:	2110      	movs	r1, #16
 800245a:	2072      	movs	r0, #114	@ 0x72
 800245c:	f000 f8ac 	bl	80025b8 <simpleserial_put>
}
 8002460:	2000      	movs	r0, #0
 8002462:	bd10      	pop	{r4, pc}
 8002464:	2000007c 	.word	0x2000007c
 8002468:	2000008c 	.word	0x2000008c

0800246c <give_dt_wrapper>:

uint8_t give_dt_wrapper(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 800246c:	b510      	push	{r4, lr}
 800246e:	0011      	movs	r1, r2
 8002470:	0018      	movs	r0, r3
    uint8_t err = 0;
    err = give_dt(buf, len);
 8002472:	f7ff ffe3 	bl	800243c <give_dt>
        return err;
    
    return 0x00;
}
 8002476:	bd10      	pop	{r4, pc}

08002478 <get_key>:
{
 8002478:	2300      	movs	r3, #0
		key[i] = pykey[i];
 800247a:	4a04      	ldr	r2, [pc, #16]	@ (800248c <get_key+0x14>)
 800247c:	5cc1      	ldrb	r1, [r0, r3]
 800247e:	5499      	strb	r1, [r3, r2]
    for(uint8_t i=0; i < 16; i++){
 8002480:	3301      	adds	r3, #1
 8002482:	2b10      	cmp	r3, #16
 8002484:	d1fa      	bne.n	800247c <get_key+0x4>
}
 8002486:	2000      	movs	r0, #0
 8002488:	4770      	bx	lr
 800248a:	46c0      	nop			@ (mov r8, r8)
 800248c:	2000008c 	.word	0x2000008c

08002490 <get_key_wrapper>:

uint8_t get_key_wrapper(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 8002490:	b510      	push	{r4, lr}
 8002492:	0011      	movs	r1, r2
 8002494:	0018      	movs	r0, r3
    uint8_t err = 0;
    err = get_key(buf, len);
 8002496:	f7ff ffef 	bl	8002478 <get_key>
        return err;
    
    return 0x00;
}
 800249a:	bd10      	pop	{r4, pc}

0800249c <main>:


int main(void)
{
 800249c:	b510      	push	{r4, lr}
    platform_init();
 800249e:	f000 f945 	bl	800272c <platform_init>
    init_uart();
 80024a2:	f000 f96f 	bl	8002784 <init_uart>
    trigger_setup();
 80024a6:	f000 f9ad 	bl	8002804 <trigger_setup>
    init_mask();
 80024aa:	f7ff fed3 	bl	8002254 <init_mask>

    simpleserial_init();
 80024ae:	f000 f873 	bl	8002598 <simpleserial_init>
    #if SS_VER == SS_VER_2_1
    // simpleserial_addcmd(0x01, 16, aes);  // Add AES command for testing 
    simpleserial_addcmd('d', 16, give_dt_wrapper); // Use 'd' command to get cyphertext and decrypt
 80024b2:	2110      	movs	r1, #16
 80024b4:	4a08      	ldr	r2, [pc, #32]	@ (80024d8 <main+0x3c>)
 80024b6:	2064      	movs	r0, #100	@ 0x64
 80024b8:	f000 f850 	bl	800255c <simpleserial_addcmd>
    simpleserial_addcmd('e', 16, get_pt_wrapper);  // Use 'p' command to get plaintext and encrypt
 80024bc:	2110      	movs	r1, #16
 80024be:	4a07      	ldr	r2, [pc, #28]	@ (80024dc <main+0x40>)
 80024c0:	2065      	movs	r0, #101	@ 0x65
 80024c2:	f000 f84b 	bl	800255c <simpleserial_addcmd>
    simpleserial_addcmd('l', 16, get_key_wrapper); // Use 'k' command to get the key
 80024c6:	2110      	movs	r1, #16
 80024c8:	206c      	movs	r0, #108	@ 0x6c
 80024ca:	4a05      	ldr	r2, [pc, #20]	@ (80024e0 <main+0x44>)
 80024cc:	f000 f846 	bl	800255c <simpleserial_addcmd>
    #else
	
    #endif

    while(1)
        simpleserial_get();  // Wait for UART commands
 80024d0:	f000 f8c2 	bl	8002658 <simpleserial_get>
    while(1)
 80024d4:	e7fc      	b.n	80024d0 <main+0x34>
 80024d6:	46c0      	nop			@ (mov r8, r8)
 80024d8:	0800246d 	.word	0x0800246d
 80024dc:	08002431 	.word	0x08002431
 80024e0:	08002491 	.word	0x08002491

080024e4 <ss_crc>:
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 80024e4:	0003      	movs	r3, r0
{
 80024e6:	b530      	push	{r4, r5, lr}
 80024e8:	1841      	adds	r1, r0, r1
		crc ^= *buf++;
		for (k = 0; k < 8; k++) {
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 80024ea:	254d      	movs	r5, #77	@ 0x4d
	uint8_t crc = 0x00;
 80024ec:	2000      	movs	r0, #0
	while (len--) {
 80024ee:	428b      	cmp	r3, r1
 80024f0:	d100      	bne.n	80024f4 <ss_crc+0x10>
		}
	}
	return crc;

}
 80024f2:	bd30      	pop	{r4, r5, pc}
		crc ^= *buf++;
 80024f4:	2408      	movs	r4, #8
 80024f6:	781a      	ldrb	r2, [r3, #0]
 80024f8:	4050      	eors	r0, r2
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 80024fa:	b242      	sxtb	r2, r0
 80024fc:	0040      	lsls	r0, r0, #1
 80024fe:	b2c0      	uxtb	r0, r0
 8002500:	2a00      	cmp	r2, #0
 8002502:	da02      	bge.n	800250a <ss_crc+0x26>
 8002504:	0052      	lsls	r2, r2, #1
 8002506:	406a      	eors	r2, r5
 8002508:	b2d0      	uxtb	r0, r2
		for (k = 0; k < 8; k++) {
 800250a:	3c01      	subs	r4, #1
 800250c:	2c00      	cmp	r4, #0
 800250e:	d1f4      	bne.n	80024fa <ss_crc+0x16>
 8002510:	3301      	adds	r3, #1
 8002512:	e7ec      	b.n	80024ee <ss_crc+0xa>

08002514 <stuff_data>:
}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
	uint8_t i = 1;
	uint8_t last = 0;
 8002514:	2200      	movs	r2, #0
	uint8_t i = 1;
 8002516:	2301      	movs	r3, #1
{
 8002518:	b530      	push	{r4, r5, lr}
 800251a:	1c44      	adds	r4, r0, #1
	for (; i < len; i++) {
 800251c:	428b      	cmp	r3, r1
 800251e:	d301      	bcc.n	8002524 <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 8002520:	2000      	movs	r0, #0
 8002522:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 8002524:	7825      	ldrb	r5, [r4, #0]
 8002526:	2d00      	cmp	r5, #0
 8002528:	d102      	bne.n	8002530 <stuff_data+0x1c>
			buf[last] = i - last;
 800252a:	1a9d      	subs	r5, r3, r2
 800252c:	5485      	strb	r5, [r0, r2]
			last = i;
 800252e:	001a      	movs	r2, r3
	for (; i < len; i++) {
 8002530:	3301      	adds	r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	3401      	adds	r4, #1
 8002536:	e7f1      	b.n	800251c <stuff_data+0x8>

08002538 <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 8002538:	b530      	push	{r4, r5, lr}
	uint8_t next = buf[0];
	buf[0] = 0x00;
 800253a:	2500      	movs	r5, #0
	uint8_t next = buf[0];
 800253c:	7804      	ldrb	r4, [r0, #0]
{
 800253e:	0002      	movs	r2, r0
	buf[0] = 0x00;
 8002540:	7005      	strb	r5, [r0, #0]
	uint8_t next = buf[0];
 8002542:	0020      	movs	r0, r4
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 8002544:	4288      	cmp	r0, r1
 8002546:	d201      	bcs.n	800254c <unstuff_data+0x14>
 8002548:	2c00      	cmp	r4, #0
 800254a:	d100      	bne.n	800254e <unstuff_data+0x16>
		tmp = buf[next];
		buf[next] = FRAME_BYTE;
		next += tmp;
	}
	return next;
}
 800254c:	bd30      	pop	{r4, r5, pc}
		tmp = buf[next];
 800254e:	5c14      	ldrb	r4, [r2, r0]
 8002550:	1813      	adds	r3, r2, r0
		next += tmp;
 8002552:	1900      	adds	r0, r0, r4
		buf[next] = FRAME_BYTE;
 8002554:	701d      	strb	r5, [r3, #0]
		next += tmp;
 8002556:	b2c0      	uxtb	r0, r0
 8002558:	e7f4      	b.n	8002544 <unstuff_data+0xc>
 800255a:	0000      	movs	r0, r0

0800255c <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
    simpleserial_addcmd('w', 0, ss_get_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 800255c:	b570      	push	{r4, r5, r6, lr}
	if(num_commands >= MAX_SS_CMDS) {
 800255e:	4e0c      	ldr	r6, [pc, #48]	@ (8002590 <simpleserial_addcmd+0x34>)
 8002560:	6834      	ldr	r4, [r6, #0]
 8002562:	2c0f      	cmp	r4, #15
 8002564:	dd04      	ble.n	8002570 <simpleserial_addcmd+0x14>
		putch('a');
 8002566:	2061      	movs	r0, #97	@ 0x61
		return 1;
	}

	if(len >= MAX_SS_LEN) {
		putch('b');
 8002568:	f000 f9b4 	bl	80028d4 <putch>
		return 1;
 800256c:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 800256e:	bd70      	pop	{r4, r5, r6, pc}
	if(len >= MAX_SS_LEN) {
 8002570:	29ff      	cmp	r1, #255	@ 0xff
 8002572:	d901      	bls.n	8002578 <simpleserial_addcmd+0x1c>
		putch('b');
 8002574:	2062      	movs	r0, #98	@ 0x62
 8002576:	e7f7      	b.n	8002568 <simpleserial_addcmd+0xc>
	commands[num_commands].c   = c;
 8002578:	250c      	movs	r5, #12
 800257a:	4365      	muls	r5, r4
 800257c:	4b05      	ldr	r3, [pc, #20]	@ (8002594 <simpleserial_addcmd+0x38>)
	num_commands++;
 800257e:	3401      	adds	r4, #1
	commands[num_commands].c   = c;
 8002580:	54e8      	strb	r0, [r5, r3]
	commands[num_commands].len = len;
 8002582:	195b      	adds	r3, r3, r5
	return 0;
 8002584:	2000      	movs	r0, #0
	commands[num_commands].len = len;
 8002586:	6059      	str	r1, [r3, #4]
	commands[num_commands].fp  = fp;
 8002588:	609a      	str	r2, [r3, #8]
	num_commands++;
 800258a:	6034      	str	r4, [r6, #0]
	return 0;
 800258c:	e7ef      	b.n	800256e <simpleserial_addcmd+0x12>
 800258e:	46c0      	nop			@ (mov r8, r8)
 8002590:	2000009c 	.word	0x2000009c
 8002594:	200000a0 	.word	0x200000a0

08002598 <simpleserial_init>:
{
 8002598:	b510      	push	{r4, lr}
	simpleserial_addcmd('v', 0, check_version);
 800259a:	2100      	movs	r1, #0
 800259c:	4a04      	ldr	r2, [pc, #16]	@ (80025b0 <simpleserial_init+0x18>)
 800259e:	2076      	movs	r0, #118	@ 0x76
 80025a0:	f7ff ffdc 	bl	800255c <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 80025a4:	2100      	movs	r1, #0
 80025a6:	2077      	movs	r0, #119	@ 0x77
 80025a8:	4a02      	ldr	r2, [pc, #8]	@ (80025b4 <simpleserial_init+0x1c>)
 80025aa:	f7ff ffd7 	bl	800255c <simpleserial_addcmd>
}
 80025ae:	bd10      	pop	{r4, pc}
 80025b0:	08002607 	.word	0x08002607
 80025b4:	0800261d 	.word	0x0800261d

080025b8 <simpleserial_put>:
	simpleserial_put('e', 0x01, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 80025b8:	b570      	push	{r4, r5, r6, lr}
 80025ba:	b0c0      	sub	sp, #256	@ 0x100
 80025bc:	000c      	movs	r4, r1
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 80025be:	466b      	mov	r3, sp
 80025c0:	2500      	movs	r5, #0
{
 80025c2:	0011      	movs	r1, r2
	data_buf[1] = c;
 80025c4:	7058      	strb	r0, [r3, #1]
	data_buf[2] = size;
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 80025c6:	0022      	movs	r2, r4
 80025c8:	1cd8      	adds	r0, r3, #3
	data_buf[2] = size;
 80025ca:	709c      	strb	r4, [r3, #2]
	data_buf[0] = 0x00;
 80025cc:	701d      	strb	r5, [r3, #0]
		data_buf[i + 3] = output[i];
 80025ce:	f7fe f825 	bl	800061c <memcpy>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 80025d2:	466b      	mov	r3, sp
 80025d4:	1ca1      	adds	r1, r4, #2
 80025d6:	b2c9      	uxtb	r1, r1
 80025d8:	1c58      	adds	r0, r3, #1
 80025da:	f7ff ff83 	bl	80024e4 <ss_crc>
 80025de:	0023      	movs	r3, r4
 80025e0:	446b      	add	r3, sp
 80025e2:	70d8      	strb	r0, [r3, #3]
	data_buf[i + 4] = 0x00;
 80025e4:	466b      	mov	r3, sp
 80025e6:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 80025e8:	3405      	adds	r4, #5
 80025ea:	4668      	mov	r0, sp
 80025ec:	b2e1      	uxtb	r1, r4
	data_buf[i + 4] = 0x00;
 80025ee:	559d      	strb	r5, [r3, r6]
	stuff_data(data_buf, i + 5);
 80025f0:	f7ff ff90 	bl	8002514 <stuff_data>
	for (int i = 0; i < size + 5; i++) {
		putch(data_buf[i]);
 80025f4:	466b      	mov	r3, sp
 80025f6:	5d58      	ldrb	r0, [r3, r5]
	for (int i = 0; i < size + 5; i++) {
 80025f8:	3501      	adds	r5, #1
		putch(data_buf[i]);
 80025fa:	f000 f96b 	bl	80028d4 <putch>
	for (int i = 0; i < size + 5; i++) {
 80025fe:	42ae      	cmp	r6, r5
 8002600:	daf8      	bge.n	80025f4 <simpleserial_put+0x3c>
	}
}
 8002602:	b040      	add	sp, #256	@ 0x100
 8002604:	bd70      	pop	{r4, r5, r6, pc}

08002606 <check_version>:
{
 8002606:	b507      	push	{r0, r1, r2, lr}
	uint8_t ver = SS_VER;
 8002608:	466b      	mov	r3, sp
 800260a:	1dda      	adds	r2, r3, #7
 800260c:	2303      	movs	r3, #3
	simpleserial_put('r', 1, &ver);
 800260e:	2072      	movs	r0, #114	@ 0x72
 8002610:	2101      	movs	r1, #1
	uint8_t ver = SS_VER;
 8002612:	7013      	strb	r3, [r2, #0]
	simpleserial_put('r', 1, &ver);
 8002614:	f7ff ffd0 	bl	80025b8 <simpleserial_put>
}
 8002618:	2000      	movs	r0, #0
 800261a:	bd0e      	pop	{r1, r2, r3, pc}

0800261c <ss_get_commands>:
{
 800261c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800261e:	4b0c      	ldr	r3, [pc, #48]	@ (8002650 <ss_get_commands+0x34>)
        cmd_chars[i] = commands[i].c;
 8002620:	240c      	movs	r4, #12
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8002622:	6819      	ldr	r1, [r3, #0]
 8002624:	2300      	movs	r3, #0
        cmd_chars[i] = commands[i].c;
 8002626:	480b      	ldr	r0, [pc, #44]	@ (8002654 <ss_get_commands+0x38>)
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8002628:	b2ca      	uxtb	r2, r1
 800262a:	4293      	cmp	r3, r2
 800262c:	db07      	blt.n	800263e <ss_get_commands+0x22>
    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 800262e:	466a      	mov	r2, sp
 8002630:	2072      	movs	r0, #114	@ 0x72
 8002632:	b2c9      	uxtb	r1, r1
 8002634:	f7ff ffc0 	bl	80025b8 <simpleserial_put>
}
 8002638:	2000      	movs	r0, #0
 800263a:	b004      	add	sp, #16
 800263c:	bd70      	pop	{r4, r5, r6, pc}
        cmd_chars[i] = commands[i].c;
 800263e:	0025      	movs	r5, r4
 8002640:	466e      	mov	r6, sp
 8002642:	435d      	muls	r5, r3
 8002644:	5c2d      	ldrb	r5, [r5, r0]
 8002646:	54f5      	strb	r5, [r6, r3]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8002648:	3301      	adds	r3, #1
 800264a:	b2db      	uxtb	r3, r3
 800264c:	e7ed      	b.n	800262a <ss_get_commands+0xe>
 800264e:	46c0      	nop			@ (mov r8, r8)
 8002650:	2000009c 	.word	0x2000009c
 8002654:	200000a0 	.word	0x200000a0

08002658 <simpleserial_get>:
{
 8002658:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t err = 0;
 800265a:	2500      	movs	r5, #0
{
 800265c:	b0c5      	sub	sp, #276	@ 0x114
	uint8_t err = 0;
 800265e:	ab02      	add	r3, sp, #8
 8002660:	71dd      	strb	r5, [r3, #7]
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 8002662:	f000 f91f 	bl	80028a4 <getch>
 8002666:	ac04      	add	r4, sp, #16
 8002668:	5528      	strb	r0, [r5, r4]
		if (data_buf[i] == FRAME_BYTE) {
 800266a:	2800      	cmp	r0, #0
 800266c:	d109      	bne.n	8002682 <simpleserial_get+0x2a>
			goto ERROR;
 800266e:	2305      	movs	r3, #5
			err = SS_ERR_FRAME_BYTE;
 8002670:	aa02      	add	r2, sp, #8
 8002672:	71d3      	strb	r3, [r2, #7]
	simpleserial_put('e', 0x01, &err);
 8002674:	2101      	movs	r1, #1
 8002676:	2065      	movs	r0, #101	@ 0x65
 8002678:	3207      	adds	r2, #7
 800267a:	f7ff ff9d 	bl	80025b8 <simpleserial_put>
}
 800267e:	b045      	add	sp, #276	@ 0x114
 8002680:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (int i = 0; i < 4; i++) {
 8002682:	3501      	adds	r5, #1
 8002684:	2d04      	cmp	r5, #4
 8002686:	d1ec      	bne.n	8002662 <simpleserial_get+0xa>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8002688:	0029      	movs	r1, r5
 800268a:	0020      	movs	r0, r4
 800268c:	f7ff ff54 	bl	8002538 <unstuff_data>
	for(c = 0; c < num_commands; c++)
 8002690:	2600      	movs	r6, #0
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8002692:	9001      	str	r0, [sp, #4]
		if(commands[c].c == data_buf[1])
 8002694:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 8002696:	4b23      	ldr	r3, [pc, #140]	@ (8002724 <simpleserial_get+0xcc>)
		if(commands[c].c == data_buf[1])
 8002698:	4923      	ldr	r1, [pc, #140]	@ (8002728 <simpleserial_get+0xd0>)
	for(c = 0; c < num_commands; c++)
 800269a:	681a      	ldr	r2, [r3, #0]
		if(commands[c].c == data_buf[1])
 800269c:	7863      	ldrb	r3, [r4, #1]
	for(c = 0; c < num_commands; c++)
 800269e:	4296      	cmp	r6, r2
 80026a0:	db09      	blt.n	80026b6 <simpleserial_get+0x5e>
	if (c == num_commands) {
 80026a2:	2301      	movs	r3, #1
 80026a4:	4296      	cmp	r6, r2
 80026a6:	d0e3      	beq.n	8002670 <simpleserial_get+0x18>
	if ((data_buf[3] + 5) < next_frame) {
 80026a8:	78e3      	ldrb	r3, [r4, #3]
 80026aa:	9a01      	ldr	r2, [sp, #4]
 80026ac:	3305      	adds	r3, #5
 80026ae:	4293      	cmp	r3, r2
 80026b0:	da0a      	bge.n	80026c8 <simpleserial_get+0x70>
		goto ERROR;
 80026b2:	2304      	movs	r3, #4
 80026b4:	e7dc      	b.n	8002670 <simpleserial_get+0x18>
		if(commands[c].c == data_buf[1])
 80026b6:	0007      	movs	r7, r0
 80026b8:	4377      	muls	r7, r6
 80026ba:	5c7f      	ldrb	r7, [r7, r1]
 80026bc:	429f      	cmp	r7, r3
 80026be:	d0f3      	beq.n	80026a8 <simpleserial_get+0x50>
	for(c = 0; c < num_commands; c++)
 80026c0:	3601      	adds	r6, #1
 80026c2:	b2f6      	uxtb	r6, r6
 80026c4:	e7eb      	b.n	800269e <simpleserial_get+0x46>
 80026c6:	003d      	movs	r5, r7
		data_buf[i] = getch();
 80026c8:	f000 f8ec 	bl	80028a4 <getch>
 80026cc:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 80026ce:	2800      	cmp	r0, #0
 80026d0:	d0cd      	beq.n	800266e <simpleserial_get+0x16>
	for (; i < data_buf[3] + 5; i++) {
 80026d2:	78e3      	ldrb	r3, [r4, #3]
 80026d4:	1c6f      	adds	r7, r5, #1
 80026d6:	3304      	adds	r3, #4
 80026d8:	42bb      	cmp	r3, r7
 80026da:	daf4      	bge.n	80026c6 <simpleserial_get+0x6e>
	data_buf[i] = getch();
 80026dc:	f000 f8e2 	bl	80028a4 <getch>
 80026e0:	55e0      	strb	r0, [r4, r7]
	if (data_buf[i] != FRAME_BYTE) {
 80026e2:	2800      	cmp	r0, #0
 80026e4:	d1e5      	bne.n	80026b2 <simpleserial_get+0x5a>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 80026e6:	9b01      	ldr	r3, [sp, #4]
 80026e8:	b2ff      	uxtb	r7, r7
 80026ea:	1af9      	subs	r1, r7, r3
 80026ec:	3101      	adds	r1, #1
 80026ee:	b2c9      	uxtb	r1, r1
 80026f0:	18e0      	adds	r0, r4, r3
 80026f2:	f7ff ff21 	bl	8002538 <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 80026f6:	2009      	movs	r0, #9
 80026f8:	ab02      	add	r3, sp, #8
 80026fa:	3f02      	subs	r7, #2
 80026fc:	18c0      	adds	r0, r0, r3
 80026fe:	b2f9      	uxtb	r1, r7
 8002700:	f7ff fef0 	bl	80024e4 <ss_crc>
	if (crc != data_buf[i-1]) {
 8002704:	5d62      	ldrb	r2, [r4, r5]
 8002706:	2302      	movs	r3, #2
 8002708:	4282      	cmp	r2, r0
 800270a:	d1b1      	bne.n	8002670 <simpleserial_get+0x18>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 800270c:	78e2      	ldrb	r2, [r4, #3]
 800270e:	78a1      	ldrb	r1, [r4, #2]
 8002710:	7860      	ldrb	r0, [r4, #1]
 8002712:	240c      	movs	r4, #12
 8002714:	4374      	muls	r4, r6
 8002716:	4b04      	ldr	r3, [pc, #16]	@ (8002728 <simpleserial_get+0xd0>)
 8002718:	191b      	adds	r3, r3, r4
 800271a:	689c      	ldr	r4, [r3, #8]
 800271c:	ab05      	add	r3, sp, #20
 800271e:	47a0      	blx	r4
 8002720:	0003      	movs	r3, r0
 8002722:	e7a5      	b.n	8002670 <simpleserial_get+0x18>
 8002724:	2000009c 	.word	0x2000009c
 8002728:	200000a0 	.word	0x200000a0

0800272c <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 800272c:	b5f0      	push	{r4, r5, r6, r7, lr}
    GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_2;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800272e:	2790      	movs	r7, #144	@ 0x90
	GpioInit.Pull      = GPIO_NOPULL;
 8002730:	2400      	movs	r4, #0
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8002732:	2501      	movs	r5, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002734:	2603      	movs	r6, #3
	GpioInit.Pin       = GPIO_PIN_2;
 8002736:	2304      	movs	r3, #4
{
 8002738:	b097      	sub	sp, #92	@ 0x5c
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800273a:	05ff      	lsls	r7, r7, #23
 800273c:	0038      	movs	r0, r7
 800273e:	a905      	add	r1, sp, #20
	GpioInit.Pin       = GPIO_PIN_2;
 8002740:	9305      	str	r3, [sp, #20]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8002742:	9506      	str	r5, [sp, #24]
	GpioInit.Pull      = GPIO_NOPULL;
 8002744:	9407      	str	r4, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002746:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002748:	f000 fb42 	bl	8002dd0 <HAL_GPIO_Init>
    
	GpioInit.Pin       = GPIO_PIN_4;
 800274c:	2310      	movs	r3, #16
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800274e:	a905      	add	r1, sp, #20
 8002750:	0038      	movs	r0, r7
	GpioInit.Pin       = GPIO_PIN_4;
 8002752:	9305      	str	r3, [sp, #20]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8002754:	9506      	str	r5, [sp, #24]
	GpioInit.Pull      = GPIO_NOPULL;
 8002756:	9407      	str	r4, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002758:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800275a:	f000 fb39 	bl	8002dd0 <HAL_GPIO_Init>
  uint32_t flash_latency = 0;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 800275e:	2305      	movs	r3, #5
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002760:	a80a      	add	r0, sp, #40	@ 0x28
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8002762:	930b      	str	r3, [sp, #44]	@ 0x2c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8002764:	960a      	str	r6, [sp, #40]	@ 0x28
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8002766:	940d      	str	r4, [sp, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8002768:	9413      	str	r4, [sp, #76]	@ 0x4c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800276a:	f000 f8c9 	bl	8002900 <HAL_RCC_OscConfig>

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800276e:	2307      	movs	r3, #7
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8002770:	0021      	movs	r1, r4
 8002772:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8002774:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8002776:	9502      	str	r5, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8002778:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800277a:	9404      	str	r4, [sp, #16]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 800277c:	f000 fa9e 	bl	8002cbc <HAL_RCC_ClockConfig>
#endif
}
 8002780:	b017      	add	sp, #92	@ 0x5c
 8002782:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002784 <init_uart>:

void init_uart(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002784:	2280      	movs	r2, #128	@ 0x80
{
 8002786:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002788:	4c1b      	ldr	r4, [pc, #108]	@ (80027f8 <init_uart+0x74>)
 800278a:	0292      	lsls	r2, r2, #10
 800278c:	6963      	ldr	r3, [r4, #20]
{
 800278e:	b088      	sub	sp, #32
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002790:	4313      	orrs	r3, r2
 8002792:	6163      	str	r3, [r4, #20]
 8002794:	6963      	ldr	r3, [r4, #20]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
	GpioInit.Mode      = GPIO_MODE_AF_PP;
	GpioInit.Pull      = GPIO_PULLUP;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	GpioInit.Alternate = GPIO_AF1_USART1;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002796:	2090      	movs	r0, #144	@ 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002798:	4013      	ands	r3, r2
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	9b01      	ldr	r3, [sp, #4]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 800279e:	23c0      	movs	r3, #192	@ 0xc0
 80027a0:	00db      	lsls	r3, r3, #3
	GpioInit.Pull      = GPIO_PULLUP;
 80027a2:	2501      	movs	r5, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80027a4:	2603      	movs	r6, #3
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 80027a6:	9303      	str	r3, [sp, #12]
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80027aa:	a903      	add	r1, sp, #12
 80027ac:	05c0      	lsls	r0, r0, #23
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 80027ae:	9304      	str	r3, [sp, #16]
	GpioInit.Pull      = GPIO_PULLUP;
 80027b0:	9505      	str	r5, [sp, #20]
	GpioInit.Alternate = GPIO_AF1_USART1;
 80027b2:	9507      	str	r5, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80027b4:	9606      	str	r6, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80027b6:	f000 fb0b 	bl	8002dd0 <HAL_GPIO_Init>

	__HAL_RCC_USART1_CLK_ENABLE();
 80027ba:	2280      	movs	r2, #128	@ 0x80
 80027bc:	69a3      	ldr	r3, [r4, #24]
 80027be:	01d2      	lsls	r2, r2, #7
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61a3      	str	r3, [r4, #24]
 80027c4:	69a3      	ldr	r3, [r4, #24]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
	UartHandle.Instance        = USART1;
 80027c6:	480d      	ldr	r0, [pc, #52]	@ (80027fc <init_uart+0x78>)
	__HAL_RCC_USART1_CLK_ENABLE();
 80027c8:	4013      	ands	r3, r2
 80027ca:	9302      	str	r3, [sp, #8]
 80027cc:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 80027ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80027d0:	43b3      	bics	r3, r6
 80027d2:	431d      	orrs	r5, r3
	UartHandle.Instance        = USART1;
 80027d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002800 <init_uart+0x7c>)
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 80027d6:	6325      	str	r5, [r4, #48]	@ 0x30
	UartHandle.Instance        = USART1;
 80027d8:	6003      	str	r3, [r0, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 80027da:	23e1      	movs	r3, #225	@ 0xe1
 80027dc:	029b      	lsls	r3, r3, #10
 80027de:	6043      	str	r3, [r0, #4]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80027e0:	2300      	movs	r3, #0
 80027e2:	6083      	str	r3, [r0, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80027e4:	60c3      	str	r3, [r0, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 80027e6:	6103      	str	r3, [r0, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80027e8:	6183      	str	r3, [r0, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80027ea:	330c      	adds	r3, #12
 80027ec:	6143      	str	r3, [r0, #20]
	HAL_UART_Init(&UartHandle);
 80027ee:	f000 fc59 	bl	80030a4 <HAL_UART_Init>
}
 80027f2:	b008      	add	sp, #32
 80027f4:	bd70      	pop	{r4, r5, r6, pc}
 80027f6:	46c0      	nop			@ (mov r8, r8)
 80027f8:	40021000 	.word	0x40021000
 80027fc:	20000160 	.word	0x20000160
 8002800:	40013800 	.word	0x40013800

08002804 <trigger_setup>:

void trigger_setup(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002804:	2180      	movs	r1, #128	@ 0x80
 8002806:	4b1e      	ldr	r3, [pc, #120]	@ (8002880 <trigger_setup+0x7c>)
{
 8002808:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	0289      	lsls	r1, r1, #10
 800280e:	430a      	orrs	r2, r1
 8002810:	615a      	str	r2, [r3, #20]
 8002812:	695b      	ldr	r3, [r3, #20]
{
 8002814:	b087      	sub	sp, #28
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002816:	400b      	ands	r3, r1
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_7;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002818:	2490      	movs	r4, #144	@ 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800281a:	9300      	str	r3, [sp, #0]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800281c:	2501      	movs	r5, #1
	GpioInit.Pull      = GPIO_NOPULL;
 800281e:	2600      	movs	r6, #0
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002820:	2703      	movs	r7, #3
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002822:	9b00      	ldr	r3, [sp, #0]
	GpioInit.Pin       = GPIO_PIN_7;
 8002824:	2380      	movs	r3, #128	@ 0x80
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002826:	05e4      	lsls	r4, r4, #23
 8002828:	0020      	movs	r0, r4
 800282a:	a901      	add	r1, sp, #4
	GpioInit.Pin       = GPIO_PIN_7;
 800282c:	9301      	str	r3, [sp, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800282e:	9502      	str	r5, [sp, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 8002830:	9603      	str	r6, [sp, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002832:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002834:	f000 facc 	bl	8002dd0 <HAL_GPIO_Init>

	GpioInit.Pin       = GPIO_PIN_4;
 8002838:	2310      	movs	r3, #16
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800283a:	0020      	movs	r0, r4
 800283c:	a901      	add	r1, sp, #4
	GpioInit.Pin       = GPIO_PIN_4;
 800283e:	9301      	str	r3, [sp, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8002840:	9502      	str	r5, [sp, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 8002842:	9603      	str	r6, [sp, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002844:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002846:	f000 fac3 	bl	8002dd0 <HAL_GPIO_Init>

	GpioInit.Pin       = GPIO_PIN_2;
 800284a:	2304      	movs	r3, #4
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800284c:	0020      	movs	r0, r4
 800284e:	a901      	add	r1, sp, #4
	GpioInit.Pin       = GPIO_PIN_2;
 8002850:	9301      	str	r3, [sp, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8002852:	9502      	str	r5, [sp, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 8002854:	9603      	str	r6, [sp, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002856:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002858:	f000 faba 	bl	8002dd0 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 800285c:	0032      	movs	r2, r6
 800285e:	0020      	movs	r0, r4
 8002860:	2180      	movs	r1, #128	@ 0x80
 8002862:	f000 fb67 	bl	8002f34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 8002866:	002a      	movs	r2, r5
 8002868:	0020      	movs	r0, r4
 800286a:	2110      	movs	r1, #16
 800286c:	f000 fb62 	bl	8002f34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8002870:	002a      	movs	r2, r5
 8002872:	2104      	movs	r1, #4
 8002874:	0020      	movs	r0, r4
 8002876:	f000 fb5d 	bl	8002f34 <HAL_GPIO_WritePin>
}
 800287a:	b007      	add	sp, #28
 800287c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800287e:	46c0      	nop			@ (mov r8, r8)
 8002880:	40021000 	.word	0x40021000

08002884 <trigger_high>:

void trigger_high(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8002884:	2090      	movs	r0, #144	@ 0x90
{
 8002886:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8002888:	2201      	movs	r2, #1
 800288a:	2180      	movs	r1, #128	@ 0x80
 800288c:	05c0      	lsls	r0, r0, #23
 800288e:	f000 fb51 	bl	8002f34 <HAL_GPIO_WritePin>
}
 8002892:	bd10      	pop	{r4, pc}

08002894 <trigger_low>:

void trigger_low(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8002894:	2090      	movs	r0, #144	@ 0x90
{
 8002896:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8002898:	2200      	movs	r2, #0
 800289a:	2180      	movs	r1, #128	@ 0x80
 800289c:	05c0      	lsls	r0, r0, #23
 800289e:	f000 fb49 	bl	8002f34 <HAL_GPIO_WritePin>
}   
 80028a2:	bd10      	pop	{r4, pc}

080028a4 <getch>:

char getch(void)
{
 80028a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t d;
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
		USART1->ICR |= (1 << 3); // make sure overrun error is cleared, otherwise can stall here
 80028a6:	2408      	movs	r4, #8
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
 80028a8:	466b      	mov	r3, sp
 80028aa:	1ddd      	adds	r5, r3, #7
 80028ac:	2201      	movs	r2, #1
 80028ae:	2332      	movs	r3, #50	@ 0x32
 80028b0:	0029      	movs	r1, r5
 80028b2:	4806      	ldr	r0, [pc, #24]	@ (80028cc <getch+0x28>)
 80028b4:	f000 fc28 	bl	8003108 <HAL_UART_Receive>
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d101      	bne.n	80028c0 <getch+0x1c>
	return d;
 80028bc:	7828      	ldrb	r0, [r5, #0]
}
 80028be:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		USART1->ICR |= (1 << 3); // make sure overrun error is cleared, otherwise can stall here
 80028c0:	4a03      	ldr	r2, [pc, #12]	@ (80028d0 <getch+0x2c>)
 80028c2:	6a13      	ldr	r3, [r2, #32]
 80028c4:	4323      	orrs	r3, r4
 80028c6:	6213      	str	r3, [r2, #32]
 80028c8:	e7ee      	b.n	80028a8 <getch+0x4>
 80028ca:	46c0      	nop			@ (mov r8, r8)
 80028cc:	20000160 	.word	0x20000160
 80028d0:	40013800 	.word	0x40013800

080028d4 <putch>:

void putch(char c)
{
 80028d4:	b507      	push	{r0, r1, r2, lr}
	uint8_t d  = c;
 80028d6:	466b      	mov	r3, sp
 80028d8:	1dd9      	adds	r1, r3, #7
 80028da:	7008      	strb	r0, [r1, #0]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80028dc:	2201      	movs	r2, #1
 80028de:	4802      	ldr	r0, [pc, #8]	@ (80028e8 <putch+0x14>)
 80028e0:	4b02      	ldr	r3, [pc, #8]	@ (80028ec <putch+0x18>)
 80028e2:	f000 fc87 	bl	80031f4 <HAL_UART_Transmit>
}
 80028e6:	bd07      	pop	{r0, r1, r2, pc}
 80028e8:	20000160 	.word	0x20000160
 80028ec:	00001388 	.word	0x00001388

080028f0 <HAL_GetTick>:
#define assert_param(expr) ((void)0U)

uint32_t HAL_GetTick(void)
{
	static uint32_t tick;
	return tick++;;
 80028f0:	4b02      	ldr	r3, [pc, #8]	@ (80028fc <HAL_GetTick+0xc>)
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	1c42      	adds	r2, r0, #1
 80028f6:	601a      	str	r2, [r3, #0]
}
 80028f8:	4770      	bx	lr
 80028fa:	46c0      	nop			@ (mov r8, r8)
 80028fc:	200001d0 	.word	0x200001d0

08002900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002900:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002902:	6803      	ldr	r3, [r0, #0]
{
 8002904:	0004      	movs	r4, r0
 8002906:	b085      	sub	sp, #20
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002908:	07db      	lsls	r3, r3, #31
 800290a:	d42f      	bmi.n	800296c <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	079b      	lsls	r3, r3, #30
 8002910:	d500      	bpl.n	8002914 <HAL_RCC_OscConfig+0x14>
 8002912:	e081      	b.n	8002a18 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002914:	6823      	ldr	r3, [r4, #0]
 8002916:	071b      	lsls	r3, r3, #28
 8002918:	d500      	bpl.n	800291c <HAL_RCC_OscConfig+0x1c>
 800291a:	e0bc      	b.n	8002a96 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	075b      	lsls	r3, r3, #29
 8002920:	d500      	bpl.n	8002924 <HAL_RCC_OscConfig+0x24>
 8002922:	e0df      	b.n	8002ae4 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	06db      	lsls	r3, r3, #27
 8002928:	d51a      	bpl.n	8002960 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800292a:	6962      	ldr	r2, [r4, #20]
 800292c:	2304      	movs	r3, #4
 800292e:	4db4      	ldr	r5, [pc, #720]	@ (8002c00 <HAL_RCC_OscConfig+0x300>)
 8002930:	2a01      	cmp	r2, #1
 8002932:	d000      	beq.n	8002936 <HAL_RCC_OscConfig+0x36>
 8002934:	e148      	b.n	8002bc8 <HAL_RCC_OscConfig+0x2c8>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002936:	6b69      	ldr	r1, [r5, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002938:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800293a:	430b      	orrs	r3, r1
 800293c:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 800293e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002940:	431a      	orrs	r2, r3
 8002942:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8002944:	f7ff ffd4 	bl	80028f0 <HAL_GetTick>
 8002948:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800294a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800294c:	423b      	tst	r3, r7
 800294e:	d100      	bne.n	8002952 <HAL_RCC_OscConfig+0x52>
 8002950:	e133      	b.n	8002bba <HAL_RCC_OscConfig+0x2ba>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002952:	21f8      	movs	r1, #248	@ 0xf8
 8002954:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8002956:	69a3      	ldr	r3, [r4, #24]
 8002958:	438a      	bics	r2, r1
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4313      	orrs	r3, r2
 800295e:	636b      	str	r3, [r5, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002960:	6a21      	ldr	r1, [r4, #32]
 8002962:	2900      	cmp	r1, #0
 8002964:	d000      	beq.n	8002968 <HAL_RCC_OscConfig+0x68>
 8002966:	e157      	b.n	8002c18 <HAL_RCC_OscConfig+0x318>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002968:	2000      	movs	r0, #0
 800296a:	e02a      	b.n	80029c2 <HAL_RCC_OscConfig+0xc2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800296c:	220c      	movs	r2, #12
 800296e:	4da4      	ldr	r5, [pc, #656]	@ (8002c00 <HAL_RCC_OscConfig+0x300>)
 8002970:	686b      	ldr	r3, [r5, #4]
 8002972:	4013      	ands	r3, r2
 8002974:	2b04      	cmp	r3, #4
 8002976:	d006      	beq.n	8002986 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002978:	686b      	ldr	r3, [r5, #4]
 800297a:	4013      	ands	r3, r2
 800297c:	2b08      	cmp	r3, #8
 800297e:	d10a      	bne.n	8002996 <HAL_RCC_OscConfig+0x96>
 8002980:	686b      	ldr	r3, [r5, #4]
 8002982:	03db      	lsls	r3, r3, #15
 8002984:	d507      	bpl.n	8002996 <HAL_RCC_OscConfig+0x96>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002986:	682b      	ldr	r3, [r5, #0]
 8002988:	039b      	lsls	r3, r3, #14
 800298a:	d5bf      	bpl.n	800290c <HAL_RCC_OscConfig+0xc>
 800298c:	6863      	ldr	r3, [r4, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1bc      	bne.n	800290c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8002992:	2001      	movs	r0, #1
 8002994:	e015      	b.n	80029c2 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002996:	6863      	ldr	r3, [r4, #4]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d114      	bne.n	80029c6 <HAL_RCC_OscConfig+0xc6>
 800299c:	2380      	movs	r3, #128	@ 0x80
 800299e:	682a      	ldr	r2, [r5, #0]
 80029a0:	025b      	lsls	r3, r3, #9
 80029a2:	4313      	orrs	r3, r2
 80029a4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80029a6:	f7ff ffa3 	bl	80028f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 80029ac:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ae:	02bf      	lsls	r7, r7, #10
 80029b0:	682b      	ldr	r3, [r5, #0]
 80029b2:	423b      	tst	r3, r7
 80029b4:	d1aa      	bne.n	800290c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b6:	f7ff ff9b 	bl	80028f0 <HAL_GetTick>
 80029ba:	1b80      	subs	r0, r0, r6
 80029bc:	2864      	cmp	r0, #100	@ 0x64
 80029be:	d9f7      	bls.n	80029b0 <HAL_RCC_OscConfig+0xb0>
            return HAL_TIMEOUT;
 80029c0:	2003      	movs	r0, #3
}
 80029c2:	b005      	add	sp, #20
 80029c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d116      	bne.n	80029f8 <HAL_RCC_OscConfig+0xf8>
 80029ca:	682b      	ldr	r3, [r5, #0]
 80029cc:	4a8d      	ldr	r2, [pc, #564]	@ (8002c04 <HAL_RCC_OscConfig+0x304>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d0:	4013      	ands	r3, r2
 80029d2:	602b      	str	r3, [r5, #0]
 80029d4:	682b      	ldr	r3, [r5, #0]
 80029d6:	4a8c      	ldr	r2, [pc, #560]	@ (8002c08 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d8:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029da:	4013      	ands	r3, r2
 80029dc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80029de:	f7ff ff87 	bl	80028f0 <HAL_GetTick>
 80029e2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e4:	682b      	ldr	r3, [r5, #0]
 80029e6:	423b      	tst	r3, r7
 80029e8:	d100      	bne.n	80029ec <HAL_RCC_OscConfig+0xec>
 80029ea:	e78f      	b.n	800290c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ec:	f7ff ff80 	bl	80028f0 <HAL_GetTick>
 80029f0:	1b80      	subs	r0, r0, r6
 80029f2:	2864      	cmp	r0, #100	@ 0x64
 80029f4:	d9f6      	bls.n	80029e4 <HAL_RCC_OscConfig+0xe4>
 80029f6:	e7e3      	b.n	80029c0 <HAL_RCC_OscConfig+0xc0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f8:	2b05      	cmp	r3, #5
 80029fa:	d105      	bne.n	8002a08 <HAL_RCC_OscConfig+0x108>
 80029fc:	2380      	movs	r3, #128	@ 0x80
 80029fe:	682a      	ldr	r2, [r5, #0]
 8002a00:	02db      	lsls	r3, r3, #11
 8002a02:	4313      	orrs	r3, r2
 8002a04:	602b      	str	r3, [r5, #0]
 8002a06:	e7c9      	b.n	800299c <HAL_RCC_OscConfig+0x9c>
 8002a08:	682b      	ldr	r3, [r5, #0]
 8002a0a:	4a7e      	ldr	r2, [pc, #504]	@ (8002c04 <HAL_RCC_OscConfig+0x304>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	602b      	str	r3, [r5, #0]
 8002a10:	682b      	ldr	r3, [r5, #0]
 8002a12:	4a7d      	ldr	r2, [pc, #500]	@ (8002c08 <HAL_RCC_OscConfig+0x308>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	e7c5      	b.n	80029a4 <HAL_RCC_OscConfig+0xa4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a18:	220c      	movs	r2, #12
 8002a1a:	4d79      	ldr	r5, [pc, #484]	@ (8002c00 <HAL_RCC_OscConfig+0x300>)
 8002a1c:	686b      	ldr	r3, [r5, #4]
 8002a1e:	4213      	tst	r3, r2
 8002a20:	d006      	beq.n	8002a30 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a22:	686b      	ldr	r3, [r5, #4]
 8002a24:	4013      	ands	r3, r2
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d110      	bne.n	8002a4c <HAL_RCC_OscConfig+0x14c>
 8002a2a:	686b      	ldr	r3, [r5, #4]
 8002a2c:	03db      	lsls	r3, r3, #15
 8002a2e:	d40d      	bmi.n	8002a4c <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a30:	682b      	ldr	r3, [r5, #0]
 8002a32:	079b      	lsls	r3, r3, #30
 8002a34:	d502      	bpl.n	8002a3c <HAL_RCC_OscConfig+0x13c>
 8002a36:	68e3      	ldr	r3, [r4, #12]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d1aa      	bne.n	8002992 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3c:	21f8      	movs	r1, #248	@ 0xf8
 8002a3e:	682a      	ldr	r2, [r5, #0]
 8002a40:	6923      	ldr	r3, [r4, #16]
 8002a42:	438a      	bics	r2, r1
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4313      	orrs	r3, r2
 8002a48:	602b      	str	r3, [r5, #0]
 8002a4a:	e763      	b.n	8002914 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a4c:	68e2      	ldr	r2, [r4, #12]
 8002a4e:	2301      	movs	r3, #1
 8002a50:	2a00      	cmp	r2, #0
 8002a52:	d00f      	beq.n	8002a74 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8002a54:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a56:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a5c:	f7ff ff48 	bl	80028f0 <HAL_GetTick>
 8002a60:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a62:	682b      	ldr	r3, [r5, #0]
 8002a64:	423b      	tst	r3, r7
 8002a66:	d1e9      	bne.n	8002a3c <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a68:	f7ff ff42 	bl	80028f0 <HAL_GetTick>
 8002a6c:	1b80      	subs	r0, r0, r6
 8002a6e:	2802      	cmp	r0, #2
 8002a70:	d9f7      	bls.n	8002a62 <HAL_RCC_OscConfig+0x162>
 8002a72:	e7a5      	b.n	80029c0 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_DISABLE();
 8002a74:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8002a78:	439a      	bics	r2, r3
 8002a7a:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8002a7c:	f7ff ff38 	bl	80028f0 <HAL_GetTick>
 8002a80:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a82:	682b      	ldr	r3, [r5, #0]
 8002a84:	423b      	tst	r3, r7
 8002a86:	d100      	bne.n	8002a8a <HAL_RCC_OscConfig+0x18a>
 8002a88:	e744      	b.n	8002914 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a8a:	f7ff ff31 	bl	80028f0 <HAL_GetTick>
 8002a8e:	1b80      	subs	r0, r0, r6
 8002a90:	2802      	cmp	r0, #2
 8002a92:	d9f6      	bls.n	8002a82 <HAL_RCC_OscConfig+0x182>
 8002a94:	e794      	b.n	80029c0 <HAL_RCC_OscConfig+0xc0>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a96:	69e2      	ldr	r2, [r4, #28]
 8002a98:	2301      	movs	r3, #1
 8002a9a:	4d59      	ldr	r5, [pc, #356]	@ (8002c00 <HAL_RCC_OscConfig+0x300>)
 8002a9c:	2a00      	cmp	r2, #0
 8002a9e:	d010      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8002aa0:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa2:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8002aa8:	f7ff ff22 	bl	80028f0 <HAL_GetTick>
 8002aac:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aae:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8002ab0:	423b      	tst	r3, r7
 8002ab2:	d000      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x1b6>
 8002ab4:	e732      	b.n	800291c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab6:	f7ff ff1b 	bl	80028f0 <HAL_GetTick>
 8002aba:	1b80      	subs	r0, r0, r6
 8002abc:	2802      	cmp	r0, #2
 8002abe:	d9f6      	bls.n	8002aae <HAL_RCC_OscConfig+0x1ae>
 8002ac0:	e77e      	b.n	80029c0 <HAL_RCC_OscConfig+0xc0>
      __HAL_RCC_LSI_DISABLE();
 8002ac2:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac4:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8002ac6:	439a      	bics	r2, r3
 8002ac8:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8002aca:	f7ff ff11 	bl	80028f0 <HAL_GetTick>
 8002ace:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8002ad2:	423b      	tst	r3, r7
 8002ad4:	d100      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x1d8>
 8002ad6:	e721      	b.n	800291c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad8:	f7ff ff0a 	bl	80028f0 <HAL_GetTick>
 8002adc:	1b80      	subs	r0, r0, r6
 8002ade:	2802      	cmp	r0, #2
 8002ae0:	d9f6      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x1d0>
 8002ae2:	e76d      	b.n	80029c0 <HAL_RCC_OscConfig+0xc0>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae4:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002ae6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae8:	4d45      	ldr	r5, [pc, #276]	@ (8002c00 <HAL_RCC_OscConfig+0x300>)
 8002aea:	0552      	lsls	r2, r2, #21
 8002aec:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002aee:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af0:	4213      	tst	r3, r2
 8002af2:	d108      	bne.n	8002b06 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af4:	69eb      	ldr	r3, [r5, #28]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61eb      	str	r3, [r5, #28]
 8002afa:	69eb      	ldr	r3, [r5, #28]
 8002afc:	4013      	ands	r3, r2
 8002afe:	9303      	str	r3, [sp, #12]
 8002b00:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002b02:	2301      	movs	r3, #1
 8002b04:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b06:	2780      	movs	r7, #128	@ 0x80
 8002b08:	4e40      	ldr	r6, [pc, #256]	@ (8002c0c <HAL_RCC_OscConfig+0x30c>)
 8002b0a:	007f      	lsls	r7, r7, #1
 8002b0c:	6833      	ldr	r3, [r6, #0]
 8002b0e:	423b      	tst	r3, r7
 8002b10:	d015      	beq.n	8002b3e <HAL_RCC_OscConfig+0x23e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b12:	68a3      	ldr	r3, [r4, #8]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d122      	bne.n	8002b5e <HAL_RCC_OscConfig+0x25e>
 8002b18:	6a2a      	ldr	r2, [r5, #32]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002b1e:	f7ff fee7 	bl	80028f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b22:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8002b24:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b26:	6a2b      	ldr	r3, [r5, #32]
 8002b28:	423b      	tst	r3, r7
 8002b2a:	d03f      	beq.n	8002bac <HAL_RCC_OscConfig+0x2ac>
    if(pwrclkchanged == SET)
 8002b2c:	9b00      	ldr	r3, [sp, #0]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d000      	beq.n	8002b34 <HAL_RCC_OscConfig+0x234>
 8002b32:	e6f7      	b.n	8002924 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b34:	69eb      	ldr	r3, [r5, #28]
 8002b36:	4a36      	ldr	r2, [pc, #216]	@ (8002c10 <HAL_RCC_OscConfig+0x310>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61eb      	str	r3, [r5, #28]
 8002b3c:	e6f2      	b.n	8002924 <HAL_RCC_OscConfig+0x24>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b3e:	6833      	ldr	r3, [r6, #0]
 8002b40:	433b      	orrs	r3, r7
 8002b42:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002b44:	f7ff fed4 	bl	80028f0 <HAL_GetTick>
 8002b48:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4a:	6833      	ldr	r3, [r6, #0]
 8002b4c:	423b      	tst	r3, r7
 8002b4e:	d1e0      	bne.n	8002b12 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b50:	f7ff fece 	bl	80028f0 <HAL_GetTick>
 8002b54:	9b01      	ldr	r3, [sp, #4]
 8002b56:	1ac0      	subs	r0, r0, r3
 8002b58:	2864      	cmp	r0, #100	@ 0x64
 8002b5a:	d9f6      	bls.n	8002b4a <HAL_RCC_OscConfig+0x24a>
 8002b5c:	e730      	b.n	80029c0 <HAL_RCC_OscConfig+0xc0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b5e:	2201      	movs	r2, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d114      	bne.n	8002b8e <HAL_RCC_OscConfig+0x28e>
 8002b64:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b66:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b68:	4393      	bics	r3, r2
 8002b6a:	622b      	str	r3, [r5, #32]
 8002b6c:	6a2b      	ldr	r3, [r5, #32]
 8002b6e:	3203      	adds	r2, #3
 8002b70:	4393      	bics	r3, r2
 8002b72:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002b74:	f7ff febc 	bl	80028f0 <HAL_GetTick>
 8002b78:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7a:	6a2b      	ldr	r3, [r5, #32]
 8002b7c:	423b      	tst	r3, r7
 8002b7e:	d0d5      	beq.n	8002b2c <HAL_RCC_OscConfig+0x22c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b80:	f7ff feb6 	bl	80028f0 <HAL_GetTick>
 8002b84:	4b23      	ldr	r3, [pc, #140]	@ (8002c14 <HAL_RCC_OscConfig+0x314>)
 8002b86:	1b80      	subs	r0, r0, r6
 8002b88:	4298      	cmp	r0, r3
 8002b8a:	d9f6      	bls.n	8002b7a <HAL_RCC_OscConfig+0x27a>
 8002b8c:	e718      	b.n	80029c0 <HAL_RCC_OscConfig+0xc0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b8e:	2b05      	cmp	r3, #5
 8002b90:	d105      	bne.n	8002b9e <HAL_RCC_OscConfig+0x29e>
 8002b92:	6a29      	ldr	r1, [r5, #32]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	430b      	orrs	r3, r1
 8002b98:	622b      	str	r3, [r5, #32]
 8002b9a:	6a2b      	ldr	r3, [r5, #32]
 8002b9c:	e7bd      	b.n	8002b1a <HAL_RCC_OscConfig+0x21a>
 8002b9e:	6a2b      	ldr	r3, [r5, #32]
 8002ba0:	4393      	bics	r3, r2
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	622b      	str	r3, [r5, #32]
 8002ba6:	6a2b      	ldr	r3, [r5, #32]
 8002ba8:	4393      	bics	r3, r2
 8002baa:	e7b7      	b.n	8002b1c <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bac:	f7ff fea0 	bl	80028f0 <HAL_GetTick>
 8002bb0:	4b18      	ldr	r3, [pc, #96]	@ (8002c14 <HAL_RCC_OscConfig+0x314>)
 8002bb2:	1b80      	subs	r0, r0, r6
 8002bb4:	4298      	cmp	r0, r3
 8002bb6:	d9b6      	bls.n	8002b26 <HAL_RCC_OscConfig+0x226>
 8002bb8:	e702      	b.n	80029c0 <HAL_RCC_OscConfig+0xc0>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002bba:	f7ff fe99 	bl	80028f0 <HAL_GetTick>
 8002bbe:	1b80      	subs	r0, r0, r6
 8002bc0:	2802      	cmp	r0, #2
 8002bc2:	d800      	bhi.n	8002bc6 <HAL_RCC_OscConfig+0x2c6>
 8002bc4:	e6c1      	b.n	800294a <HAL_RCC_OscConfig+0x4a>
 8002bc6:	e6fb      	b.n	80029c0 <HAL_RCC_OscConfig+0xc0>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002bc8:	3205      	adds	r2, #5
 8002bca:	d103      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x2d4>
      __HAL_RCC_HSI14ADC_ENABLE();
 8002bcc:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8002bce:	439a      	bics	r2, r3
 8002bd0:	636a      	str	r2, [r5, #52]	@ 0x34
 8002bd2:	e6be      	b.n	8002952 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002bd4:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002bd6:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002bd8:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8002bda:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8002bdc:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002bde:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002be0:	4393      	bics	r3, r2
 8002be2:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8002be4:	f7ff fe84 	bl	80028f0 <HAL_GetTick>
 8002be8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002bea:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002bec:	423b      	tst	r3, r7
 8002bee:	d100      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x2f2>
 8002bf0:	e6b6      	b.n	8002960 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002bf2:	f7ff fe7d 	bl	80028f0 <HAL_GetTick>
 8002bf6:	1b80      	subs	r0, r0, r6
 8002bf8:	2802      	cmp	r0, #2
 8002bfa:	d9f6      	bls.n	8002bea <HAL_RCC_OscConfig+0x2ea>
 8002bfc:	e6e0      	b.n	80029c0 <HAL_RCC_OscConfig+0xc0>
 8002bfe:	46c0      	nop			@ (mov r8, r8)
 8002c00:	40021000 	.word	0x40021000
 8002c04:	fffeffff 	.word	0xfffeffff
 8002c08:	fffbffff 	.word	0xfffbffff
 8002c0c:	40007000 	.word	0x40007000
 8002c10:	efffffff 	.word	0xefffffff
 8002c14:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c18:	220c      	movs	r2, #12
 8002c1a:	4d25      	ldr	r5, [pc, #148]	@ (8002cb0 <HAL_RCC_OscConfig+0x3b0>)
 8002c1c:	686b      	ldr	r3, [r5, #4]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d100      	bne.n	8002c26 <HAL_RCC_OscConfig+0x326>
 8002c24:	e6b5      	b.n	8002992 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_PLL_DISABLE();
 8002c26:	682b      	ldr	r3, [r5, #0]
 8002c28:	4a22      	ldr	r2, [pc, #136]	@ (8002cb4 <HAL_RCC_OscConfig+0x3b4>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2e:	2902      	cmp	r1, #2
 8002c30:	d12f      	bne.n	8002c92 <HAL_RCC_OscConfig+0x392>
        tickstart = HAL_GetTick();
 8002c32:	f7ff fe5d 	bl	80028f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c36:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002c38:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c3a:	04bf      	lsls	r7, r7, #18
 8002c3c:	682b      	ldr	r3, [r5, #0]
 8002c3e:	423b      	tst	r3, r7
 8002c40:	d121      	bne.n	8002c86 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c42:	220f      	movs	r2, #15
 8002c44:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c46:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c48:	4393      	bics	r3, r2
 8002c4a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c4c:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8002c52:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002c54:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002c56:	686a      	ldr	r2, [r5, #4]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	4917      	ldr	r1, [pc, #92]	@ (8002cb8 <HAL_RCC_OscConfig+0x3b8>)
 8002c5c:	400a      	ands	r2, r1
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002c62:	2380      	movs	r3, #128	@ 0x80
 8002c64:	682a      	ldr	r2, [r5, #0]
 8002c66:	045b      	lsls	r3, r3, #17
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002c6c:	f7ff fe40 	bl	80028f0 <HAL_GetTick>
 8002c70:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c72:	682b      	ldr	r3, [r5, #0]
 8002c74:	4233      	tst	r3, r6
 8002c76:	d000      	beq.n	8002c7a <HAL_RCC_OscConfig+0x37a>
 8002c78:	e676      	b.n	8002968 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c7a:	f7ff fe39 	bl	80028f0 <HAL_GetTick>
 8002c7e:	1b00      	subs	r0, r0, r4
 8002c80:	2802      	cmp	r0, #2
 8002c82:	d9f6      	bls.n	8002c72 <HAL_RCC_OscConfig+0x372>
 8002c84:	e69c      	b.n	80029c0 <HAL_RCC_OscConfig+0xc0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c86:	f7ff fe33 	bl	80028f0 <HAL_GetTick>
 8002c8a:	1b80      	subs	r0, r0, r6
 8002c8c:	2802      	cmp	r0, #2
 8002c8e:	d9d5      	bls.n	8002c3c <HAL_RCC_OscConfig+0x33c>
 8002c90:	e696      	b.n	80029c0 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8002c92:	f7ff fe2d 	bl	80028f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c96:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002c98:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9a:	04b6      	lsls	r6, r6, #18
 8002c9c:	682b      	ldr	r3, [r5, #0]
 8002c9e:	4233      	tst	r3, r6
 8002ca0:	d100      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x3a4>
 8002ca2:	e661      	b.n	8002968 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7ff fe24 	bl	80028f0 <HAL_GetTick>
 8002ca8:	1b00      	subs	r0, r0, r4
 8002caa:	2802      	cmp	r0, #2
 8002cac:	d9f6      	bls.n	8002c9c <HAL_RCC_OscConfig+0x39c>
 8002cae:	e687      	b.n	80029c0 <HAL_RCC_OscConfig+0xc0>
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	feffffff 	.word	0xfeffffff
 8002cb8:	ffc2ffff 	.word	0xffc2ffff

08002cbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4d3e      	ldr	r5, [pc, #248]	@ (8002dbc <HAL_RCC_ClockConfig+0x100>)
{
 8002cc2:	0004      	movs	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002cc4:	682b      	ldr	r3, [r5, #0]
{
 8002cc6:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002cc8:	4013      	ands	r3, r2
 8002cca:	428b      	cmp	r3, r1
 8002ccc:	d312      	bcc.n	8002cf4 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cce:	6822      	ldr	r2, [r4, #0]
 8002cd0:	0793      	lsls	r3, r2, #30
 8002cd2:	d419      	bmi.n	8002d08 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cd4:	07d2      	lsls	r2, r2, #31
 8002cd6:	d41f      	bmi.n	8002d18 <HAL_RCC_ClockConfig+0x5c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002cd8:	2301      	movs	r3, #1
 8002cda:	682a      	ldr	r2, [r5, #0]
 8002cdc:	401a      	ands	r2, r3
 8002cde:	42ba      	cmp	r2, r7
 8002ce0:	d85d      	bhi.n	8002d9e <HAL_RCC_ClockConfig+0xe2>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	075b      	lsls	r3, r3, #29
 8002ce6:	d461      	bmi.n	8002dac <HAL_RCC_ClockConfig+0xf0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /* Update the SystemCoreClock global variable */
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
  SystemCoreClock = 7372800;
 8002ce8:	22e1      	movs	r2, #225	@ 0xe1
 8002cea:	4b35      	ldr	r3, [pc, #212]	@ (8002dc0 <HAL_RCC_ClockConfig+0x104>)
 8002cec:	03d2      	lsls	r2, r2, #15
  
  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8002cee:	2000      	movs	r0, #0
  SystemCoreClock = 7372800;
 8002cf0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf4:	682b      	ldr	r3, [r5, #0]
 8002cf6:	4393      	bics	r3, r2
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	602b      	str	r3, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cfc:	682b      	ldr	r3, [r5, #0]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	428b      	cmp	r3, r1
 8002d02:	d0e4      	beq.n	8002cce <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8002d04:	2001      	movs	r0, #1
}
 8002d06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d08:	20f0      	movs	r0, #240	@ 0xf0
 8002d0a:	492e      	ldr	r1, [pc, #184]	@ (8002dc4 <HAL_RCC_ClockConfig+0x108>)
 8002d0c:	684b      	ldr	r3, [r1, #4]
 8002d0e:	4383      	bics	r3, r0
 8002d10:	68a0      	ldr	r0, [r4, #8]
 8002d12:	4303      	orrs	r3, r0
 8002d14:	604b      	str	r3, [r1, #4]
 8002d16:	e7dd      	b.n	8002cd4 <HAL_RCC_ClockConfig+0x18>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d18:	4e2a      	ldr	r6, [pc, #168]	@ (8002dc4 <HAL_RCC_ClockConfig+0x108>)
 8002d1a:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1c:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1e:	2a01      	cmp	r2, #1
 8002d20:	d11a      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x9c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d22:	039b      	lsls	r3, r3, #14
 8002d24:	d5ee      	bpl.n	8002d04 <HAL_RCC_ClockConfig+0x48>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d26:	2103      	movs	r1, #3
 8002d28:	6873      	ldr	r3, [r6, #4]
 8002d2a:	438b      	bics	r3, r1
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002d30:	f7ff fdde 	bl	80028f0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d34:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002d36:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d115      	bne.n	8002d68 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d3c:	220c      	movs	r2, #12
 8002d3e:	6873      	ldr	r3, [r6, #4]
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d0c8      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d46:	f7ff fdd3 	bl	80028f0 <HAL_GetTick>
 8002d4a:	9b01      	ldr	r3, [sp, #4]
 8002d4c:	1ac0      	subs	r0, r0, r3
 8002d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc8 <HAL_RCC_ClockConfig+0x10c>)
 8002d50:	4298      	cmp	r0, r3
 8002d52:	d9f3      	bls.n	8002d3c <HAL_RCC_ClockConfig+0x80>
          return HAL_TIMEOUT;
 8002d54:	2003      	movs	r0, #3
 8002d56:	e7d6      	b.n	8002d06 <HAL_RCC_ClockConfig+0x4a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d58:	2a02      	cmp	r2, #2
 8002d5a:	d102      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5c:	019b      	lsls	r3, r3, #6
 8002d5e:	d4e2      	bmi.n	8002d26 <HAL_RCC_ClockConfig+0x6a>
 8002d60:	e7d0      	b.n	8002d04 <HAL_RCC_ClockConfig+0x48>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d62:	079b      	lsls	r3, r3, #30
 8002d64:	d4df      	bmi.n	8002d26 <HAL_RCC_ClockConfig+0x6a>
 8002d66:	e7cd      	b.n	8002d04 <HAL_RCC_ClockConfig+0x48>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d012      	beq.n	8002d92 <HAL_RCC_ClockConfig+0xd6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d6c:	220c      	movs	r2, #12
 8002d6e:	6873      	ldr	r3, [r6, #4]
 8002d70:	4213      	tst	r3, r2
 8002d72:	d0b1      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d74:	f7ff fdbc 	bl	80028f0 <HAL_GetTick>
 8002d78:	9b01      	ldr	r3, [sp, #4]
 8002d7a:	1ac0      	subs	r0, r0, r3
 8002d7c:	4b12      	ldr	r3, [pc, #72]	@ (8002dc8 <HAL_RCC_ClockConfig+0x10c>)
 8002d7e:	4298      	cmp	r0, r3
 8002d80:	d9f4      	bls.n	8002d6c <HAL_RCC_ClockConfig+0xb0>
 8002d82:	e7e7      	b.n	8002d54 <HAL_RCC_ClockConfig+0x98>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d84:	f7ff fdb4 	bl	80028f0 <HAL_GetTick>
 8002d88:	9b01      	ldr	r3, [sp, #4]
 8002d8a:	1ac0      	subs	r0, r0, r3
 8002d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc8 <HAL_RCC_ClockConfig+0x10c>)
 8002d8e:	4298      	cmp	r0, r3
 8002d90:	d8e0      	bhi.n	8002d54 <HAL_RCC_ClockConfig+0x98>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d92:	220c      	movs	r2, #12
 8002d94:	6873      	ldr	r3, [r6, #4]
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d1f3      	bne.n	8002d84 <HAL_RCC_ClockConfig+0xc8>
 8002d9c:	e79c      	b.n	8002cd8 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	682a      	ldr	r2, [r5, #0]
 8002da0:	439a      	bics	r2, r3
 8002da2:	602a      	str	r2, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002da4:	682a      	ldr	r2, [r5, #0]
 8002da6:	421a      	tst	r2, r3
 8002da8:	d09b      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x26>
 8002daa:	e7ab      	b.n	8002d04 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002dac:	4a05      	ldr	r2, [pc, #20]	@ (8002dc4 <HAL_RCC_ClockConfig+0x108>)
 8002dae:	4907      	ldr	r1, [pc, #28]	@ (8002dcc <HAL_RCC_ClockConfig+0x110>)
 8002db0:	6853      	ldr	r3, [r2, #4]
 8002db2:	400b      	ands	r3, r1
 8002db4:	68e1      	ldr	r1, [r4, #12]
 8002db6:	430b      	orrs	r3, r1
 8002db8:	6053      	str	r3, [r2, #4]
 8002dba:	e795      	b.n	8002ce8 <HAL_RCC_ClockConfig+0x2c>
 8002dbc:	40022000 	.word	0x40022000
 8002dc0:	20000000 	.word	0x20000000
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	00001388 	.word	0x00001388
 8002dcc:	fffff8ff 	.word	0xfffff8ff

08002dd0 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00U;
 8002dd0:	2300      	movs	r3, #0
{ 
 8002dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd4:	b087      	sub	sp, #28
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002dd6:	680a      	ldr	r2, [r1, #0]
 8002dd8:	0014      	movs	r4, r2
 8002dda:	40dc      	lsrs	r4, r3
 8002ddc:	d101      	bne.n	8002de2 <HAL_GPIO_Init+0x12>
      }
    }
    
    position++;
  } 
}
 8002dde:	b007      	add	sp, #28
 8002de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002de2:	2601      	movs	r6, #1
 8002de4:	0014      	movs	r4, r2
 8002de6:	409e      	lsls	r6, r3
 8002de8:	4034      	ands	r4, r6
 8002dea:	9402      	str	r4, [sp, #8]
    if(iocurrent)
 8002dec:	4232      	tst	r2, r6
 8002dee:	d100      	bne.n	8002df2 <HAL_GPIO_Init+0x22>
 8002df0:	e092      	b.n	8002f18 <HAL_GPIO_Init+0x148>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002df2:	684a      	ldr	r2, [r1, #4]
 8002df4:	0015      	movs	r5, r2
 8002df6:	9201      	str	r2, [sp, #4]
 8002df8:	2210      	movs	r2, #16
 8002dfa:	4395      	bics	r5, r2
 8002dfc:	9503      	str	r5, [sp, #12]
 8002dfe:	2d02      	cmp	r5, #2
 8002e00:	d10f      	bne.n	8002e22 <HAL_GPIO_Init+0x52>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002e02:	2407      	movs	r4, #7
 8002e04:	250f      	movs	r5, #15
 8002e06:	401c      	ands	r4, r3
 8002e08:	00a4      	lsls	r4, r4, #2
 8002e0a:	40a5      	lsls	r5, r4
        temp = GPIOx->AFR[position >> 3];
 8002e0c:	08da      	lsrs	r2, r3, #3
 8002e0e:	0092      	lsls	r2, r2, #2
 8002e10:	1882      	adds	r2, r0, r2
 8002e12:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002e14:	43af      	bics	r7, r5
 8002e16:	46bc      	mov	ip, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8002e18:	690f      	ldr	r7, [r1, #16]
 8002e1a:	40a7      	lsls	r7, r4
 8002e1c:	4664      	mov	r4, ip
 8002e1e:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3U] = temp;
 8002e20:	6217      	str	r7, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002e22:	2203      	movs	r2, #3
 8002e24:	005c      	lsls	r4, r3, #1
 8002e26:	40a2      	lsls	r2, r4
 8002e28:	43d5      	mvns	r5, r2
 8002e2a:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e2c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8002e2e:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002e30:	4397      	bics	r7, r2
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e32:	9a01      	ldr	r2, [sp, #4]
 8002e34:	402a      	ands	r2, r5
 8002e36:	40a2      	lsls	r2, r4
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e38:	9d03      	ldr	r5, [sp, #12]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e3a:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e3c:	3d01      	subs	r5, #1
      GPIOx->MODER = temp;
 8002e3e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e40:	2d01      	cmp	r5, #1
 8002e42:	d80d      	bhi.n	8002e60 <HAL_GPIO_Init+0x90>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e44:	4662      	mov	r2, ip
        temp = GPIOx->OSPEEDR; 
 8002e46:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e48:	4015      	ands	r5, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002e4a:	68ca      	ldr	r2, [r1, #12]
 8002e4c:	40a2      	lsls	r2, r4
 8002e4e:	432a      	orrs	r2, r5
        GPIOx->OSPEEDR = temp;
 8002e50:	6082      	str	r2, [r0, #8]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e52:	9a01      	ldr	r2, [sp, #4]
        temp = GPIOx->OTYPER;
 8002e54:	6845      	ldr	r5, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e56:	0912      	lsrs	r2, r2, #4
 8002e58:	409a      	lsls	r2, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002e5a:	43b5      	bics	r5, r6
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e5c:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8002e5e:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e60:	4662      	mov	r2, ip
      temp = GPIOx->PUPDR;
 8002e62:	68c5      	ldr	r5, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e64:	4015      	ands	r5, r2
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002e66:	688a      	ldr	r2, [r1, #8]
 8002e68:	40a2      	lsls	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002e6a:	2480      	movs	r4, #128	@ 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002e6c:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8002e6e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002e70:	9a01      	ldr	r2, [sp, #4]
 8002e72:	0564      	lsls	r4, r4, #21
 8002e74:	4222      	tst	r2, r4
 8002e76:	d04f      	beq.n	8002f18 <HAL_GPIO_Init+0x148>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e78:	2501      	movs	r5, #1
 8002e7a:	4a28      	ldr	r2, [pc, #160]	@ (8002f1c <HAL_GPIO_Init+0x14c>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e7c:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7e:	6994      	ldr	r4, [r2, #24]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e80:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e82:	432c      	orrs	r4, r5
 8002e84:	6194      	str	r4, [r2, #24]
 8002e86:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8002e88:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8a:	402a      	ands	r2, r5
 8002e8c:	9205      	str	r2, [sp, #20]
 8002e8e:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2];
 8002e90:	4a23      	ldr	r2, [pc, #140]	@ (8002f20 <HAL_GPIO_Init+0x150>)
 8002e92:	00a4      	lsls	r4, r4, #2
 8002e94:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002e96:	220f      	movs	r2, #15
 8002e98:	3502      	adds	r5, #2
 8002e9a:	401d      	ands	r5, r3
 8002e9c:	00ad      	lsls	r5, r5, #2
 8002e9e:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2];
 8002ea0:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002ea2:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	42b8      	cmp	r0, r7
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_GPIO_Init+0xf4>
 8002eaa:	4f1e      	ldr	r7, [pc, #120]	@ (8002f24 <HAL_GPIO_Init+0x154>)
 8002eac:	3201      	adds	r2, #1
 8002eae:	42b8      	cmp	r0, r7
 8002eb0:	d008      	beq.n	8002ec4 <HAL_GPIO_Init+0xf4>
 8002eb2:	4f1d      	ldr	r7, [pc, #116]	@ (8002f28 <HAL_GPIO_Init+0x158>)
 8002eb4:	3201      	adds	r2, #1
 8002eb6:	42b8      	cmp	r0, r7
 8002eb8:	d004      	beq.n	8002ec4 <HAL_GPIO_Init+0xf4>
 8002eba:	4f1c      	ldr	r7, [pc, #112]	@ (8002f2c <HAL_GPIO_Init+0x15c>)
 8002ebc:	3203      	adds	r2, #3
 8002ebe:	42b8      	cmp	r0, r7
 8002ec0:	d100      	bne.n	8002ec4 <HAL_GPIO_Init+0xf4>
 8002ec2:	3a02      	subs	r2, #2
 8002ec4:	40aa      	lsls	r2, r5
 8002ec6:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ec8:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8002eca:	4a19      	ldr	r2, [pc, #100]	@ (8002f30 <HAL_GPIO_Init+0x160>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ecc:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8002ece:	6816      	ldr	r6, [r2, #0]
          SET_BIT(temp, iocurrent); 
 8002ed0:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ed2:	9f01      	ldr	r7, [sp, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ed4:	43e4      	mvns	r4, r4
          SET_BIT(temp, iocurrent); 
 8002ed6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ed8:	03ff      	lsls	r7, r7, #15
 8002eda:	d401      	bmi.n	8002ee0 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002edc:	0035      	movs	r5, r6
 8002ede:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8002ee0:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8002ee2:	6856      	ldr	r6, [r2, #4]
          SET_BIT(temp, iocurrent); 
 8002ee4:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ee6:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8002ee8:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eea:	03bf      	lsls	r7, r7, #14
 8002eec:	d401      	bmi.n	8002ef2 <HAL_GPIO_Init+0x122>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002eee:	0035      	movs	r5, r6
 8002ef0:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8002ef2:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8002ef4:	6896      	ldr	r6, [r2, #8]
          SET_BIT(temp, iocurrent); 
 8002ef6:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ef8:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8002efa:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002efc:	02ff      	lsls	r7, r7, #11
 8002efe:	d401      	bmi.n	8002f04 <HAL_GPIO_Init+0x134>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002f00:	0035      	movs	r5, r6
 8002f02:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8002f04:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002f06:	68d5      	ldr	r5, [r2, #12]
          SET_BIT(temp, iocurrent); 
 8002f08:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f0a:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8002f0c:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f0e:	02bf      	lsls	r7, r7, #10
 8002f10:	d401      	bmi.n	8002f16 <HAL_GPIO_Init+0x146>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002f12:	4025      	ands	r5, r4
 8002f14:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8002f16:	60d6      	str	r6, [r2, #12]
    position++;
 8002f18:	3301      	adds	r3, #1
 8002f1a:	e75c      	b.n	8002dd6 <HAL_GPIO_Init+0x6>
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40010000 	.word	0x40010000
 8002f24:	48000400 	.word	0x48000400
 8002f28:	48000800 	.word	0x48000800
 8002f2c:	48000c00 	.word	0x48000c00
 8002f30:	40010400 	.word	0x40010400

08002f34 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f34:	2a00      	cmp	r2, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f38:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}										  
 8002f3a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f3c:	6281      	str	r1, [r0, #40]	@ 0x28
}										  
 8002f3e:	e7fc      	b.n	8002f3a <HAL_GPIO_WritePin+0x6>

08002f40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f42:	0004      	movs	r4, r0
 8002f44:	000e      	movs	r6, r1
 8002f46:	0017      	movs	r7, r2
 8002f48:	9301      	str	r3, [sp, #4]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f4a:	6825      	ldr	r5, [r4, #0]
 8002f4c:	69eb      	ldr	r3, [r5, #28]
 8002f4e:	4033      	ands	r3, r6
 8002f50:	1b9b      	subs	r3, r3, r6
 8002f52:	425a      	negs	r2, r3
 8002f54:	4153      	adcs	r3, r2
 8002f56:	42bb      	cmp	r3, r7
 8002f58:	d001      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	e017      	b.n	8002f8e <UART_WaitOnFlagUntilTimeout+0x4e>
    if(Timeout != HAL_MAX_DELAY)
 8002f5e:	9b08      	ldr	r3, [sp, #32]
 8002f60:	3301      	adds	r3, #1
 8002f62:	d0f3      	beq.n	8002f4c <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002f64:	9b08      	ldr	r3, [sp, #32]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d112      	bne.n	8002f90 <UART_WaitOnFlagUntilTimeout+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f6a:	682b      	ldr	r3, [r5, #0]
 8002f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8002fa0 <UART_WaitOnFlagUntilTimeout+0x60>)
        return HAL_TIMEOUT;
 8002f6e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f70:	4013      	ands	r3, r2
 8002f72:	602b      	str	r3, [r5, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f74:	68ab      	ldr	r3, [r5, #8]
 8002f76:	32a3      	adds	r2, #163	@ 0xa3
 8002f78:	32ff      	adds	r2, #255	@ 0xff
 8002f7a:	4393      	bics	r3, r2
        huart->gState  = HAL_UART_STATE_READY;
 8002f7c:	0022      	movs	r2, r4
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7e:	60ab      	str	r3, [r5, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002f80:	2320      	movs	r3, #32
 8002f82:	3269      	adds	r2, #105	@ 0x69
 8002f84:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8002f86:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8002f88:	2300      	movs	r3, #0
 8002f8a:	3468      	adds	r4, #104	@ 0x68
 8002f8c:	7023      	strb	r3, [r4, #0]
}
 8002f8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002f90:	f7ff fcae 	bl	80028f0 <HAL_GetTick>
 8002f94:	9b01      	ldr	r3, [sp, #4]
 8002f96:	1ac0      	subs	r0, r0, r3
 8002f98:	9b08      	ldr	r3, [sp, #32]
 8002f9a:	4298      	cmp	r0, r3
 8002f9c:	d9d5      	bls.n	8002f4a <UART_WaitOnFlagUntilTimeout+0xa>
 8002f9e:	e7e4      	b.n	8002f6a <UART_WaitOnFlagUntilTimeout+0x2a>
 8002fa0:	fffffe5f 	.word	0xfffffe5f

08002fa4 <UART_SetConfig>:

  return HAL_OK;
}

HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	b570      	push	{r4, r5, r6, lr}
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	691d      	ldr	r5, [r3, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002fac:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fae:	432a      	orrs	r2, r5
 8002fb0:	695d      	ldr	r5, [r3, #20]
 8002fb2:	69c1      	ldr	r1, [r0, #28]
 8002fb4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002fb6:	6820      	ldr	r0, [r4, #0]
 8002fb8:	4d33      	ldr	r5, [pc, #204]	@ (8003088 <UART_SetConfig+0xe4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fba:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002fbc:	4028      	ands	r0, r5
 8002fbe:	4302      	orrs	r2, r0
 8002fc0:	6022      	str	r2, [r4, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc2:	6862      	ldr	r2, [r4, #4]
 8002fc4:	4831      	ldr	r0, [pc, #196]	@ (800308c <UART_SetConfig+0xe8>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002fc6:	6a1d      	ldr	r5, [r3, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc8:	4002      	ands	r2, r0
 8002fca:	68d8      	ldr	r0, [r3, #12]
 8002fcc:	4302      	orrs	r2, r0
 8002fce:	6062      	str	r2, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002fd0:	699a      	ldr	r2, [r3, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002fd2:	68a0      	ldr	r0, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002fd4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002fd6:	4d2e      	ldr	r5, [pc, #184]	@ (8003090 <UART_SetConfig+0xec>)
 8002fd8:	4028      	ands	r0, r5
 8002fda:	4302      	orrs	r2, r0

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fdc:	2003      	movs	r0, #3
 8002fde:	2580      	movs	r5, #128	@ 0x80
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002fe0:	60a2      	str	r2, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fe2:	4a2c      	ldr	r2, [pc, #176]	@ (8003094 <UART_SetConfig+0xf0>)
 8002fe4:	022d      	lsls	r5, r5, #8
 8002fe6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002fe8:	4002      	ands	r2, r0
 8002fea:	3a01      	subs	r2, #1
 8002fec:	2a02      	cmp	r2, #2
 8002fee:	d837      	bhi.n	8003060 <UART_SetConfig+0xbc>
 8002ff0:	4829      	ldr	r0, [pc, #164]	@ (8003098 <UART_SetConfig+0xf4>)
 8002ff2:	5c80      	ldrb	r0, [r0, r2]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ff4:	42a9      	cmp	r1, r5
 8002ff6:	d114      	bne.n	8003022 <UART_SetConfig+0x7e>
  {
    switch (clocksource)
 8002ff8:	2808      	cmp	r0, #8
 8002ffa:	d80f      	bhi.n	800301c <UART_SetConfig+0x78>
 8002ffc:	f7fd f910 	bl	8000220 <__gnu_thumb1_case_uqi>
 8003000:	0e050e32 	.word	0x0e050e32
 8003004:	0e0e0e32 	.word	0x0e0e0e32
 8003008:	09          	.byte	0x09
 8003009:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800300a:	6859      	ldr	r1, [r3, #4]
 800300c:	4b23      	ldr	r3, [pc, #140]	@ (800309c <UART_SetConfig+0xf8>)
 800300e:	0848      	lsrs	r0, r1, #1
 8003010:	e02c      	b.n	800306c <UART_SetConfig+0xc8>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003012:	6859      	ldr	r1, [r3, #4]
 8003014:	2380      	movs	r3, #128	@ 0x80
 8003016:	0848      	lsrs	r0, r1, #1
 8003018:	025b      	lsls	r3, r3, #9
 800301a:	e027      	b.n	800306c <UART_SetConfig+0xc8>
    switch (clocksource)
 800301c:	2001      	movs	r0, #1
 800301e:	2300      	movs	r3, #0
 8003020:	e029      	b.n	8003076 <UART_SetConfig+0xd2>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8003022:	2808      	cmp	r0, #8
 8003024:	d81a      	bhi.n	800305c <UART_SetConfig+0xb8>
 8003026:	f7fd f8fb 	bl	8000220 <__gnu_thumb1_case_uqi>
 800302a:	190f      	.short	0x190f
 800302c:	190f1905 	.word	0x190f1905
 8003030:	1919      	.short	0x1919
 8003032:	14          	.byte	0x14
 8003033:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003034:	6859      	ldr	r1, [r3, #4]
 8003036:	4b1a      	ldr	r3, [pc, #104]	@ (80030a0 <UART_SetConfig+0xfc>)
 8003038:	0848      	lsrs	r0, r1, #1
 800303a:	18c0      	adds	r0, r0, r3
 800303c:	f7fd f8fa 	bl	8000234 <__udivsi3>
 8003040:	b280      	uxth	r0, r0
 8003042:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003044:	2000      	movs	r0, #0
 8003046:	e01d      	b.n	8003084 <UART_SetConfig+0xe0>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003048:	6859      	ldr	r1, [r3, #4]
 800304a:	23e1      	movs	r3, #225	@ 0xe1
 800304c:	0848      	lsrs	r0, r1, #1
 800304e:	03db      	lsls	r3, r3, #15
 8003050:	e7f3      	b.n	800303a <UART_SetConfig+0x96>
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	2380      	movs	r3, #128	@ 0x80
 8003056:	0848      	lsrs	r0, r1, #1
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	e7ee      	b.n	800303a <UART_SetConfig+0x96>
    switch (clocksource)
 800305c:	2001      	movs	r0, #1
        ret = HAL_ERROR;
        break;
    }
  }

  return ret;
 800305e:	e011      	b.n	8003084 <UART_SetConfig+0xe0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003060:	42a9      	cmp	r1, r5
 8003062:	d1f1      	bne.n	8003048 <UART_SetConfig+0xa4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003064:	6859      	ldr	r1, [r3, #4]
 8003066:	23e1      	movs	r3, #225	@ 0xe1
 8003068:	0848      	lsrs	r0, r1, #1
 800306a:	041b      	lsls	r3, r3, #16
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800306c:	18c0      	adds	r0, r0, r3
 800306e:	f7fd f8e1 	bl	8000234 <__udivsi3>
 8003072:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8003074:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8003076:	0019      	movs	r1, r3
 8003078:	220f      	movs	r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800307a:	071b      	lsls	r3, r3, #28
    brrtemp = usartdiv & 0xFFF0U;
 800307c:	4391      	bics	r1, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800307e:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8003080:	430b      	orrs	r3, r1
 8003082:	60e3      	str	r3, [r4, #12]

}
 8003084:	bd70      	pop	{r4, r5, r6, pc}
 8003086:	46c0      	nop			@ (mov r8, r8)
 8003088:	ffff69f3 	.word	0xffff69f3
 800308c:	ffffcfff 	.word	0xffffcfff
 8003090:	fffff4ff 	.word	0xfffff4ff
 8003094:	40021000 	.word	0x40021000
 8003098:	08003524 	.word	0x08003524
 800309c:	01e84800 	.word	0x01e84800
 80030a0:	00f42400 	.word	0x00f42400

080030a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a6:	1e04      	subs	r4, r0, #0
  /* Check the UART handle allocation */
  if(huart == NULL)
 80030a8:	d101      	bne.n	80030ae <HAL_UART_Init+0xa>
  {
    return HAL_ERROR;
 80030aa:	2001      	movs	r0, #1
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 80030ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 80030ae:	0006      	movs	r6, r0
 80030b0:	3669      	adds	r6, #105	@ 0x69
 80030b2:	7833      	ldrb	r3, [r6, #0]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d102      	bne.n	80030c0 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 80030ba:	0003      	movs	r3, r0
 80030bc:	3368      	adds	r3, #104	@ 0x68
 80030be:	701a      	strb	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80030c0:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80030c2:	2701      	movs	r7, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80030c4:	7033      	strb	r3, [r6, #0]
  __HAL_UART_DISABLE(huart);
 80030c6:	6825      	ldr	r5, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030c8:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80030ca:	682b      	ldr	r3, [r5, #0]
 80030cc:	43bb      	bics	r3, r7
 80030ce:	602b      	str	r3, [r5, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030d0:	f7ff ff68 	bl	8002fa4 <UART_SetConfig>
 80030d4:	42b8      	cmp	r0, r7
 80030d6:	d0e8      	beq.n	80030aa <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80030d8:	686b      	ldr	r3, [r5, #4]
 80030da:	4a0a      	ldr	r2, [pc, #40]	@ (8003104 <HAL_UART_Init+0x60>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030dc:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80030de:	4013      	ands	r3, r2
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80030e0:	2208      	movs	r2, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80030e2:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80030e4:	68ab      	ldr	r3, [r5, #8]
 80030e6:	4393      	bics	r3, r2
 80030e8:	60ab      	str	r3, [r5, #8]
  __HAL_UART_ENABLE(huart);
 80030ea:	682b      	ldr	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80030ec:	0022      	movs	r2, r4
  __HAL_UART_ENABLE(huart);
 80030ee:	431f      	orrs	r7, r3
  huart->gState  = HAL_UART_STATE_READY;
 80030f0:	2320      	movs	r3, #32
  __HAL_UART_ENABLE(huart);
 80030f2:	602f      	str	r7, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80030f4:	326a      	adds	r2, #106	@ 0x6a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f6:	66e0      	str	r0, [r4, #108]	@ 0x6c
  __HAL_UNLOCK(huart);
 80030f8:	3468      	adds	r4, #104	@ 0x68
  huart->gState  = HAL_UART_STATE_READY;
 80030fa:	7033      	strb	r3, [r6, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80030fc:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 80030fe:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8003100:	e7d4      	b.n	80030ac <HAL_UART_Init+0x8>
 8003102:	46c0      	nop			@ (mov r8, r8)
 8003104:	fffff7ff 	.word	0xfffff7ff

08003108 <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310a:	b085      	sub	sp, #20
 800310c:	9303      	str	r3, [sp, #12]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800310e:	0003      	movs	r3, r0
 8003110:	336a      	adds	r3, #106	@ 0x6a
{
 8003112:	0016      	movs	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8003114:	781a      	ldrb	r2, [r3, #0]
{
 8003116:	0004      	movs	r4, r0
 8003118:	000d      	movs	r5, r1
        return  HAL_ERROR;
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800311a:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 800311c:	2a20      	cmp	r2, #32
 800311e:	d13b      	bne.n	8003198 <HAL_UART_Receive+0x90>
      return  HAL_ERROR;
 8003120:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8003122:	2900      	cmp	r1, #0
 8003124:	d038      	beq.n	8003198 <HAL_UART_Receive+0x90>
 8003126:	2e00      	cmp	r6, #0
 8003128:	d036      	beq.n	8003198 <HAL_UART_Receive+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800312a:	2280      	movs	r2, #128	@ 0x80
 800312c:	68a1      	ldr	r1, [r4, #8]
 800312e:	0152      	lsls	r2, r2, #5
 8003130:	4291      	cmp	r1, r2
 8003132:	d104      	bne.n	800313e <HAL_UART_Receive+0x36>
 8003134:	6922      	ldr	r2, [r4, #16]
 8003136:	2a00      	cmp	r2, #0
 8003138:	d101      	bne.n	800313e <HAL_UART_Receive+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 800313a:	4205      	tst	r5, r0
 800313c:	d12c      	bne.n	8003198 <HAL_UART_Receive+0x90>
    __HAL_LOCK(huart);
 800313e:	0022      	movs	r2, r4
 8003140:	3268      	adds	r2, #104	@ 0x68
 8003142:	7811      	ldrb	r1, [r2, #0]
 8003144:	2002      	movs	r0, #2
 8003146:	2901      	cmp	r1, #1
 8003148:	d026      	beq.n	8003198 <HAL_UART_Receive+0x90>
 800314a:	2101      	movs	r1, #1
 800314c:	7011      	strb	r1, [r2, #0]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314e:	2200      	movs	r2, #0
 8003150:	66e2      	str	r2, [r4, #108]	@ 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003152:	3222      	adds	r2, #34	@ 0x22
 8003154:	701a      	strb	r2, [r3, #0]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003156:	f7ff fbcb 	bl	80028f0 <HAL_GetTick>

    huart->RxXferSize = Size;
 800315a:	0023      	movs	r3, r4
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800315c:	2180      	movs	r1, #128	@ 0x80
 800315e:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize = Size;
 8003160:	3358      	adds	r3, #88	@ 0x58
 8003162:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 8003164:	805e      	strh	r6, [r3, #2]
    tickstart = HAL_GetTick();
 8003166:	9002      	str	r0, [sp, #8]
    UART_MASK_COMPUTATION(huart);
 8003168:	0149      	lsls	r1, r1, #5
 800316a:	3304      	adds	r3, #4
 800316c:	428a      	cmp	r2, r1
 800316e:	d117      	bne.n	80031a0 <HAL_UART_Receive+0x98>
 8003170:	6922      	ldr	r2, [r4, #16]
 8003172:	2a00      	cmp	r2, #0
 8003174:	d112      	bne.n	800319c <HAL_UART_Receive+0x94>
 8003176:	4a1e      	ldr	r2, [pc, #120]	@ (80031f0 <HAL_UART_Receive+0xe8>)
 8003178:	801a      	strh	r2, [r3, #0]
      huart->RxXferCount--;
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800317a:	2780      	movs	r7, #128	@ 0x80
    uhMask = huart->Mask;
 800317c:	881e      	ldrh	r6, [r3, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800317e:	017f      	lsls	r7, r7, #5
    while(huart->RxXferCount > 0U)
 8003180:	0022      	movs	r2, r4
 8003182:	325a      	adds	r2, #90	@ 0x5a
 8003184:	8813      	ldrh	r3, [r2, #0]
 8003186:	b298      	uxth	r0, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d110      	bne.n	80031ae <HAL_UART_Receive+0xa6>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800318c:	0023      	movs	r3, r4
 800318e:	2220      	movs	r2, #32
 8003190:	336a      	adds	r3, #106	@ 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003192:	3468      	adds	r4, #104	@ 0x68
    huart->RxState = HAL_UART_STATE_READY;
 8003194:	701a      	strb	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8003196:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003198:	b005      	add	sp, #20
 800319a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 800319c:	22ff      	movs	r2, #255	@ 0xff
 800319e:	e7eb      	b.n	8003178 <HAL_UART_Receive+0x70>
 80031a0:	2a00      	cmp	r2, #0
 80031a2:	d1ea      	bne.n	800317a <HAL_UART_Receive+0x72>
 80031a4:	6922      	ldr	r2, [r4, #16]
 80031a6:	2a00      	cmp	r2, #0
 80031a8:	d0f8      	beq.n	800319c <HAL_UART_Receive+0x94>
 80031aa:	227f      	movs	r2, #127	@ 0x7f
 80031ac:	e7e4      	b.n	8003178 <HAL_UART_Receive+0x70>
      huart->RxXferCount--;
 80031ae:	8813      	ldrh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031b0:	2120      	movs	r1, #32
      huart->RxXferCount--;
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	8013      	strh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031b8:	9b03      	ldr	r3, [sp, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	0020      	movs	r0, r4
 80031c0:	9b02      	ldr	r3, [sp, #8]
 80031c2:	f7ff febd 	bl	8002f40 <UART_WaitOnFlagUntilTimeout>
 80031c6:	2800      	cmp	r0, #0
 80031c8:	d110      	bne.n	80031ec <HAL_UART_Receive+0xe4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ca:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80031cc:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ce:	42ba      	cmp	r2, r7
 80031d0:	d107      	bne.n	80031e2 <HAL_UART_Receive+0xda>
 80031d2:	6922      	ldr	r2, [r4, #16]
 80031d4:	2a00      	cmp	r2, #0
 80031d6:	d104      	bne.n	80031e2 <HAL_UART_Receive+0xda>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80031d8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80031da:	4033      	ands	r3, r6
 80031dc:	802b      	strh	r3, [r5, #0]
        pData +=2U;
 80031de:	3502      	adds	r5, #2
 80031e0:	e7ce      	b.n	8003180 <HAL_UART_Receive+0x78>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80031e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80031e4:	4033      	ands	r3, r6
 80031e6:	702b      	strb	r3, [r5, #0]
 80031e8:	3501      	adds	r5, #1
 80031ea:	e7c9      	b.n	8003180 <HAL_UART_Receive+0x78>
        return HAL_TIMEOUT;
 80031ec:	2003      	movs	r0, #3
 80031ee:	e7d3      	b.n	8003198 <HAL_UART_Receive+0x90>
 80031f0:	000001ff 	.word	0x000001ff

080031f4 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80031f6:	0007      	movs	r7, r0
{
 80031f8:	b085      	sub	sp, #20
 80031fa:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 80031fc:	3769      	adds	r7, #105	@ 0x69
 80031fe:	783b      	ldrb	r3, [r7, #0]
{
 8003200:	0004      	movs	r4, r0
 8003202:	000d      	movs	r5, r1
 8003204:	0016      	movs	r6, r2
        return  HAL_ERROR;
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003206:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8003208:	2b20      	cmp	r3, #32
 800320a:	d146      	bne.n	800329a <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 800320c:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800320e:	2900      	cmp	r1, #0
 8003210:	d043      	beq.n	800329a <HAL_UART_Transmit+0xa6>
 8003212:	2a00      	cmp	r2, #0
 8003214:	d041      	beq.n	800329a <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003216:	2380      	movs	r3, #128	@ 0x80
 8003218:	68a2      	ldr	r2, [r4, #8]
 800321a:	015b      	lsls	r3, r3, #5
 800321c:	429a      	cmp	r2, r3
 800321e:	d104      	bne.n	800322a <HAL_UART_Transmit+0x36>
 8003220:	6923      	ldr	r3, [r4, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 8003226:	4201      	tst	r1, r0
 8003228:	d137      	bne.n	800329a <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 800322a:	0023      	movs	r3, r4
 800322c:	3368      	adds	r3, #104	@ 0x68
 800322e:	781a      	ldrb	r2, [r3, #0]
 8003230:	2002      	movs	r0, #2
 8003232:	2a01      	cmp	r2, #1
 8003234:	d031      	beq.n	800329a <HAL_UART_Transmit+0xa6>
 8003236:	2201      	movs	r2, #1
 8003238:	701a      	strb	r2, [r3, #0]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323a:	2300      	movs	r3, #0
 800323c:	66e3      	str	r3, [r4, #108]	@ 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800323e:	3321      	adds	r3, #33	@ 0x21
 8003240:	703b      	strb	r3, [r7, #0]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003242:	f7ff fb55 	bl	80028f0 <HAL_GetTick>

    huart->TxXferSize = Size;
 8003246:	0023      	movs	r3, r4
 8003248:	3350      	adds	r3, #80	@ 0x50
 800324a:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 800324c:	805e      	strh	r6, [r3, #2]
      huart->TxXferCount--;
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800324e:	2680      	movs	r6, #128	@ 0x80
    tickstart = HAL_GetTick();
 8003250:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003252:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 8003254:	0021      	movs	r1, r4
 8003256:	3152      	adds	r1, #82	@ 0x52
 8003258:	880b      	ldrh	r3, [r1, #0]
 800325a:	b29a      	uxth	r2, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10d      	bne.n	800327c <HAL_UART_Transmit+0x88>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003260:	9b03      	ldr	r3, [sp, #12]
 8003262:	2140      	movs	r1, #64	@ 0x40
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	0020      	movs	r0, r4
 8003268:	9b02      	ldr	r3, [sp, #8]
 800326a:	f7ff fe69 	bl	8002f40 <UART_WaitOnFlagUntilTimeout>
 800326e:	2800      	cmp	r0, #0
 8003270:	d112      	bne.n	8003298 <HAL_UART_Transmit+0xa4>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003272:	2320      	movs	r3, #32

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003274:	3468      	adds	r4, #104	@ 0x68
    huart->gState = HAL_UART_STATE_READY;
 8003276:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 8003278:	7020      	strb	r0, [r4, #0]

    return HAL_OK;
 800327a:	e00e      	b.n	800329a <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 800327c:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800327e:	2200      	movs	r2, #0
      huart->TxXferCount--;
 8003280:	3b01      	subs	r3, #1
 8003282:	b29b      	uxth	r3, r3
 8003284:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003286:	9b03      	ldr	r3, [sp, #12]
 8003288:	2180      	movs	r1, #128	@ 0x80
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	0020      	movs	r0, r4
 800328e:	9b02      	ldr	r3, [sp, #8]
 8003290:	f7ff fe56 	bl	8002f40 <UART_WaitOnFlagUntilTimeout>
 8003294:	2800      	cmp	r0, #0
 8003296:	d002      	beq.n	800329e <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 8003298:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800329a:	b005      	add	sp, #20
 800329c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800329e:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80032a0:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a2:	42b3      	cmp	r3, r6
 80032a4:	d108      	bne.n	80032b8 <HAL_UART_Transmit+0xc4>
 80032a6:	6923      	ldr	r3, [r4, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d105      	bne.n	80032b8 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80032ac:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 80032ae:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80032b0:	05db      	lsls	r3, r3, #23
 80032b2:	0ddb      	lsrs	r3, r3, #23
 80032b4:	8513      	strh	r3, [r2, #40]	@ 0x28
        pData += 2;
 80032b6:	e7cd      	b.n	8003254 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80032b8:	782b      	ldrb	r3, [r5, #0]
 80032ba:	3501      	adds	r5, #1
 80032bc:	8513      	strh	r3, [r2, #40]	@ 0x28
 80032be:	e7c9      	b.n	8003254 <HAL_UART_Transmit+0x60>

080032c0 <Reset_Handler>:
 80032c0:	2100      	movs	r1, #0
 80032c2:	e003      	b.n	80032cc <LoopCopyDataInit>

080032c4 <CopyDataInit>:
 80032c4:	4b0b      	ldr	r3, [pc, #44]	@ (80032f4 <LoopForever+0x2>)
 80032c6:	585b      	ldr	r3, [r3, r1]
 80032c8:	5043      	str	r3, [r0, r1]
 80032ca:	3104      	adds	r1, #4

080032cc <LoopCopyDataInit>:
 80032cc:	480a      	ldr	r0, [pc, #40]	@ (80032f8 <LoopForever+0x6>)
 80032ce:	4b0b      	ldr	r3, [pc, #44]	@ (80032fc <LoopForever+0xa>)
 80032d0:	1842      	adds	r2, r0, r1
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d3f6      	bcc.n	80032c4 <CopyDataInit>
 80032d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003300 <LoopForever+0xe>)
 80032d8:	e002      	b.n	80032e0 <LoopFillZerobss>

080032da <FillZerobss>:
 80032da:	2300      	movs	r3, #0
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	3204      	adds	r2, #4

080032e0 <LoopFillZerobss>:
 80032e0:	4b08      	ldr	r3, [pc, #32]	@ (8003304 <LoopForever+0x12>)
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d3f9      	bcc.n	80032da <FillZerobss>
 80032e6:	e000      	b.n	80032ea <LoopFillZerobss+0xa>
 80032e8:	bf00      	nop
 80032ea:	f7fd f8c9 	bl	8000480 <__libc_init_array>
 80032ee:	f7ff f8d5 	bl	800249c <main>

080032f2 <LoopForever>:
 80032f2:	e7fe      	b.n	80032f2 <LoopForever>
 80032f4:	08003674 	.word	0x08003674
 80032f8:	20000000 	.word	0x20000000
 80032fc:	20000060 	.word	0x20000060
 8003300:	20000060 	.word	0x20000060
 8003304:	20000320 	.word	0x20000320

08003308 <BusFault_Handler>:
 8003308:	e7fe      	b.n	8003308 <BusFault_Handler>
 800330a:	0000      	movs	r0, r0

0800330c <_init>:
 800330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330e:	46c0      	nop			@ (mov r8, r8)
 8003310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003312:	bc08      	pop	{r3}
 8003314:	469e      	mov	lr, r3
 8003316:	4770      	bx	lr

08003318 <_fini>:
 8003318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331a:	46c0      	nop			@ (mov r8, r8)
 800331c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331e:	bc08      	pop	{r3}
 8003320:	469e      	mov	lr, r3
 8003322:	4770      	bx	lr
